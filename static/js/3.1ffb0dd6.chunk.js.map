{"version":3,"sources":["assets/not-found.gif","assets/not-connected.gif","pages/BalancesPage.tsx"],"names":["module","exports","Title","Typography","WrappedCol","styled","Col","getNftByMintAddress","mintAddress","result","USE_ALL_NFTS","filter","nft","toBase58","length","RowCard","start","end","array","align","justify","flex","slice","map","balance","key","img","imgSmall","name","supply","marketAddress","walletBalance","BalanceRow","divider","longueur","quotien","Math","floor","reste","MAP_ARRAY","Array","from","v","i","e","TopPage","connected","useWallet","style","paddingTop","level","textAlign","src","notConnected","height","alt","borderRadius","BalancesPage","walletBalances","useWalletBalancesForAllMarkets","openOrdersBalances","useAllOpenOrdersBalances","windowDimensions","useWindowDimensions","data","balances","mint","openOrdersFree","openOrdersTotal","openOrdersAccount","free","total","notFoundGif","width","paddingRight","paddingLeft"],"mappings":"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","file":"static/js/3.1ffb0dd6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/not-found.0e117165.gif\";","module.exports = __webpack_public_path__ + \"static/media/not-connected.6f26844a.gif\";","import React from 'react';\nimport { Row, Col, Typography } from 'antd';\nimport {\n  useAllOpenOrdersBalances,\n  useWalletBalancesForAllMarkets,\n} from '../utils/markets';\nimport { useWindowDimensions } from '../components/utils';\nimport { NFT, USE_ALL_NFTS } from '../nfts';\nimport { NftCardBalance } from '../components/NftCard';\nimport styled from 'styled-components';\nimport { useWallet } from '../utils/wallet';\nimport notConnected from '../assets/not-connected.gif';\nimport notFoundGif from '../assets/not-found.gif';\nconst { Title } = Typography;\n\nconst WrappedCol = styled(Col)`\n  padding: 30px;\n`;\n\nconst getNftByMintAddress = (mintAddress: string): NFT | null => {\n  const result = USE_ALL_NFTS.filter(\n    (nft) => nft.mintAddress.toBase58() === mintAddress,\n  );\n  return result.length === 1 ? result[0] : null;\n};\n\nconst RowCard = ({ start, end, array }) => {\n  return (\n    <Row align=\"middle\" justify=\"center\">\n      <Col flex=\"auto\" />\n      {array?.slice(start, end).map((balance: any, key: number) => {\n        return (\n          <>\n            <WrappedCol key={key}>\n              <NftCardBalance\n                img={balance.nft.imgSmall}\n                name={balance.nft.name}\n                supply={balance.nft.supply}\n                mintAddress={balance.nft.mintAddress}\n                marketAddress={balance.nft.marketAddress}\n                walletBalance={balance.walletBalance}\n              />\n            </WrappedCol>\n          </>\n        );\n      })}\n      <Col flex=\"auto\" />\n    </Row>\n  );\n};\n\nconst BalanceRow = ({ divider, longueur, array }) => {\n  const quotien = Math.floor(longueur / divider);\n  const reste = longueur % divider;\n  const MAP_ARRAY = Array.from({ length: quotien }, (v, i) => i);\n  return (\n    <>\n      {quotien === 0 && <RowCard start={0} end={reste} array={array} />}\n      {MAP_ARRAY.map((e) => {\n        return (\n          <RowCard\n            start={divider * e}\n            end={divider * e + divider}\n            array={array}\n          />\n        );\n      })}\n      <RowCard start={longueur - reste} end={longueur} array={array} />\n    </>\n  );\n};\n\nconst TopPage = () => {\n  const { connected } = useWallet();\n  return (\n    <>\n      <Row style={{ paddingTop: '50px' }} align=\"middle\" justify=\"center\">\n        <Col flex=\"auto\" />\n        <Col>\n          {connected ? (\n            <Title level={2} style={{ textAlign: 'center' }}>\n              Your Collection\n            </Title>\n          ) : (\n            <Title level={2}>Connect your wallet</Title>\n          )}\n        </Col>\n        <Col flex=\"auto\" />\n      </Row>\n      <Row style={{ paddingTop: '10px' }} align=\"middle\" justify=\"center\">\n        <Col flex=\"auto\" />\n        <Col>\n          {connected ? null : (\n            <img\n              src={notConnected}\n              height=\"300px\"\n              alt=\"not connected\"\n              style={{ borderRadius: '20px' }}\n            />\n          )}\n        </Col>\n        <Col flex=\"auto\" />\n      </Row>\n    </>\n  );\n};\n\nexport default function BalancesPage() {\n  const walletBalances = useWalletBalancesForAllMarkets();\n  const openOrdersBalances = useAllOpenOrdersBalances();\n  const windowDimensions = useWindowDimensions();\n  const { connected } = useWallet();\n\n  let data = (walletBalances || []).map((balance) => {\n    const balances = {\n      nft: getNftByMintAddress(balance.mint),\n      mint: balance.mint,\n      walletBalance: balance.balance,\n      openOrdersFree: 0,\n      openOrdersTotal: 0,\n    };\n    for (let openOrdersAccount of openOrdersBalances[balance.mint] || []) {\n      balances['openOrdersFree'] += openOrdersAccount.free;\n      balances['openOrdersTotal'] += openOrdersAccount.total;\n    }\n    return balances;\n  });\n  data = data.filter((balance) => !!balance.nft && balance.walletBalance > 0);\n  const longueur = data.length;\n\n  return (\n    <>\n      <TopPage />\n      {longueur === 0 && connected && (\n        <Row style={{ paddingTop: '50px' }}>\n          <Col flex=\"auto\" />\n          <Col>\n            <Title level={2}>You don't have any NFT in your collection</Title>\n            <img src={notFoundGif} width=\"100%\" alt=\"not found\" />\n          </Col>\n          <Col flex=\"auto\" />\n        </Row>\n      )}\n      {windowDimensions.width > 1600 && (\n        <BalanceRow divider={3} longueur={longueur} array={data} />\n      )}\n      {1100 < windowDimensions.width && windowDimensions.width < 1600 && (\n        <BalanceRow divider={2} longueur={longueur} array={data} />\n      )}\n      {windowDimensions.width < 1100 && (\n        <>\n          {data.map((balance, key) => {\n            return (\n              <WrappedCol\n                style={{ paddingRight: '10%', paddingLeft: '10%' }}\n                key={key}\n              >\n                <NftCardBalance\n                  img={balance.nft?.img}\n                  name={balance.nft?.name}\n                  supply={balance.nft?.supply}\n                  mintAddress={balance.nft?.mintAddress}\n                  marketAddress={balance.nft?.marketAddress}\n                  walletBalance={balance.walletBalance}\n                />\n              </WrappedCol>\n            );\n          })}\n        </>\n      )}\n    </>\n  );\n}\n"],"sourceRoot":""}