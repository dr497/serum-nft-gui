{"version":3,"sources":["components/RedeemCard.tsx","utils/Urls.tsx","utils/network.tsx","components/RedeemForm.tsx","pages/BitcoinTram.tsx"],"names":["Paragraph","Typography","Countdown","Statistic","deadline","Date","parse","RedeemButton","styled","Button","WrappedCard","Card","WrapperParagraph","RedeemCard","nft","disabled","onClick","style","img","maxWidth","parent","display","minHeight","children","margin","div","height","countdown","paddingTop","align","justify","src","alt","name","redeemText","auctionText","title","value","flex","block","type","size","paddingRight","Emoji","symbol","label","class","Urls","postRedeemForm","apiPost","path","body","headers","a","fetch","method","JSON","stringify","response","ok","json","console","log","data","result","Spin","antIcon","LoadingOutlined","fontSize","spin","indicator","layout","labelCol","span","wrapperCol","validateMessages","required","types","email","number","range","RedeemForm","nftMint","destination","useState","submitting","setSubmitting","connection","useConnection","wallet","useWallet","useTokenAccounts","tokenAccounts","source","filter","e","effectiveMint","toBase58","length","onFinish","values","amount","Math","round","parseFloat","user","Error","sendSplToken","owner","publicKey","sourceSpl","pubkey","txid","txId","notify","message","Item","rules","min","max","offset","htmlType","BTC_TRAM","USE_REDEEMABLE_NFTS","Wrapper","RenderTradePage","onChangeOrderRef","onPrice","onSize","windowDimensions","useWindowDimensions","walletBalances","useWalletBalancesForAllMarkets","setDisabled","showModal","setShowModal","useEffect","mint","mintAddress","styles","flexWrap","child","paddingLeft","width","paddingBottom","NftCard","setChangeOrderRef","smallScreen","visible","centered","footer","key","PublicKey","toString","BitcoinTram","useMarket","marketName","setMarketAddress","marketAddress","document","changeOrderRef","useRef","componentProps","ref","current","useCallback","price"],"mappings":"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","file":"static/js/6.4b679b60.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Card, Typography, Row, Col, Statistic } from 'antd';\nimport styled from 'styled-components';\nimport Emoji from './Emoji';\n\nconst { Paragraph } = Typography;\nconst { Countdown } = Statistic;\n\nconst deadline = Date.parse('2020-11-06T21:00:00.000+08:00');\n\nconst RedeemButton = styled(Button)`\n  width: auto;\n  height: auto;\n  margin: 20px 0px 0px 0px;\n  background: #f23b69;\n  border-color: #f23b69;\n  &:hover {\n    background: #000;\n    border-color: #000;\n    color: #f23b69;\n  }\n`;\n\nconst WrappedCard = styled(Card)`\n  background: linear-gradient(\n    162.92deg,\n    rgb(43, 43, 43) 12.36%,\n    rgb(0, 0, 0) 94.75%\n  );\n  bordercolor: transparent;\n  border-radius: 25px;\n  cursor: pointer;\n  overflow: hidden;\n  width: 50vw;\n  height: 100%;\n`;\n\nconst WrapperParagraph = styled(Paragraph)`\n  padding-top: 20px;\n  font-size: 16px;\n  text-align: center;\n`;\n\nconst RedeemCard = ({ nft, disabled, onClick }) => {\n  const style = {\n    img: {\n      maxWidth: '100%',\n    } as React.CSSProperties,\n    parent: { display: 'flex', minHeight: '100vh' } as React.CSSProperties,\n    children: { margin: 'auto' } as React.CSSProperties,\n    div: {\n      height: '100%',\n    },\n    countdown: {\n      paddingTop: '10px',\n    },\n  };\n  return (\n    <div style={style.div}>\n      <WrappedCard>\n        <Row align=\"middle\" justify=\"center\">\n          <div style={style.parent}>\n            <div style={style.children}>\n              <img src={nft.img} alt={nft.name} style={style.img} />\n              <WrapperParagraph>{redeemText}</WrapperParagraph>\n              <WrapperParagraph>\n                {auctionText}\n                <Countdown\n                  title=\"Countdown\"\n                  value={deadline}\n                  style={style.countdown}\n                />\n              </WrapperParagraph>\n              <Row align=\"middle\" justify=\"center\">\n                <Col flex=\"auto\" />\n                <Col>\n                  <RedeemButton\n                    disabled={disabled}\n                    onClick={onClick}\n                    block\n                    type=\"primary\"\n                    size=\"large\"\n                  >\n                    <span style={{ paddingRight: 10 }}>{'Redeem'}</span>{' '}\n                    <Emoji symbol=\"🔥\" label=\"burn\" class=\"emoji-redeem\" />\n                  </RedeemButton>\n                </Col>\n                <Col flex=\"auto\" />\n              </Row>\n            </div>\n          </div>\n          <Col flex=\"auto\" />\n        </Row>\n      </WrappedCard>\n    </div>\n  );\n};\n\nexport default RedeemCard;\n\nconst redeemText = `\nThis NFT can be redeemed for a physical Bitcoin Tram model mailed to your door\n`;\n\nconst auctionText = `\nThe auction will end on 06/11/2020 at 9pm UTC+8\n`;\n","const Urls = {\n  postRedeemForm: 'https://bonfida.com/api/redeem',\n};\n\nexport default Urls;\n","import Urls from './Urls';\n\nexport async function apiPost(path, body, headers) {\n  try {\n    let response = await fetch(path, {\n      method: 'POST',\n      body: JSON.stringify(body),\n      headers: headers,\n    });\n    if (!response.ok) {\n      return [];\n    }\n    let json = await response.json();\n    return json;\n  } catch (err) {\n    console.log(err);\n    return [];\n  }\n}\n\nexport const postRedeemForm = async (data) => {\n  const result = await apiPost(Urls.postRedeemForm, data, {});\n  return result;\n};\n","import React, { useState } from 'react';\nimport {\n  Form,\n  Input,\n  InputNumber,\n  Button,\n  Spin as SpinAntd,\n  Row,\n  Col,\n} from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { PublicKey } from '@solana/web3.js';\nimport { postRedeemForm } from '../utils/network';\nimport { useWallet } from '../utils/wallet';\nimport { useTokenAccounts } from '../utils/markets';\nimport { sendSplToken } from '../utils/send';\nimport { useConnection } from '../utils/connection';\nimport { notify } from '../utils/notifications';\n\nconst Spin = () => {\n  const antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n  return <SpinAntd indicator={antIcon} />;\n};\n\nconst layout = {\n  labelCol: {\n    span: 8,\n  },\n  wrapperCol: {\n    span: 16,\n  },\n};\nconst validateMessages = {\n  required: '${label} is required!',\n  types: {\n    email: '${label} is not a valid email!',\n    number: '${label} is not a valid number!',\n  },\n  number: {\n    range: '${label} must be between ${min} and ${max}',\n  },\n};\n\nconst RedeemForm = ({\n  nftMint,\n  destination,\n}: {\n  nftMint: PublicKey;\n  destination: PublicKey;\n}) => {\n  const [submitting, setSubmitting] = useState(false);\n  const connection = useConnection();\n  const { wallet } = useWallet();\n  const [tokenAccounts] = useTokenAccounts();\n  const source = tokenAccounts?.filter(\n    (e) => e.effectiveMint.toBase58() === nftMint.toBase58(),\n  );\n  if (!source || source?.length === 0) {\n    console.log('Error getting source');\n    return null;\n  }\n\n  const onFinish = async (values) => {\n    setSubmitting(true);\n    try {\n      const amount = Math.round(parseFloat(values.user.amount));\n      if (!amount || amount <= 0) {\n        throw new Error('Invalid amount');\n      }\n      const txid = await sendSplToken({\n        connection: connection,\n        owner: wallet.publicKey,\n        sourceSpl: source[0]?.pubkey,\n        destination: destination,\n        amount: amount,\n        wallet: wallet,\n      });\n      await postRedeemForm({ ...values.user, txId: txid });\n      notify({ message: 'Redeem request successful', type: 'success', txid });\n    } catch (err) {\n      console.log(`Error redeeming: ${err}`);\n      notify({\n        message: 'Error redeeming',\n        type: 'error',\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <Row>\n      <Col flex=\"auto\" />\n      <Col flex=\"800px\">\n        <Form\n          {...layout}\n          name=\"nest-messages\"\n          onFinish={onFinish}\n          validateMessages={validateMessages}\n          style={{ paddingTop: 20, paddingRight: 40 }}\n        >\n          <Form.Item\n            name={['user', 'email']}\n            label=\"Email\"\n            rules={[\n              {\n                type: 'email',\n                required: true,\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            name={['user', 'name']}\n            label=\"Name\"\n            rules={[\n              {\n                required: true,\n                message: 'Please enter your name',\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            name={['user', 'phone']}\n            label=\"Phone Number\"\n            rules={[\n              {\n                required: true,\n                message: 'Please input your phone number',\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            name={['user', 'country']}\n            label=\"Country\"\n            rules={[\n              {\n                required: true,\n                message: 'Please enter your country',\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            name={['user', 'City']}\n            label=\"City\"\n            rules={[\n              {\n                required: true,\n                message: 'Please enter your city',\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            name={['user', 'address']}\n            label=\"Address\"\n            rules={[\n              {\n                required: true,\n                message: 'Please enter your address',\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            name={['user', 'postcode']}\n            label=\"Postcode\"\n            rules={[\n              {\n                required: true,\n                message: 'Please enter your postcode',\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            name={['user', 'additional-information']}\n            label=\"Additional information\"\n            rules={[\n              {\n                required: false,\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            name={['user', 'amount']}\n            label=\"Amount to redeem\"\n            rules={[\n              {\n                required: true,\n                message: 'Please enter the amount of token you want to redeem',\n                type: 'number',\n                min: 0,\n                max: 99,\n              },\n            ]}\n          >\n            <InputNumber />\n          </Form.Item>\n\n          <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\n            <Button type=\"primary\" htmlType=\"submit\" disabled={submitting}>\n              {submitting ? <Spin /> : 'Submit'}\n            </Button>\n          </Form.Item>\n        </Form>\n      </Col>\n      <Col flex=\"auto\" />\n    </Row>\n  );\n};\n\nexport default RedeemForm;\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Col, Row, Modal, Button } from 'antd';\nimport styled from 'styled-components';\nimport { useMarket } from '../utils/markets';\nimport { NftCardTrade } from '../components/NftCard';\nimport { USE_REDEEMABLE_NFTS } from '../nfts';\nimport RedeemCard from '../components/RedeemCard';\nimport { useWindowDimensions } from '../components/utils';\nimport { useWalletBalancesForAllMarkets } from '../utils/markets';\nimport Emoji from '../components/Emoji';\nimport RedeemForm from '../components/RedeemForm';\nimport { PublicKey } from '@solana/web3.js';\n\nconst BTC_TRAM = USE_REDEEMABLE_NFTS[0];\n\nconst Wrapper = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  padding: 16px 16px;\n  .borderNone .ant-select-selector {\n    border: none !important;\n  }\n`;\n\nconst BitcoinTram = () => {\n  const { marketName, setMarketAddress } = useMarket();\n\n  useEffect(() => {\n    setMarketAddress(BTC_TRAM.marketAddress.toBase58());\n  }, [setMarketAddress]);\n\n  useEffect(() => {\n    document.title = marketName ? `${marketName} — Solible` : 'Solible';\n  }, [marketName]);\n\n  const changeOrderRef = useRef<\n    ({ size, price }: { size?: number; price?: number }) => void\n  >();\n\n  const componentProps = {\n    onChangeOrderRef: (ref: any) => (changeOrderRef.current = ref),\n    onPrice: useCallback(\n      (price) => changeOrderRef.current && changeOrderRef.current({ price }),\n      [],\n    ),\n    onSize: useCallback(\n      (size) => changeOrderRef.current && changeOrderRef.current({ size }),\n      [],\n    ),\n  };\n\n  return (\n    <>\n      <Wrapper>\n        <RenderTradePage {...componentProps} />\n      </Wrapper>\n    </>\n  );\n};\n\nconst RenderTradePage = ({ onChangeOrderRef, onPrice, onSize }) => {\n  const windowDimensions = useWindowDimensions();\n  const walletBalances = useWalletBalancesForAllMarkets();\n  const [disabled, setDisabled] = useState(true);\n  const [showModal, setShowModal] = useState(false);\n\n  useEffect(() => {\n    if (walletBalances) {\n      setDisabled(\n        walletBalances.filter((e) => e.mint === BTC_TRAM.mintAddress.toBase58())\n          .length > 0\n          ? false\n          : true,\n      );\n    }\n  }, [walletBalances]);\n\n  const styles = {\n    parent: {\n      display: 'flex',\n      flexWrap: 'wrap',\n    } as React.CSSProperties,\n    child: {\n      flex: 1,\n      paddingRight: 20,\n      paddingLeft: 20,\n    } as React.CSSProperties,\n    img: {\n      width: '100%',\n      paddingBottom: 30,\n    } as React.CSSProperties,\n  };\n\n  const onClick = () => {\n    setShowModal(true);\n  };\n\n  if (!BTC_TRAM) {\n    return null;\n  }\n\n  return (\n    <>\n      {windowDimensions.width > 1210 && (\n        <div style={styles.parent}>\n          <>\n            <div style={styles.child}>\n              <RedeemCard\n                nft={BTC_TRAM}\n                disabled={disabled}\n                onClick={onClick}\n              />\n            </div>\n            <div style={styles.child}>\n              <NftCardTrade\n                nft={BTC_TRAM}\n                setChangeOrderRef={onChangeOrderRef}\n                smallScreen={false}\n                onPrice={onPrice}\n                onSize={onSize}\n              />\n            </div>\n            <Modal\n              visible={showModal}\n              width=\"50%\"\n              centered={true}\n              footer={[\n                <Button key=\"back\" onClick={() => setShowModal(false)}>\n                  Close\n                </Button>,\n              ]}\n            >\n              <RedeemForm\n                nftMint={BTC_TRAM.mintAddress}\n                destination={\n                  new PublicKey('FCHmpXY6AQifAwe6SjAEGfF6APTPEcCjyNFAHn83ijdb')\n                }\n              />\n            </Modal>\n          </>\n        </div>\n      )}\n      {windowDimensions.width < 1210 && (\n        <>\n          <Row align=\"middle\" justify=\"center\">\n            <Col flex=\"auto\" />\n            <Col>\n              <img\n                src={BTC_TRAM.img.toString()}\n                alt={BTC_TRAM.name}\n                style={styles.img}\n              />\n            </Col>\n            <Col flex=\"auto\" />\n          </Row>\n          <Row align=\"middle\" justify=\"center\">\n            <Col flex=\"auto\" />\n            <Col>\n              <NftCardTrade\n                nft={BTC_TRAM}\n                setChangeOrderRef={onChangeOrderRef}\n                smallScreen={false}\n                onPrice={onPrice}\n                onSize={onSize}\n              />\n            </Col>\n            <Col flex=\"auto\" />\n          </Row>\n        </>\n      )}\n    </>\n  );\n};\n\nconst ModalText = () => {\n  return (\n    <>\n      To redeem your NFT:\n      <ul>\n        <li style={{ paddingTop: 15 }}>\n          Send the NFT to the following address{' '}\n          <a\n            href=\"https://explorer.solana.com/address/8uKHDXE1hosqSYEp3wbjzvWPnoZF1GNmLeVwYXgLaoAX\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            8uKHDXE1hosqSYEp3wbjzvWPnoZF1GNmLeVwYXgLaoAX\n          </a>{' '}\n        </li>\n        <li>\n          Then email <a href=\"mailto:redeem@solible.com\">redeem@solible.com</a>{' '}\n          with the transaction ID and your shipping information.\n        </li>\n      </ul>\n      <div>\n        <Emoji symbol=\"🔥\" label=\"burn\" class=\"emoji-redeem\" /> Your NFT will be\n        redeemed and shipped within 48 hours\n      </div>\n      <div>\n        <Emoji symbol=\"🚫\" label=\"warning\" class=\"emoji-redeem\" /> NFTs sent\n        without an email will be returned to the sender after 72 hours\n      </div>\n    </>\n  );\n};\n\nexport default BitcoinTram;\n"],"sourceRoot":""}