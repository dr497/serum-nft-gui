{"version":3,"sources":["pages/OpenOrdersPage.tsx"],"names":["OpenOrdersPage","useAllOpenOrders","openOrders","loaded","refreshOpenOrders","customMarkets","useMarket","marketInfos","getMarketInfos","marketAddressesToNames","Object","fromEntries","map","info","address","toBase58","name","useAllMarkets","allMarkets","marketsByAddress","marketInfo","market","dataSource","orderInfos","orders","order","marketName","marketAddress","flat","style","flex","paddingTop","onClick","loading","pageSize","onCancelSuccess","marketFilter"],"mappings":"2OAOe,SAASA,IAAkB,IAAD,EACSC,cAAzCC,EADgC,EAChCA,WAAYC,EADoB,EACpBA,OAAQC,EADY,EACZA,kBACtBC,EAAiBC,cAAjBD,cACDE,EAAcC,YAAeH,GAC7BI,EAAyBC,OAAOC,YAAYJ,EAAYK,KAAI,SAAAC,GAAI,MAAI,CAACA,EAAKC,QAAQC,WAAYF,EAAKG,UAJhE,EAKpBC,YAAcZ,GAA5Ba,EALkC,oBAMjCC,EAAmBT,OAAOC,aAAaO,GAAc,IAAIN,KAC7D,SAAAQ,GAAU,MAAI,CAACA,EAAWC,OAAOP,QAAQC,WAAYK,EAAWC,YAG5DC,GAA8CpB,GAAc,IAAIU,KAAI,SAACW,GAAD,OACxEA,EAAWC,OAAOZ,KAAI,SAAAa,GACpB,OAAO,aACLC,WAAYjB,EAAuBc,EAAWI,eAC9CN,OAAQF,EAAiBI,EAAWI,gBACjCF,SAGPG,OAEF,OACE,kBAAC,IAAD,CAAiBC,MAAO,CAAEC,KAAM,EAAGC,WAAY,KAC7C,kBAAC,IAAD,CACEC,QAAS5B,EACT6B,SAAU9B,GAFZ,WAMA,kBAAC,IAAD,CACED,WAAYoB,EACZY,SAAU,GACVD,SAAU9B,EACVgC,gBAAiB/B,EACjBgC,cAAY","file":"static/js/7.2a82927f.chunk.js","sourcesContent":["import React from 'react';\nimport FloatingElement from '../components/layout/FloatingElement';\nimport {getMarketInfos, useAllMarkets, useAllOpenOrders, useMarket} from \"../utils/markets\";\nimport OpenOrderTable from \"../components/UserInfoTable/OpenOrderTable\";\nimport {Button} from \"antd\";\nimport {OrderWithMarketAndMarketName} from \"../utils/types\";\n\nexport default function OpenOrdersPage() {\n  const {openOrders, loaded, refreshOpenOrders} = useAllOpenOrders();\n  let {customMarkets} = useMarket();\n  let marketInfos = getMarketInfos(customMarkets);\n  let marketAddressesToNames = Object.fromEntries(marketInfos.map(info => [info.address.toBase58(), info.name]));\n  let [allMarkets] = useAllMarkets(customMarkets);\n  const marketsByAddress = Object.fromEntries((allMarkets || []).map(\n    marketInfo => [marketInfo.market.address.toBase58(), marketInfo.market]\n  ));\n\n  const dataSource: OrderWithMarketAndMarketName[] = (openOrders || []).map((orderInfos) =>\n    orderInfos.orders.map(order => {\n      return {\n        marketName: marketAddressesToNames[orderInfos.marketAddress],\n        market: marketsByAddress[orderInfos.marketAddress],\n        ...order\n      };\n    })\n  ).flat();\n\n  return (\n    <FloatingElement style={{ flex: 1, paddingTop: 10 }}>\n      <Button\n        onClick={refreshOpenOrders}\n        loading={!loaded}\n      >\n        Refresh\n      </Button>\n      <OpenOrderTable\n        openOrders={dataSource}\n        pageSize={25}\n        loading={!loaded}\n        onCancelSuccess={refreshOpenOrders}\n        marketFilter\n      />\n    </FloatingElement>\n  );\n}\n"],"sourceRoot":""}