{"version":3,"sources":["components/RedeemCard.tsx","utils/Urls.tsx","utils/network.tsx","components/RedeemForm.tsx","pages/BitcoinTram.tsx"],"names":["Paragraph","Typography","Countdown","Statistic","deadline","Date","parse","RedeemButton","styled","Button","WrappedCard","Card","WrapperParagraph","RedeemCard","nft","disabled","onClick","style","img","maxWidth","parent","display","minHeight","children","margin","div","height","countdown","paddingTop","align","justify","src","alt","name","redeemText","auctionText","title","value","flex","block","type","size","paddingRight","Emoji","symbol","label","class","Urls","postRedeemForm","apiPost","path","body","headers","a","fetch","method","JSON","stringify","response","ok","json","console","log","data","result","StyledInput","Input","StyledInputNumber","InputNumber","Spin","antIcon","LoadingOutlined","fontSize","spin","indicator","layout","labelCol","span","wrapperCol","validateMessages","required","types","email","number","range","Help","textAlign","paddingLeft","href","RedeemForm","nftMint","destination","useState","step","setStep","submitting","setSubmitting","connection","useConnection","wallet","useWallet","useTokenAccounts","tokenAccounts","source","filter","e","effectiveMint","toBase58","emailRef","useRef","nameRef","phoneRef","amountRef","countryRef","cityRef","addressRef","postCodeRef","additionalRef","length","styles","icon","color","fontWeight","placeHolder","onFinish","values","amount","Math","round","current","Error","sendSplToken","owner","publicKey","sourceSpl","pubkey","txid","postBody","phone","country","city","address","postcode","txId","notify","message","Item","rules","prefix","MailOutlined","onChange","target","UserOutlined","PhoneOutlined","min","max","parseFloat","toString","GlobalOutlined","FileSearchOutlined","offset","padding","htmlType","BTC_TRAM","USE_REDEEMABLE_NFTS","Wrapper","RenderTradePage","onChangeOrderRef","onPrice","onSize","windowDimensions","useWindowDimensions","walletBalances","useWalletBalancesForAllMarkets","setDisabled","showModal","setShowModal","connected","useEffect","mint","mintAddress","flexWrap","child","width","paddingBottom","background","mask","modal","redeemAddress","NftCard","setChangeOrderRef","smallScreen","closable","visible","onOk","onCancel","centered","keyboard","maskClosable","bodyStyle","maskStyle","footer","BitcoinTram","useMarket","marketName","setMarketAddress","marketAddress","document","changeOrderRef","componentProps","ref","useCallback","price"],"mappings":"o9BAKQA,EAAcC,IAAdD,UACAE,EAAcC,IAAdD,UAEFE,EAAWC,KAAKC,MAAM,iCAEtBC,EAAeC,YAAOC,IAAPD,CAAH,KAaZE,EAAcF,YAAOG,IAAPH,CAAH,KAcXI,EAAmBJ,YAAOR,EAAPQ,CAAH,KA6DPK,EAvDI,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,IAAKC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QAC7BC,EAAQ,CACZC,IAAK,CACHC,SAAU,QAEZC,OAAQ,CAAEC,QAAS,OAAQC,UAAW,SACtCC,SAAU,CAAEC,OAAQ,QACpBC,IAAK,CACHC,OAAQ,QAEVC,UAAW,CACTC,WAAY,SAGhB,OACE,yBAAKX,MAAOA,EAAMQ,KAChB,kBAACf,EAAD,KACE,kBAAC,IAAD,CAAKmB,MAAM,SAASC,QAAQ,UAC1B,yBAAKb,MAAOA,EAAMG,QAChB,yBAAKH,MAAOA,EAAMM,UAChB,yBAAKQ,IAAKjB,EAAII,IAAKc,IAAKlB,EAAImB,KAAMhB,MAAOA,EAAMC,MAC/C,kBAACN,EAAD,KAAmBsB,GACnB,kBAACtB,EAAD,KACGuB,EACD,kBAACjC,EAAD,CACEkC,MAAM,YACNC,MAAOjC,EACPa,MAAOA,EAAMU,aAGjB,kBAAC,IAAD,CAAKE,MAAM,SAASC,QAAQ,UAC1B,kBAAC,IAAD,CAAKQ,KAAK,SACV,kBAAC,IAAD,KACE,kBAAC/B,EAAD,CACEQ,SAAUA,EACVC,QAASA,EACTuB,OAAK,EACLC,KAAK,UACLC,KAAK,SAEL,0BAAMxB,MAAO,CAAEyB,aAAc,KAAO,UAAiB,IACrD,kBAACC,EAAA,EAAD,CAAOC,OAAO,eAAKC,MAAM,OAAOC,MAAM,mBAG1C,kBAAC,IAAD,CAAKR,KAAK,YAIhB,kBAAC,IAAD,CAAKA,KAAK,aASdJ,EAAU,qFAIVC,EAAW,sD,mICpGFY,EAJF,CACXC,eAAgB,kCCCX,SAAeC,EAAtB,sC,4CAAO,WAAuBC,EAAMC,EAAMC,GAAnC,iBAAAC,EAAA,+EAEkBC,MAAMJ,EAAM,CAC/BK,OAAQ,OACRJ,KAAMK,KAAKC,UAAUN,GACrBC,QAASA,IALR,WAECM,EAFD,QAOWC,GAPX,yCAQM,IARN,uBAUcD,EAASE,OAVvB,cAUCA,EAVD,yBAWIA,GAXJ,yCAaHC,QAAQC,IAAR,MAbG,kBAcI,IAdJ,2D,sBAkBA,IAAMd,EAAc,uCAAG,WAAOe,GAAP,eAAAV,EAAA,sEACPJ,EAAQF,EAAKC,eAAgBe,EAAM,IAD5B,cACtBC,EADsB,yBAErBA,GAFqB,2CAAH,sD,gRCO3B,IAAMC,GAAczD,YAAO0D,IAAP1D,CAAH,MAMX2D,GAAoB3D,YAAO4D,IAAP5D,CAAH,MAMjB6D,GAAO,WACX,IAAMC,EAAU,kBAACC,EAAA,EAAD,CAAiBtD,MAAO,CAAEuD,SAAU,IAAMC,MAAI,IAC9D,OAAO,kBAAC,IAAD,CAAUC,UAAWJ,KAGxBK,GAAS,CACbC,SAAU,CACRC,KAAM,GAERC,WAAY,CACVD,KAAM,KAGJE,GAAmB,CACvBC,SAAU,wBACVC,MAAO,CACLC,MAAO,iCACPC,OAAQ,mCAEVA,OAAQ,CACNC,MAAO,+CAwRLC,GAAO,WAQX,OACE,yBAAKpE,MAPC,CACJqE,UAAW,SACXC,YAAa,GACb3D,WAAY,KAId,kDACkD,IAChD,uBAAG4D,KAAK,6BAAR,wBAKSC,GApSI,SAAC,GAMb,IALLC,EAKI,EALJA,QACAC,EAII,EAJJA,YAII,EACoBC,mBAAS,GAD7B,mBACGC,EADH,KACSC,EADT,OAEgCF,oBAAS,GAFzC,mBAEGG,EAFH,KAEeC,EAFf,KAGEC,EAAaC,cACXC,EAAWC,cAAXD,OAJJ,EAKoBE,cAAjBC,EALH,oBAMEC,EAAM,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAeE,QAC5B,SAACC,GAAD,OAAOA,EAAEC,cAAcC,aAAejB,EAAQiB,cAG1CC,EAAWC,iBAAsB,MACjCC,EAAUD,iBAAsB,MAChCE,EAAWF,iBAAsB,MACjCG,EAAYH,iBAAO,GACnBI,EAAaJ,iBAAsB,MACnCK,EAAUL,iBAAsB,MAChCM,EAAaN,iBAAsB,MACnCO,EAAcP,iBAAsB,MACpCQ,EAAgBR,iBAAsB,MAE5C,IAAKN,GAA6B,KAAb,OAANA,QAAM,IAANA,OAAA,EAAAA,EAAQe,QAErB,OADAzD,QAAQC,IAAI,wBACL,KAGT,IAAMyD,EAAS,CACbC,KAAM,CAAEC,MAAO,SACf5E,MAAO,CAAE4E,MAAO,QAASjD,SAAU,GAAIkD,WAAY,KACnDC,YAAa,CAAEF,MAAO,UAGlBG,EAAQ,uCAAG,WAAOC,GAAP,qBAAAxE,EAAA,yDACf2C,GAAc,GADC,UAGP8B,EAASC,KAAKC,MAAMhB,EAAUiB,aACrBH,GAAU,GAJZ,sBAKL,IAAII,MAAM,kBALL,uBAOMC,YAAa,CAC9BlC,WAAYA,EACZmC,MAAOjC,EAAOkC,UACdC,UAAS,UAAE/B,EAAO,UAAT,aAAE,EAAWgC,OACtB5C,YAAaA,EACbmC,OAAQA,EACR3B,OAAQA,IAbG,cAOPqC,EAPO,OAgBPC,EAAW,CACfvD,MAAO0B,EAASqB,QAChBhG,KAAM6E,EAAQmB,QACdS,MAAO3B,EAASkB,QAChBH,OAAQd,EAAUiB,QAClBU,QAAS1B,EAAWgB,QACpBW,KAAM1B,EAAQe,QACdY,QAAS1B,EAAWc,QACpBa,SAAU1B,EAAYa,QACtB,yBAA0BZ,EAAcY,QACxCc,KAAMP,GA1BK,UA6BPxF,EAAeyF,GA7BR,QA8BbO,YAAO,CAAEC,QAAS,4BAA6BzG,KAAM,UAAWgG,SA9BnD,kDAgCb3E,QAAQC,IAAR,kCACAkF,YAAO,CACLC,QAAS,kBACTzG,KAAM,UAnCK,yBAsCbwD,GAAc,GAtCD,6EAAH,sDA0Cd,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAK1D,KAAK,SACV,kBAAC,IAAD,CAAKA,KAAK,OAAOrB,MAAO,CAAEwG,MAAO,UAC/B,kBAAC,IAAD,iBACM9C,GADN,CAEE1C,KAAK,SACL2F,SAAUA,EACV7C,iBAAkBA,GAClB9D,MAAO,CAAEW,WAAY,GAAIc,aAAc,GAAI+E,MAAO,WAExC,IAAT5B,GACC,oCACE,kBAAC,IAAKqD,KAAN,CACEjH,KAAM,CAAC,OAAQ,SACfY,MAAO,yBAAK5B,MAAOsG,EAAO1E,OAAnB,SACPsG,MAAO,CACL,CACE3G,KAAM,QACNwC,UAAU,IAGd/D,MAAOsG,EAAOC,MAEd,kBAACvD,GAAD,CACEmF,OAAQ,kBAACC,EAAA,EAAD,CAAcpI,MAAOsG,EAAOC,OACpC8B,SAAU,SAAC7C,GAAD,OAAQG,EAASqB,QAAUxB,EAAE8C,OAAOlH,UAGlD,kBAAC,IAAK6G,KAAN,CACEjH,KAAM,CAAC,OAAQ,QACfY,MAAO,yBAAK5B,MAAOsG,EAAO1E,OAAnB,QACPsG,MAAO,CACL,CACEnE,UAAU,EACViE,QAAS,4BAIb,kBAAChF,GAAD,CACEmF,OAAQ,kBAACI,EAAA,EAAD,CAAcvI,MAAOsG,EAAOC,OACpC8B,SAAU,SAAC7C,GAAD,OAAQK,EAAQmB,QAAUxB,EAAE8C,OAAOlH,UAGjD,kBAAC,IAAK6G,KAAN,CACEjH,KAAM,CAAC,OAAQ,SACfY,MAAO,yBAAK5B,MAAOsG,EAAO1E,OAAnB,gBACPsG,MAAO,CACL,CACEnE,UAAU,EACViE,QAAS,oCAIb,kBAAChF,GAAD,CACEmF,OAAQ,kBAACK,EAAA,EAAD,CAAexI,MAAOsG,EAAOC,OACrC8B,SAAU,SAAC7C,GAAD,OAAQM,EAASkB,QAAUxB,EAAE8C,OAAOlH,UAGlD,kBAAC,IAAK6G,KAAN,CACEjH,KAAM,CAAC,OAAQ,UACfY,MAAO,yBAAK5B,MAAOsG,EAAO1E,OAAnB,oBACPsG,MAAO,CACL,CACEnE,UAAU,EACViE,QACE,sDACFzG,KAAM,SACNkH,IAAK,EACLC,IAAK,MAIT,kBAACxF,GAAD,CACEmF,SAAU,SAAC7C,GACLA,IACFO,EAAUiB,QAAU2B,WAAWnD,EAAEoD,iBAKzC,kBAAC,IAAD,CAAKhI,MAAM,SAASC,QAAQ,UAC1B,kBAAC,IAAD,CAAKQ,KAAK,SACV,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQE,KAAK,UAAUxB,QAAS,kBAAM8E,EAAQ,KAA9C,SAIF,kBAAC,IAAD,CAAKxD,KAAK,WAKN,IAATuD,GACC,oCACE,kBAAC,IAAKqD,KAAN,CACEjH,KAAM,CAAC,OAAQ,WACfY,MAAO,yBAAK5B,MAAOsG,EAAO1E,OAAnB,WACPsG,MAAO,CACL,CACEnE,UAAU,EACViE,QAAS,+BAIb,kBAAChF,GAAD,CACEmF,OAAQ,kBAACU,EAAA,EAAD,CAAgB7I,MAAOsG,EAAOC,OACtC8B,SAAU,SAAC7C,GAAD,OAAQQ,EAAWgB,QAAUxB,EAAE8C,OAAOlH,UAGpD,kBAAC,IAAK6G,KAAN,CACEjH,KAAM,CAAC,OAAQ,QACfY,MAAO,yBAAK5B,MAAOsG,EAAO1E,OAAnB,QACPsG,MAAO,CACL,CACEnE,UAAU,EACViE,QAAS,4BAIb,kBAAChF,GAAD,CACEmF,OAAQ,kBAACU,EAAA,EAAD,CAAgB7I,MAAOsG,EAAOC,OACtC8B,SAAU,SAAC7C,GAAD,OAAQS,EAAQe,QAAUxB,EAAE8C,OAAOlH,UAGjD,kBAAC,IAAK6G,KAAN,CACEjH,KAAM,CAAC,OAAQ,WACfY,MAAO,yBAAK5B,MAAOsG,EAAO1E,OAAnB,WACPsG,MAAO,CACL,CACEnE,UAAU,EACViE,QAAS,+BAIb,kBAAChF,GAAD,CACEmF,OAAQ,kBAACU,EAAA,EAAD,CAAgB7I,MAAOsG,EAAOC,OACtC8B,SAAU,SAAC7C,GAAD,OAAQU,EAAWc,QAAUxB,EAAE8C,OAAOlH,UAGpD,kBAAC,IAAK6G,KAAN,CACEjH,KAAM,CAAC,OAAQ,YACfY,MAAO,yBAAK5B,MAAOsG,EAAO1E,OAAnB,YACPsG,MAAO,CACL,CACEnE,UAAU,EACViE,QAAS,gCAIb,kBAAChF,GAAD,CACEmF,OAAQ,kBAACU,EAAA,EAAD,CAAgB7I,MAAOsG,EAAOC,OACtC8B,SAAU,SAAC7C,GAAD,OAAQW,EAAYa,QAAUxB,EAAE8C,OAAOlH,UAGrD,kBAAC,IAAK6G,KAAN,CACEjH,KAAM,CAAC,OAAQ,0BACfY,MAAO,yBAAK5B,MAAOsG,EAAO1E,OAAnB,0BACPsG,MAAO,CACL,CACEnE,UAAU,KAId,kBAACf,GAAD,CACEqF,SAAU,SAAC7C,GAAD,OAAQY,EAAcY,QAAUxB,EAAE8C,OAAOlH,OACnD+G,OAAQ,kBAACW,EAAA,EAAD,CAAoB9I,MAAOsG,EAAOC,UAG9C,kBAAC,IAAK0B,KAAN,CAAWpE,WAAU,2BAAOH,GAAOG,YAAd,IAA0BkF,OAAQ,KACrD,kBAAC,IAAD,CAAKnI,MAAM,SAASC,QAAQ,UAC1B,kBAAC,IAAD,CAAKb,MAAO,CAAEgJ,QAAS,KACrB,kBAAC,IAAD,CAAQzH,KAAK,UAAUxB,QAAS,kBAAM8E,EAAQ,KAA9C,SAIF,kBAAC,IAAD,CAAK7E,MAAO,CAAEgJ,QAAS,KACrB,kBAAC,IAAD,CACEzH,KAAK,UACL0H,SAAS,SACTnJ,SAAUgF,GAETA,EAAa,kBAAC,GAAD,MAAW,eAQvC,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAKzD,KAAK,W,uOClUhB,IAAM6H,GAAWC,IAAoB,GAE/BC,GAAU7J,IAAOiB,IAAV,MA8CP6I,GAAkB,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,iBAAkBC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,OAC9CC,EAAmBC,cACnBC,EAAiBC,cAF0C,EAGjCjF,oBAAS,GAHwB,mBAG1D7E,EAH0D,KAGhD+J,EAHgD,OAI/BlF,oBAAS,GAJsB,mBAI1DmF,EAJ0D,KAI/CC,EAJ+C,KAKzDC,EAAc7E,cAAd6E,UAERC,qBAAU,WACJN,GACFE,IACEF,EAAepE,QAAO,SAACC,GAAD,OAAOA,EAAE0E,OAAShB,GAASiB,YAAYzE,cAC1DW,OAAS,MAKf,CAACsD,IAEJ,IAAMrD,EAAS,CACbnG,OAAQ,CACNC,QAAS,OACTgK,SAAU,QAEZC,MAAO,CACLhJ,KAAM,EACNI,aAAc,GACd6C,YAAa,IAEfrE,IAAK,CACHqK,MAAO,OACPC,cAAe,IAEjBrI,KAAM,CAAEsI,WAAY,QAAShE,MAAO,SACpCiE,KAAM,CAAED,WAAY,eACpBE,MAAO,CAAEF,WAAY,gBAOvB,OAAKtB,IAAaA,GAASyB,cAKzB,oCACGlB,EAAiBa,MAAQ,MACxB,yBAAKtK,MAAOsG,EAAOnG,QACjB,oCACE,yBAAKH,MAAOsG,EAAO+D,OACjB,kBAAC,EAAD,CACExK,IAAKqJ,GACLpJ,SAAUA,EACVC,QAjBE,WACdgK,GAAa,OAmBL,yBAAK/J,MAAOsG,EAAO+D,OACjB,kBAACO,EAAA,EAAD,CACE/K,IAAKqJ,GACL2B,kBAAmBvB,EACnBwB,aAAa,EACbvB,QAASA,EACTC,OAAQA,KAGZ,kBAAC,IAAD,CACEuB,UAAU,EACVC,QAASlB,GAAaE,EACtBiB,KAAM,kBAAMlB,GAAa,IACzBmB,SAAU,kBAAMnB,GAAa,IAC7BO,MAAM,QACNa,UAAU,EACVC,UAAU,EACVC,cAAc,EACdC,UAAWhF,EAAOpE,KAClBqJ,UAAWjF,EAAOmE,KAClBzK,MAAOsG,EAAOoE,MACdc,OAAQ,MAER,kBAAC,GAAD,CACE/G,QAASyE,GAASiB,YAClBzF,YAAawE,GAASyB,mBAM/BlB,EAAiBa,MAAQ,MACxB,oCACE,kBAAC,IAAD,CAAK1J,MAAM,SAASC,QAAQ,UAC1B,kBAAC,IAAD,CAAKQ,KAAK,SACV,kBAAC,IAAD,KACE,yBACEP,IAAKoI,GAASjJ,IAAI2I,WAClB7H,IAAKmI,GAASlI,KACdhB,MAAOsG,EAAOrG,OAGlB,kBAAC,IAAD,CAAKoB,KAAK,UAEZ,kBAAC,IAAD,CAAKT,MAAM,SAASC,QAAQ,UAC1B,kBAAC,IAAD,CAAKQ,KAAK,SACV,kBAAC,IAAD,KACE,kBAACuJ,EAAA,EAAD,CACE/K,IAAKqJ,GACL2B,kBAAmBvB,EACnBwB,aAAa,EACbvB,QAASA,EACTC,OAAQA,KAGZ,kBAAC,IAAD,CAAKnI,KAAK,YAtEX,MA8EIoK,UA5JK,WAAO,IAAD,EACiBC,cAAjCC,EADgB,EAChBA,WAAYC,EADI,EACJA,iBAEpB3B,qBAAU,WACR2B,EAAiB1C,GAAS2C,cAAcnG,cACvC,CAACkG,IAEJ3B,qBAAU,WACR6B,SAAS3K,MAAQwK,EAAU,UAAMA,EAAN,mBAA+B,YACzD,CAACA,IAEJ,IAAMI,EAAiBnG,mBAIjBoG,EAAiB,CACrB1C,iBAAkB,SAAC2C,GAAD,OAAeF,EAAe/E,QAAUiF,GAC1D1C,QAAS2C,uBACP,SAACC,GAAD,OAAWJ,EAAe/E,SAAW+E,EAAe/E,QAAQ,CAAEmF,YAC9D,IAEF3C,OAAQ0C,uBACN,SAAC1K,GAAD,OAAUuK,EAAe/E,SAAW+E,EAAe/E,QAAQ,CAAExF,WAC7D,KAIJ,OACE,oCACE,kBAAC4H,GAAD,KACE,kBAAC,GAAoB4C","file":"static/js/6.0e939c72.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Card, Typography, Row, Col, Statistic } from 'antd';\nimport styled from 'styled-components';\nimport Emoji from './Emoji';\n\nconst { Paragraph } = Typography;\nconst { Countdown } = Statistic;\n\nconst deadline = Date.parse('2020-11-06T21:00:00.000+08:00');\n\nconst RedeemButton = styled(Button)`\n  width: auto;\n  height: auto;\n  margin: 20px 0px 0px 0px;\n  background: #f23b69;\n  border-color: #f23b69;\n  &:hover {\n    background: #000;\n    border-color: #000;\n    color: #f23b69;\n  }\n`;\n\nconst WrappedCard = styled(Card)`\n  background: linear-gradient(\n    162.92deg,\n    rgb(43, 43, 43) 12.36%,\n    rgb(0, 0, 0) 94.75%\n  );\n  bordercolor: transparent;\n  border-radius: 25px;\n  cursor: pointer;\n  overflow: hidden;\n  width: 50vw;\n  height: 100%;\n`;\n\nconst WrapperParagraph = styled(Paragraph)`\n  padding-top: 20px;\n  font-size: 16px;\n  text-align: center;\n`;\n\nconst RedeemCard = ({ nft, disabled, onClick }) => {\n  const style = {\n    img: {\n      maxWidth: '100%',\n    } as React.CSSProperties,\n    parent: { display: 'flex', minHeight: '100vh' } as React.CSSProperties,\n    children: { margin: 'auto' } as React.CSSProperties,\n    div: {\n      height: '100%',\n    },\n    countdown: {\n      paddingTop: '10px',\n    },\n  };\n  return (\n    <div style={style.div}>\n      <WrappedCard>\n        <Row align=\"middle\" justify=\"center\">\n          <div style={style.parent}>\n            <div style={style.children}>\n              <img src={nft.img} alt={nft.name} style={style.img} />\n              <WrapperParagraph>{redeemText}</WrapperParagraph>\n              <WrapperParagraph>\n                {auctionText}\n                <Countdown\n                  title=\"Countdown\"\n                  value={deadline}\n                  style={style.countdown}\n                />\n              </WrapperParagraph>\n              <Row align=\"middle\" justify=\"center\">\n                <Col flex=\"auto\" />\n                <Col>\n                  <RedeemButton\n                    disabled={disabled}\n                    onClick={onClick}\n                    block\n                    type=\"primary\"\n                    size=\"large\"\n                  >\n                    <span style={{ paddingRight: 10 }}>{'Redeem'}</span>{' '}\n                    <Emoji symbol=\"🔥\" label=\"burn\" class=\"emoji-redeem\" />\n                  </RedeemButton>\n                </Col>\n                <Col flex=\"auto\" />\n              </Row>\n            </div>\n          </div>\n          <Col flex=\"auto\" />\n        </Row>\n      </WrappedCard>\n    </div>\n  );\n};\n\nexport default RedeemCard;\n\nconst redeemText = `\nThis NFT can be redeemed for a physical Bitcoin Tram model mailed to your door\n`;\n\nconst auctionText = `\nThe auction will end on 06/11/2020 at 9pm UTC+8\n`;\n","const Urls = {\n  postRedeemForm: 'https://bonfida.com/api/redeem',\n};\n\nexport default Urls;\n","import Urls from './Urls';\n\nexport async function apiPost(path, body, headers) {\n  try {\n    let response = await fetch(path, {\n      method: 'POST',\n      body: JSON.stringify(body),\n      headers: headers,\n    });\n    if (!response.ok) {\n      return [];\n    }\n    let json = await response.json();\n    return json;\n  } catch (err) {\n    console.log(err);\n    return [];\n  }\n}\n\nexport const postRedeemForm = async (data) => {\n  const result = await apiPost(Urls.postRedeemForm, data, {});\n  return result;\n};\n","import React, { useState, useRef } from 'react';\nimport {\n  Form,\n  Input,\n  InputNumber,\n  Button,\n  Spin as SpinAntd,\n  Row,\n  Col,\n} from 'antd';\nimport {\n  LoadingOutlined,\n  GlobalOutlined,\n  UserOutlined,\n  PhoneOutlined,\n  FileSearchOutlined,\n  MailOutlined,\n} from '@ant-design/icons';\nimport { PublicKey } from '@solana/web3.js';\nimport { postRedeemForm } from '../utils/network';\nimport { useWallet } from '../utils/wallet';\nimport { useTokenAccounts } from '../utils/markets';\nimport { sendSplToken } from '../utils/send';\nimport { useConnection } from '../utils/connection';\nimport { notify } from '../utils/notifications';\nimport styled from 'styled-components';\n\nconst StyledInput = styled(Input)`\n  .ant-input {\n    color: black;\n  }\n`;\n\nconst StyledInputNumber = styled(InputNumber)`\n  .ant-input-number-input {\n    color: black;\n  }\n`;\n\nconst Spin = () => {\n  const antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n  return <SpinAntd indicator={antIcon} />;\n};\n\nconst layout = {\n  labelCol: {\n    span: 8,\n  },\n  wrapperCol: {\n    span: 16,\n  },\n};\nconst validateMessages = {\n  required: '${label} is required!',\n  types: {\n    email: '${label} is not a valid email!',\n    number: '${label} is not a valid number!',\n  },\n  number: {\n    range: '${label} must be between ${min} and ${max}',\n  },\n};\n\nconst RedeemForm = ({\n  nftMint,\n  destination,\n}: {\n  nftMint: PublicKey;\n  destination: PublicKey;\n}) => {\n  const [step, setStep] = useState(1);\n  const [submitting, setSubmitting] = useState(false);\n  const connection = useConnection();\n  const { wallet } = useWallet();\n  const [tokenAccounts] = useTokenAccounts();\n  const source = tokenAccounts?.filter(\n    (e) => e.effectiveMint.toBase58() === nftMint.toBase58(),\n  );\n\n  const emailRef = useRef<string | null>(null);\n  const nameRef = useRef<string | null>(null);\n  const phoneRef = useRef<string | null>(null);\n  const amountRef = useRef(0);\n  const countryRef = useRef<string | null>(null);\n  const cityRef = useRef<string | null>(null);\n  const addressRef = useRef<string | null>(null);\n  const postCodeRef = useRef<string | null>(null);\n  const additionalRef = useRef<string | null>(null);\n\n  if (!source || source?.length === 0) {\n    console.log('Error getting source');\n    return null;\n  }\n\n  const styles = {\n    icon: { color: 'black' },\n    label: { color: 'black', fontSize: 16, fontWeight: 700 },\n    placeHolder: { color: 'black' },\n  };\n\n  const onFinish = async (values) => {\n    setSubmitting(true);\n    try {\n      const amount = Math.round(amountRef.current);\n      if (!amount || amount <= 0) {\n        throw new Error('Invalid amount');\n      }\n      const txid = await sendSplToken({\n        connection: connection,\n        owner: wallet.publicKey,\n        sourceSpl: source[0]?.pubkey,\n        destination: destination,\n        amount: amount,\n        wallet: wallet,\n      });\n\n      const postBody = {\n        email: emailRef.current,\n        name: nameRef.current,\n        phone: phoneRef.current,\n        amount: amountRef.current,\n        country: countryRef.current,\n        city: cityRef.current,\n        address: addressRef.current,\n        postcode: postCodeRef.current,\n        'additional-information': additionalRef.current,\n        txId: txid,\n      };\n\n      await postRedeemForm(postBody);\n      notify({ message: 'Redeem request successful', type: 'success', txid });\n    } catch (err) {\n      console.log(`Error redeeming: ${err}`);\n      notify({\n        message: 'Error redeeming',\n        type: 'error',\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <Row>\n      <Col flex=\"auto\" />\n      <Col flex=\"auto\" style={{ color: 'black' }}>\n        <Form\n          {...layout}\n          name=\"redeem\"\n          onFinish={onFinish}\n          validateMessages={validateMessages}\n          style={{ paddingTop: 20, paddingRight: 40, color: 'black' }}\n        >\n          {step === 1 && (\n            <>\n              <Form.Item\n                name={['user', 'email']}\n                label={<div style={styles.label}>Email</div>}\n                rules={[\n                  {\n                    type: 'email',\n                    required: true,\n                  },\n                ]}\n                style={styles.icon}\n              >\n                <StyledInput\n                  prefix={<MailOutlined style={styles.icon} />}\n                  onChange={(e) => (emailRef.current = e.target.value)}\n                />\n              </Form.Item>\n              <Form.Item\n                name={['user', 'name']}\n                label={<div style={styles.label}>Name</div>}\n                rules={[\n                  {\n                    required: true,\n                    message: 'Please enter your name',\n                  },\n                ]}\n              >\n                <StyledInput\n                  prefix={<UserOutlined style={styles.icon} />}\n                  onChange={(e) => (nameRef.current = e.target.value)}\n                />\n              </Form.Item>\n              <Form.Item\n                name={['user', 'phone']}\n                label={<div style={styles.label}>Phone Number</div>}\n                rules={[\n                  {\n                    required: true,\n                    message: 'Please input your phone number',\n                  },\n                ]}\n              >\n                <StyledInput\n                  prefix={<PhoneOutlined style={styles.icon} />}\n                  onChange={(e) => (phoneRef.current = e.target.value)}\n                />\n              </Form.Item>\n              <Form.Item\n                name={['user', 'amount']}\n                label={<div style={styles.label}>Amount to redeem</div>}\n                rules={[\n                  {\n                    required: true,\n                    message:\n                      'Please enter the amount of token you want to redeem',\n                    type: 'number',\n                    min: 0,\n                    max: 99,\n                  },\n                ]}\n              >\n                <StyledInputNumber\n                  onChange={(e) => {\n                    if (e) {\n                      amountRef.current = parseFloat(e.toString());\n                    }\n                  }}\n                />\n              </Form.Item>\n              <Row align=\"middle\" justify=\"center\">\n                <Col flex=\"auto\" />\n                <Col>\n                  <Button type=\"primary\" onClick={() => setStep(2)}>\n                    Next\n                  </Button>\n                </Col>\n                <Col flex=\"auto\" />\n              </Row>\n            </>\n          )}\n\n          {step === 2 && (\n            <>\n              <Form.Item\n                name={['user', 'country']}\n                label={<div style={styles.label}>Country</div>}\n                rules={[\n                  {\n                    required: true,\n                    message: 'Please enter your country',\n                  },\n                ]}\n              >\n                <StyledInput\n                  prefix={<GlobalOutlined style={styles.icon} />}\n                  onChange={(e) => (countryRef.current = e.target.value)}\n                />\n              </Form.Item>\n              <Form.Item\n                name={['user', 'City']}\n                label={<div style={styles.label}>City</div>}\n                rules={[\n                  {\n                    required: true,\n                    message: 'Please enter your city',\n                  },\n                ]}\n              >\n                <StyledInput\n                  prefix={<GlobalOutlined style={styles.icon} />}\n                  onChange={(e) => (cityRef.current = e.target.value)}\n                />\n              </Form.Item>\n              <Form.Item\n                name={['user', 'address']}\n                label={<div style={styles.label}>Address</div>}\n                rules={[\n                  {\n                    required: true,\n                    message: 'Please enter your address',\n                  },\n                ]}\n              >\n                <StyledInput\n                  prefix={<GlobalOutlined style={styles.icon} />}\n                  onChange={(e) => (addressRef.current = e.target.value)}\n                />\n              </Form.Item>\n              <Form.Item\n                name={['user', 'postcode']}\n                label={<div style={styles.label}>Postcode</div>}\n                rules={[\n                  {\n                    required: true,\n                    message: 'Please enter your postcode',\n                  },\n                ]}\n              >\n                <StyledInput\n                  prefix={<GlobalOutlined style={styles.icon} />}\n                  onChange={(e) => (postCodeRef.current = e.target.value)}\n                />\n              </Form.Item>\n              <Form.Item\n                name={['user', 'additional-information']}\n                label={<div style={styles.label}>Additional information</div>}\n                rules={[\n                  {\n                    required: false,\n                  },\n                ]}\n              >\n                <StyledInput\n                  onChange={(e) => (additionalRef.current = e.target.value)}\n                  prefix={<FileSearchOutlined style={styles.icon} />}\n                />\n              </Form.Item>\n              <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\n                <Row align=\"middle\" justify=\"center\">\n                  <Col style={{ padding: 10 }}>\n                    <Button type=\"primary\" onClick={() => setStep(1)}>\n                      Back\n                    </Button>\n                  </Col>\n                  <Col style={{ padding: 10 }}>\n                    <Button\n                      type=\"primary\"\n                      htmlType=\"submit\"\n                      disabled={submitting}\n                    >\n                      {submitting ? <Spin /> : 'Submit'}\n                    </Button>\n                  </Col>\n                </Row>\n              </Form.Item>\n            </>\n          )}\n        </Form>\n        <Help />\n      </Col>\n      <Col flex=\"auto\" />\n    </Row>\n  );\n};\n\nconst Help = () => {\n  const styles = {\n    root: {\n      textAlign: 'center',\n      paddingLeft: 60,\n      paddingTop: 20,\n    } as React.CSSProperties,\n  };\n  return (\n    <div style={styles.root}>\n      If you are having issues redeeming please email{' '}\n      <a href=\"mailto:redeem@solible.com\">redeem@solible.com</a>\n    </div>\n  );\n};\n\nexport default RedeemForm;\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Col, Row, Modal } from 'antd';\nimport styled from 'styled-components';\nimport { useMarket } from '../utils/markets';\nimport { NftCardTrade } from '../components/NftCard';\nimport { USE_REDEEMABLE_NFTS } from '../nfts';\nimport RedeemCard from '../components/RedeemCard';\nimport { useWindowDimensions } from '../components/utils';\nimport { useWalletBalancesForAllMarkets } from '../utils/markets';\nimport RedeemForm from '../components/RedeemForm';\nimport { useWallet } from '../utils/wallet';\n\nconst BTC_TRAM = USE_REDEEMABLE_NFTS[0];\n\nconst Wrapper = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  padding: 16px 16px;\n  .borderNone .ant-select-selector {\n    border: none !important;\n  }\n`;\n\nconst BitcoinTram = () => {\n  const { marketName, setMarketAddress } = useMarket();\n\n  useEffect(() => {\n    setMarketAddress(BTC_TRAM.marketAddress.toBase58());\n  }, [setMarketAddress]);\n\n  useEffect(() => {\n    document.title = marketName ? `${marketName} — Solible` : 'Solible';\n  }, [marketName]);\n\n  const changeOrderRef = useRef<\n    ({ size, price }: { size?: number; price?: number }) => void\n  >();\n\n  const componentProps = {\n    onChangeOrderRef: (ref: any) => (changeOrderRef.current = ref),\n    onPrice: useCallback(\n      (price) => changeOrderRef.current && changeOrderRef.current({ price }),\n      [],\n    ),\n    onSize: useCallback(\n      (size) => changeOrderRef.current && changeOrderRef.current({ size }),\n      [],\n    ),\n  };\n\n  return (\n    <>\n      <Wrapper>\n        <RenderTradePage {...componentProps} />\n      </Wrapper>\n    </>\n  );\n};\n\nconst RenderTradePage = ({ onChangeOrderRef, onPrice, onSize }) => {\n  const windowDimensions = useWindowDimensions();\n  const walletBalances = useWalletBalancesForAllMarkets();\n  const [disabled, setDisabled] = useState(true);\n  const [showModal, setShowModal] = useState(false);\n  const { connected } = useWallet();\n\n  useEffect(() => {\n    if (walletBalances) {\n      setDisabled(\n        walletBalances.filter((e) => e.mint === BTC_TRAM.mintAddress.toBase58())\n          .length > 0\n          ? false\n          : true,\n      );\n    }\n  }, [walletBalances]);\n\n  const styles = {\n    parent: {\n      display: 'flex',\n      flexWrap: 'wrap',\n    } as React.CSSProperties,\n    child: {\n      flex: 1,\n      paddingRight: 20,\n      paddingLeft: 20,\n    } as React.CSSProperties,\n    img: {\n      width: '100%',\n      paddingBottom: 30,\n    } as React.CSSProperties,\n    body: { background: 'white', color: 'black' },\n    mask: { background: 'transparent' },\n    modal: { background: 'transparent' },\n  };\n\n  const onClick = () => {\n    setShowModal(true);\n  };\n\n  if (!BTC_TRAM || !BTC_TRAM.redeemAddress) {\n    return null;\n  }\n\n  return (\n    <>\n      {windowDimensions.width > 1210 && (\n        <div style={styles.parent}>\n          <>\n            <div style={styles.child}>\n              <RedeemCard\n                nft={BTC_TRAM}\n                disabled={disabled}\n                onClick={onClick}\n              />\n            </div>\n            <div style={styles.child}>\n              <NftCardTrade\n                nft={BTC_TRAM}\n                setChangeOrderRef={onChangeOrderRef}\n                smallScreen={false}\n                onPrice={onPrice}\n                onSize={onSize}\n              />\n            </div>\n            <Modal\n              closable={false}\n              visible={showModal && connected}\n              onOk={() => setShowModal(false)}\n              onCancel={() => setShowModal(false)}\n              width=\"800px\"\n              centered={true}\n              keyboard={true}\n              maskClosable={true}\n              bodyStyle={styles.body}\n              maskStyle={styles.mask}\n              style={styles.modal}\n              footer={null}\n            >\n              <RedeemForm\n                nftMint={BTC_TRAM.mintAddress}\n                destination={BTC_TRAM.redeemAddress}\n              />\n            </Modal>\n          </>\n        </div>\n      )}\n      {windowDimensions.width < 1210 && (\n        <>\n          <Row align=\"middle\" justify=\"center\">\n            <Col flex=\"auto\" />\n            <Col>\n              <img\n                src={BTC_TRAM.img.toString()}\n                alt={BTC_TRAM.name}\n                style={styles.img}\n              />\n            </Col>\n            <Col flex=\"auto\" />\n          </Row>\n          <Row align=\"middle\" justify=\"center\">\n            <Col flex=\"auto\" />\n            <Col>\n              <NftCardTrade\n                nft={BTC_TRAM}\n                setChangeOrderRef={onChangeOrderRef}\n                smallScreen={false}\n                onPrice={onPrice}\n                onSize={onSize}\n              />\n            </Col>\n            <Col flex=\"auto\" />\n          </Row>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default BitcoinTram;\n"],"sourceRoot":""}