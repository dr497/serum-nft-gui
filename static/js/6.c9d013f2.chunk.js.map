{"version":3,"sources":["assets/not-found.gif","pages/SearchPage.tsx"],"names":["module","exports","Title","Typography","RowCard","start","end","NFT_ARRAY","align","justify","flex","slice","map","nft","key","SearchRow","divider","longueur","quotien","Math","floor","reste","MAP_ARRAY","Array","from","length","v","i","e","SearchPage","match","windowDimensions","useWindowDimensions","useState","searchResults","setSearchResults","keywords","setKeywords","notFound","setNotFound","useEffect","temp","forEach","keyword","USE_ALL_NFTS","word","includes","marketAddress","toBase58","toLowerCase","mintAddress","searchWord","push","React","params","searchParameters","split","console","log","style","paddingTop","level","color","src","notFoundGif","width","alt","NFT","paddingRight","paddingLeft"],"mappings":"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","file":"static/js/6.c9d013f2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/not-found.0e117165.gif\";","import React, { useState, useEffect } from 'react';\nimport { Row, Col, Typography } from 'antd';\nimport { NFT, USE_ALL_NFTS } from '../nfts';\nimport { WrappedCol } from './HomePage';\nimport { useWindowDimensions } from '../components/utils';\nimport NftCard from '../components/NftCard';\nimport notFoundGif from '../assets/not-found.gif';\nimport { RouteComponentProps } from 'react-router-dom';\nconst { Title } = Typography;\n\nconst RowCard = ({ start, end, NFT_ARRAY }) => {\n  return (\n    <Row align=\"middle\" justify=\"center\">\n      <Col flex=\"auto\" />\n      {NFT_ARRAY?.slice(start, end).map((nft: NFT, key: number) => {\n        return (\n          <WrappedCol>\n            <NftCard key={key} nft={nft} />\n          </WrappedCol>\n        );\n      })}\n      <Col flex=\"auto\" />\n    </Row>\n  );\n};\n\nconst SearchRow = ({ divider, longueur, NFT_ARRAY }) => {\n  const quotien = Math.floor(longueur / divider);\n  const reste = longueur % divider;\n  const MAP_ARRAY = Array.from({ length: quotien }, (v, i) => i);\n  return (\n    <>\n      {quotien === 0 && <RowCard start={0} end={reste} NFT_ARRAY={NFT_ARRAY} />}\n      {MAP_ARRAY.map((e) => {\n        return (\n          <RowCard\n            start={divider * e}\n            end={divider * e + divider}\n            NFT_ARRAY={NFT_ARRAY}\n          />\n        );\n      })}\n      <RowCard start={longueur - reste} end={longueur} NFT_ARRAY={NFT_ARRAY} />\n    </>\n  );\n};\n\nconst searchWord = (nft: NFT, word: string): boolean => {\n  for (let i = 0; i < nft.keywords.length; i++) {\n    if (\n      nft.keywords[i].includes(word) ||\n      nft.marketAddress.toBase58().toLowerCase().includes(word.toLowerCase()) ||\n      nft.mintAddress.toBase58().toLowerCase().includes(word.toLowerCase())\n    ) {\n      return true;\n    }\n  }\n  return false;\n};\n\ntype TParams = { searchParameters: string };\n\nconst SearchPage = ({ match }: RouteComponentProps<TParams>) => {\n  const windowDimensions = useWindowDimensions();\n  const [searchResults, setSearchResults] = useState<NFT[] | null>(null);\n  const [keywords, setKeywords] = useState<string[] | null>(null);\n\n  const [notFound, setNotFound] = useState(false);\n\n  // Update results\n  useEffect(() => {\n    let temp: NFT[] = [];\n    keywords?.forEach((keyword) => {\n      USE_ALL_NFTS.forEach((nft) => {\n        if (searchWord(nft, keyword.toLowerCase())) {\n          temp.push(nft);\n        }\n      });\n    });\n    setSearchResults(temp);\n  }, [keywords]);\n\n  React.useEffect(() => {\n    setKeywords(\n      match?.params.searchParameters.split('&').map((e) => e.toLowerCase()),\n    );\n  }, [match]);\n\n  // Not Found\n  useEffect(() => {\n    if (keywords && searchResults) {\n      setNotFound(keywords.length > 0 && searchResults.length === 0);\n    }\n  }, [keywords, keywords?.length, searchResults, searchResults?.length]);\n\n  const longueur = searchResults ? searchResults.length : 0;\n  console.log('Search results', searchResults);\n  return (\n    <>\n      {notFound && (\n        <Row style={{ paddingTop: '50px' }}>\n          <Col flex=\"auto\" />\n          <Col>\n            <Title level={2} style={{ color: 'white' }}>\n              Nothing found\n            </Title>\n            <img src={notFoundGif} width=\"100%\" alt=\"not found\" />\n          </Col>\n          <Col flex=\"auto\" />\n        </Row>\n      )}\n      {windowDimensions.width > 1600 && (\n        <SearchRow divider={3} longueur={longueur} NFT_ARRAY={searchResults} />\n      )}\n      {1100 < windowDimensions.width && windowDimensions.width < 1600 && (\n        <SearchRow divider={2} longueur={longueur} NFT_ARRAY={searchResults} />\n      )}\n      {windowDimensions.width < 1100 && (\n        <>\n          {searchResults?.map((NFT, key) => {\n            return (\n              <WrappedCol style={{ paddingRight: '10%', paddingLeft: '10%' }}>\n                <NftCard key={key} nft={NFT} />\n              </WrappedCol>\n            );\n          })}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default SearchPage;\n"],"sourceRoot":""}