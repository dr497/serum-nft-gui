{"version":3,"sources":["components/Spin.tsx","utils/Urls.tsx","utils/network.tsx","components/RedeemForm.tsx","components/Carousel.tsx","components/RedeemCard.tsx","pages/TradePage.tsx"],"names":["antIcon","style","fontSize","spin","Spin","indicator","Urls","postRedeemForm","apiPost","path","body","headers","a","fetch","method","JSON","stringify","response","ok","json","console","log","data","result","StyledInput","styled","Input","StyledInputNumber","InputNumber","LoadingOutlined","layout","labelCol","span","wrapperCol","validateMessages","required","types","email","number","range","Help","textAlign","paddingLeft","paddingTop","href","RedeemForm","nftMint","destination","useState","step","setStep","submitting","setSubmitting","connection","useConnection","wallet","useWallet","useTokenAccounts","tokenAccounts","source","filter","e","effectiveMint","toBase58","emailRef","useRef","nameRef","phoneRef","amountRef","countryRef","cityRef","addressRef","postCodeRef","additionalRef","length","styles","icon","color","label","fontWeight","placeHolder","onFinish","values","amount","Math","round","current","Error","sendSplToken","owner","publicKey","sourceSpl","pubkey","txid","postBody","name","phone","country","city","address","postcode","txId","notify","message","type","flex","paddingRight","Item","rules","prefix","MailOutlined","onChange","target","value","UserOutlined","PhoneOutlined","min","max","parseFloat","toString","align","justify","onClick","GlobalOutlined","FileSearchOutlined","offset","padding","htmlType","disabled","CenteredDiv","div","Carousel","images","nbImages","currentImage","setCurrentImage","loaded","setLoaded","img","width","maxWidth","src","alt","onLoad","LeftCircleOutlined","prev","RightCircleOutlined","Paragraph","Typography","Countdown","Statistic","RedeemButton","Button","MoreImagesButton","WrappedCard","Card","WrapperParagraph","auctionText","RedeemCard","nft","parent","display","minHeight","children","margin","height","countdown","background","mask","modal","hasMoreImages","mintAddress","moreImages","hasMore","showModal","setShowModal","redeemDescription","auctionDeadLine","title","Date","parse","block","size","Emoji","symbol","class","closable","visible","onOk","onCancel","centered","keyboard","maskClosable","bodyStyle","maskStyle","footer","Wrapper","TradePage","marketAddress","useParams","useMarket","marketName","setMarketAddress","publicKeyString","PublicKey","err","isValidPublicKey","useEffect","document","changeOrderRef","componentProps","onChangeOrderRef","ref","onPrice","useCallback","price","onSize","RenderTradePage","market","windowDimensions","useWindowDimensions","walletBalances","useWalletBalancesForAllMarkets","setDisabled","connected","flexWrap","child","paddingBottom","setNft","_nft","USE_ALL_NFTS","mint","redeembable","setChangeOrderRef","smallScreen","redeemAddress","NFT"],"mappings":"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","file":"static/js/5.4ff398b9.chunk.js","sourcesContent":["import React from 'react';\nimport { Spin as SpinAntd } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nconst antIcon = <LoadingOutlined style={{ fontSize: 60 }} spin />;\n\nconst Spin = () => {\n  return <SpinAntd indicator={antIcon} />;\n};\n\nexport default Spin;\n","const Urls = {\n  postRedeemForm: 'https://bonfida.com/api/redeem',\n};\n\nexport default Urls;\n","import Urls from './Urls';\n\nexport async function apiPost(path, body, headers) {\n  try {\n    let response = await fetch(path, {\n      method: 'POST',\n      body: JSON.stringify(body),\n      headers: headers,\n    });\n    if (!response.ok) {\n      return [];\n    }\n    let json = await response.json();\n    return json;\n  } catch (err) {\n    console.log(err);\n    return [];\n  }\n}\n\nexport const postRedeemForm = async (data) => {\n  const result = await apiPost(Urls.postRedeemForm, data, {});\n  return result;\n};\n","import React, { useState, useRef } from 'react';\nimport {\n  Form,\n  Input,\n  InputNumber,\n  Button,\n  Spin as SpinAntd,\n  Row,\n  Col,\n} from 'antd';\nimport {\n  LoadingOutlined,\n  GlobalOutlined,\n  UserOutlined,\n  PhoneOutlined,\n  FileSearchOutlined,\n  MailOutlined,\n} from '@ant-design/icons';\nimport { PublicKey } from '@solana/web3.js';\nimport { postRedeemForm } from '../utils/network';\nimport { useWallet } from '../utils/wallet';\nimport { useTokenAccounts } from '../utils/markets';\nimport { sendSplToken } from '../utils/send';\nimport { useConnection } from '../utils/connection';\nimport { notify } from '../utils/notifications';\nimport styled from 'styled-components';\n\nconst StyledInput = styled(Input)`\n  .ant-input {\n    color: black;\n  }\n`;\n\nconst StyledInputNumber = styled(InputNumber)`\n  .ant-input-number-input {\n    color: black;\n  }\n`;\n\nconst Spin = () => {\n  const antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n  return <SpinAntd indicator={antIcon} />;\n};\n\nconst layout = {\n  labelCol: {\n    span: 8,\n  },\n  wrapperCol: {\n    span: 16,\n  },\n};\nconst validateMessages = {\n  required: '${label} is required!',\n  types: {\n    email: '${label} is not a valid email!',\n    number: '${label} is not a valid number!',\n  },\n  number: {\n    range: '${label} must be between ${min} and ${max}',\n  },\n};\n\nconst RedeemForm = ({\n  nftMint,\n  destination,\n}: {\n  nftMint: PublicKey;\n  destination: PublicKey;\n}) => {\n  const [step, setStep] = useState(1);\n  const [submitting, setSubmitting] = useState(false);\n  const connection = useConnection();\n  const { wallet } = useWallet();\n  const [tokenAccounts] = useTokenAccounts();\n  const source = tokenAccounts?.filter(\n    (e) => e.effectiveMint.toBase58() === nftMint.toBase58(),\n  );\n\n  const emailRef = useRef<string | null>(null);\n  const nameRef = useRef<string | null>(null);\n  const phoneRef = useRef<string | null>(null);\n  const amountRef = useRef(0);\n  const countryRef = useRef<string | null>(null);\n  const cityRef = useRef<string | null>(null);\n  const addressRef = useRef<string | null>(null);\n  const postCodeRef = useRef<string | null>(null);\n  const additionalRef = useRef<string | null>(null);\n\n  if (!source || source?.length === 0) {\n    console.log('Error getting source');\n    return null;\n  }\n\n  const styles = {\n    icon: { color: 'black' },\n    label: { color: 'black', fontSize: 16, fontWeight: 700 },\n    placeHolder: { color: 'black' },\n  };\n\n  const onFinish = async (values) => {\n    setSubmitting(true);\n    try {\n      const amount = Math.round(amountRef.current);\n      if (!amount || amount <= 0) {\n        throw new Error('Invalid amount');\n      }\n      const txid = await sendSplToken({\n        connection: connection,\n        owner: wallet.publicKey,\n        sourceSpl: source[0]?.pubkey,\n        destination: destination,\n        amount: amount,\n        wallet: wallet,\n      });\n\n      const postBody = {\n        email: emailRef.current,\n        name: nameRef.current,\n        phone: phoneRef.current,\n        amount: amountRef.current,\n        country: countryRef.current,\n        city: cityRef.current,\n        address: addressRef.current,\n        postcode: postCodeRef.current,\n        'additional-information': additionalRef.current,\n        txId: txid,\n      };\n\n      await postRedeemForm(postBody);\n      notify({ message: 'Redeem request successful', type: 'success', txid });\n    } catch (err) {\n      console.log(`Error redeeming: ${err}`);\n      notify({\n        message: 'Error redeeming',\n        type: 'error',\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <Row>\n      <Col flex=\"auto\" />\n      <Col flex=\"auto\" style={{ color: 'black' }}>\n        <Form\n          {...layout}\n          name=\"redeem\"\n          onFinish={onFinish}\n          validateMessages={validateMessages}\n          style={{ paddingTop: 20, paddingRight: 40, color: 'black' }}\n        >\n          {step === 1 && (\n            <>\n              <Form.Item\n                name={['user', 'email']}\n                label={<div style={styles.label}>Email</div>}\n                rules={[\n                  {\n                    type: 'email',\n                    required: true,\n                  },\n                ]}\n                style={styles.icon}\n              >\n                <StyledInput\n                  prefix={<MailOutlined style={styles.icon} />}\n                  onChange={(e) => (emailRef.current = e.target.value)}\n                />\n              </Form.Item>\n              <Form.Item\n                name={['user', 'name']}\n                label={<div style={styles.label}>Name</div>}\n                rules={[\n                  {\n                    required: true,\n                    message: 'Please enter your name',\n                  },\n                ]}\n              >\n                <StyledInput\n                  prefix={<UserOutlined style={styles.icon} />}\n                  onChange={(e) => (nameRef.current = e.target.value)}\n                />\n              </Form.Item>\n              <Form.Item\n                name={['user', 'phone']}\n                label={<div style={styles.label}>Phone Number</div>}\n                rules={[\n                  {\n                    required: true,\n                    message: 'Please input your phone number',\n                  },\n                ]}\n              >\n                <StyledInput\n                  prefix={<PhoneOutlined style={styles.icon} />}\n                  onChange={(e) => (phoneRef.current = e.target.value)}\n                />\n              </Form.Item>\n              <Form.Item\n                name={['user', 'amount']}\n                label={<div style={styles.label}>Amount to redeem</div>}\n                rules={[\n                  {\n                    required: true,\n                    message:\n                      'Please enter the amount of token you want to redeem',\n                    type: 'number',\n                    min: 0,\n                    max: 99,\n                  },\n                ]}\n              >\n                <StyledInputNumber\n                  onChange={(e) => {\n                    if (e) {\n                      amountRef.current = parseFloat(e.toString());\n                    }\n                  }}\n                />\n              </Form.Item>\n              <Row align=\"middle\" justify=\"center\">\n                <Col flex=\"auto\" />\n                <Col>\n                  <Button type=\"primary\" onClick={() => setStep(2)}>\n                    Next\n                  </Button>\n                </Col>\n                <Col flex=\"auto\" />\n              </Row>\n            </>\n          )}\n\n          {step === 2 && (\n            <>\n              <Form.Item\n                name={['user', 'country']}\n                label={<div style={styles.label}>Country</div>}\n                rules={[\n                  {\n                    required: true,\n                    message: 'Please enter your country',\n                  },\n                ]}\n              >\n                <StyledInput\n                  prefix={<GlobalOutlined style={styles.icon} />}\n                  onChange={(e) => (countryRef.current = e.target.value)}\n                />\n              </Form.Item>\n              <Form.Item\n                name={['user', 'City']}\n                label={<div style={styles.label}>City</div>}\n                rules={[\n                  {\n                    required: true,\n                    message: 'Please enter your city',\n                  },\n                ]}\n              >\n                <StyledInput\n                  prefix={<GlobalOutlined style={styles.icon} />}\n                  onChange={(e) => (cityRef.current = e.target.value)}\n                />\n              </Form.Item>\n              <Form.Item\n                name={['user', 'address']}\n                label={<div style={styles.label}>Address</div>}\n                rules={[\n                  {\n                    required: true,\n                    message: 'Please enter your address',\n                  },\n                ]}\n              >\n                <StyledInput\n                  prefix={<GlobalOutlined style={styles.icon} />}\n                  onChange={(e) => (addressRef.current = e.target.value)}\n                />\n              </Form.Item>\n              <Form.Item\n                name={['user', 'postcode']}\n                label={<div style={styles.label}>Postcode</div>}\n                rules={[\n                  {\n                    required: true,\n                    message: 'Please enter your postcode',\n                  },\n                ]}\n              >\n                <StyledInput\n                  prefix={<GlobalOutlined style={styles.icon} />}\n                  onChange={(e) => (postCodeRef.current = e.target.value)}\n                />\n              </Form.Item>\n              <Form.Item\n                name={['user', 'additional-information']}\n                label={<div style={styles.label}>Additional information</div>}\n                rules={[\n                  {\n                    required: false,\n                  },\n                ]}\n              >\n                <StyledInput\n                  onChange={(e) => (additionalRef.current = e.target.value)}\n                  prefix={<FileSearchOutlined style={styles.icon} />}\n                />\n              </Form.Item>\n              <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\n                <Row align=\"middle\" justify=\"center\">\n                  <Col style={{ padding: 10 }}>\n                    <Button type=\"primary\" onClick={() => setStep(1)}>\n                      Back\n                    </Button>\n                  </Col>\n                  <Col style={{ padding: 10 }}>\n                    <Button\n                      type=\"primary\"\n                      htmlType=\"submit\"\n                      disabled={submitting}\n                    >\n                      {submitting ? <Spin /> : 'Submit'}\n                    </Button>\n                  </Col>\n                </Row>\n              </Form.Item>\n            </>\n          )}\n        </Form>\n        <Help />\n      </Col>\n      <Col flex=\"auto\" />\n    </Row>\n  );\n};\n\nconst Help = () => {\n  const styles = {\n    root: {\n      textAlign: 'center',\n      paddingLeft: 60,\n      paddingTop: 20,\n    } as React.CSSProperties,\n  };\n  return (\n    <div style={styles.root}>\n      If you are having issues redeeming please email{' '}\n      <a href=\"mailto:redeem@solible.com\">redeem@solible.com</a>\n    </div>\n  );\n};\n\nexport default RedeemForm;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { LeftCircleOutlined, RightCircleOutlined } from '@ant-design/icons';\nimport Spin from './Spin';\n\nconst CenteredDiv = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst Carousel = ({ images }: { images: Array<any> }) => {\n  const nbImages = images.length;\n  const [currentImage, setCurrentImage] = useState(0);\n  const [loaded, setLoaded] = useState(false);\n\n  const style = {\n    icon: { fontSize: '20px', color: 'red', padding: 20 },\n    img: {\n      width: '80vw',\n      maxWidth: '800px',\n    },\n  };\n\n  return (\n    <>\n      <CenteredDiv>\n        <img\n          // @ts-ignore\n          src={images[currentImage]}\n          style={style.img}\n          alt=\"\"\n          onLoad={() => setLoaded(true)}\n        />\n      </CenteredDiv>\n      {!loaded && (\n        <CenteredDiv>\n          <Spin />\n        </CenteredDiv>\n      )}\n      <CenteredDiv style={{ paddingTop: 20 }}>\n        {!(currentImage <= 0) && (\n          <LeftCircleOutlined\n            style={style.icon}\n            onClick={() => {\n              setCurrentImage((prev) => prev - 1);\n              setLoaded(false);\n            }}\n          />\n        )}\n        {!(currentImage >= nbImages - 1) && (\n          <RightCircleOutlined\n            style={style.icon}\n            onClick={() => {\n              setCurrentImage((prev) => prev + 1);\n              setLoaded(false);\n            }}\n          />\n        )}\n      </CenteredDiv>\n    </>\n  );\n};\n\nexport default Carousel;\n","import React, { useState } from 'react';\nimport { Button, Card, Typography, Row, Col, Statistic, Modal } from 'antd';\nimport styled from 'styled-components';\nimport Emoji from './Emoji';\nimport { hasMoreImages } from '../nfts/utils';\nimport Carousel from './Carousel';\n\nconst { Paragraph } = Typography;\nconst { Countdown } = Statistic;\n\nconst RedeemButton = styled(Button)`\n  width: auto;\n  height: auto;\n  margin: 20px 0px 0px 0px;\n  background: #f23b69;\n  border-color: #f23b69;\n  &:hover {\n    background: #000;\n    border-color: #000;\n    color: #f23b69;\n  }\n`;\n\nconst MoreImagesButton = styled(Button)`\n  width: auto;\n  height: auto;\n  margin: 20px 0px 0px 0px;\n  background: transparent;\n  border-color: #f23b69;\n  border-radius: 50px;\n`;\n\nconst CenteredDiv = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst WrappedCard = styled(Card)`\n  background: linear-gradient(\n    162.92deg,\n    rgb(43, 43, 43) 12.36%,\n    rgb(0, 0, 0) 94.75%\n  );\n  bordercolor: transparent;\n  border-radius: 25px;\n  cursor: pointer;\n  overflow: hidden;\n  width: 50vw;\n  height: 100%;\n`;\n\nconst WrapperParagraph = styled(Paragraph)`\n  padding-top: 20px;\n  font-size: 16px;\n  text-align: center;\n`;\n\nconst RedeemCard = ({ nft, disabled, onClick }) => {\n  const style = {\n    img: {\n      maxWidth: '100%',\n    } as React.CSSProperties,\n    parent: { display: 'flex', minHeight: '100vh' } as React.CSSProperties,\n    children: { margin: 'auto' } as React.CSSProperties,\n    div: {\n      height: '100%',\n    },\n    countdown: {\n      paddingTop: '10px',\n    },\n    body: { background: 'rgb(255,255,255,0.1)', color: 'black' },\n    mask: { background: 'transparent' },\n    modal: { background: 'transparent' },\n  };\n\n  const [moreImages, hasMore] = hasMoreImages(nft.mintAddress.toBase58());\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <div style={style.div}>\n        <WrappedCard>\n          <Row align=\"middle\" justify=\"center\">\n            <div style={style.parent}>\n              <div style={style.children}>\n                <img src={nft.img} alt={nft.name} style={style.img} />\n                {hasMore && (\n                  <CenteredDiv>\n                    <MoreImagesButton onClick={() => setShowModal(true)}>\n                      More images\n                    </MoreImagesButton>\n                  </CenteredDiv>\n                )}\n                <WrapperParagraph>{nft.redeemDescription}</WrapperParagraph>\n                {!!nft.auctionDeadLine && (\n                  <WrapperParagraph>\n                    {auctionText}\n                    <Countdown\n                      title=\"Countdown\"\n                      value={Date.parse(nft.auctionDeadLine)}\n                      style={style.countdown}\n                    />\n                  </WrapperParagraph>\n                )}\n                <CenteredDiv>\n                  <RedeemButton\n                    disabled={disabled}\n                    onClick={onClick}\n                    block\n                    type=\"primary\"\n                    size=\"large\"\n                  >\n                    <span style={{ paddingRight: 10 }}>{'Redeem'}</span>{' '}\n                    <Emoji symbol=\"🔥\" label=\"burn\" class=\"emoji-redeem\" />\n                  </RedeemButton>\n                </CenteredDiv>\n              </div>\n            </div>\n            <Col flex=\"auto\" />\n          </Row>\n        </WrappedCard>\n      </div>\n      <Modal\n        closable={false}\n        visible={showModal}\n        onOk={() => setShowModal(false)}\n        onCancel={() => setShowModal(false)}\n        width=\"80vw\"\n        centered={true}\n        keyboard={true}\n        maskClosable={true}\n        bodyStyle={style.body}\n        maskStyle={style.mask}\n        style={style.modal}\n        footer={null}\n      >\n        <Carousel images={moreImages} />\n      </Modal>\n    </>\n  );\n};\n\nexport default RedeemCard;\n\nconst auctionText = `\nThe auction will end in\n`;\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Col, Row, Modal, Typography } from 'antd';\nimport styled from 'styled-components';\nimport { useMarket } from '../utils/markets';\nimport { USE_ALL_NFTS } from '../nfts';\nimport { NftCardTrade, NftView } from '../components/NftCard';\nimport { useWindowDimensions } from '../components/utils';\nimport { useWallet } from '../utils/wallet';\nimport { useWalletBalancesForAllMarkets } from '../utils/markets';\nimport RedeemCard from '../components/RedeemCard';\nimport RedeemForm from '../components/RedeemForm';\nimport { NFT } from '../nfts';\nimport { PublicKey } from '@solana/web3.js';\nimport Spin from '../components/Spin';\n\nconst { Paragraph } = Typography;\n\nconst Wrapper = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  padding: 16px 16px;\n  .borderNone .ant-select-selector {\n    border: none !important;\n  }\n`;\n\nconst isValidPublicKey = (publicKeyString: string) => {\n  try {\n    new PublicKey(publicKeyString);\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n\nexport default function TradePage() {\n  const { marketAddress } = useParams();\n  const { marketName, setMarketAddress } = useMarket();\n\n  if (marketAddress && isValidPublicKey(marketAddress)) {\n    setMarketAddress(marketAddress);\n  } else {\n    setMarketAddress('7EapwYqr6ev4W6PH5DoXJfDsziynfma3318uQt99E6AA');\n  }\n\n  useEffect(() => {\n    document.title = marketName ? `${marketName} — Solible` : 'Solible';\n  }, [marketName]);\n\n  const changeOrderRef = useRef<\n    ({ size, price }: { size?: number; price?: number }) => void\n  >();\n\n  const componentProps = {\n    onChangeOrderRef: (ref: any) => (changeOrderRef.current = ref),\n    onPrice: useCallback(\n      (price) => changeOrderRef.current && changeOrderRef.current({ price }),\n      [],\n    ),\n    onSize: useCallback(\n      (size) => changeOrderRef.current && changeOrderRef.current({ size }),\n      [],\n    ),\n  };\n\n  return (\n    <>\n      <Wrapper>\n        <RenderTradePage {...componentProps} />\n      </Wrapper>\n    </>\n  );\n}\n\nconst RenderTradePage = ({ onChangeOrderRef, onPrice, onSize }) => {\n  const { market } = useMarket();\n  const windowDimensions = useWindowDimensions();\n\n  const walletBalances = useWalletBalancesForAllMarkets();\n  const [disabled, setDisabled] = useState(true);\n  const [showModal, setShowModal] = useState(false);\n  const { connected } = useWallet();\n\n  const styles = {\n    parent: {\n      display: 'flex',\n      flexWrap: 'wrap',\n    } as React.CSSProperties,\n    child: {\n      flex: 1,\n      paddingRight: 20,\n      paddingLeft: 20,\n    } as React.CSSProperties,\n    img: {\n      width: '100%',\n      paddingBottom: 30,\n    } as React.CSSProperties,\n    body: { background: 'white', color: 'black' },\n    mask: { background: 'transparent' },\n    modal: { background: 'transparent' },\n  };\n\n  const [nft, setNft] = useState<NFT | null>(null);\n\n  useEffect(() => {\n    if (market) {\n      const _nft = USE_ALL_NFTS.filter(\n        (e) => e.marketAddress.toBase58() === market.address.toBase58(),\n      )[0];\n      setNft(_nft);\n    }\n    if (walletBalances) {\n      setDisabled(\n        walletBalances.filter((e) => e.mint === nft?.mintAddress.toBase58())\n          .length > 0\n          ? false\n          : true,\n      );\n    }\n  }, [market, nft, walletBalances]);\n\n  if (!nft) {\n    return <Spin />;\n  }\n\n  const onClick = () => {\n    setShowModal(true);\n  };\n\n  if (!nft.redeembable) {\n    return (\n      <>\n        {windowDimensions.width > 1210 && (\n          <div style={styles.parent}>\n            <>\n              <div style={styles.child}>\n                <NftView nft={nft} />\n              </div>\n              <div style={styles.child}>\n                <NftCardTrade\n                  nft={nft}\n                  setChangeOrderRef={onChangeOrderRef}\n                  smallScreen={false}\n                  onPrice={onPrice}\n                  onSize={onSize}\n                />\n              </div>\n            </>\n          </div>\n        )}\n        {windowDimensions.width < 1210 && (\n          <>\n            <Row align=\"middle\" justify=\"center\">\n              <Col flex=\"auto\" />\n              <Col>\n                <img\n                  // @ts-ignore\n                  src={nft.img}\n                  alt={nft.name}\n                  style={styles.img}\n                />\n              </Col>\n              <Col flex=\"auto\" />\n            </Row>\n            <Row align=\"middle\" justify=\"center\">\n              <Col flex=\"auto\" />\n              <Col>\n                <NftCardTrade\n                  nft={NFT}\n                  setChangeOrderRef={onChangeOrderRef}\n                  smallScreen={false}\n                  onPrice={onPrice}\n                  onSize={onSize}\n                />\n              </Col>\n              <Col flex=\"auto\" />\n            </Row>\n          </>\n        )}\n      </>\n    );\n  }\n  return (\n    <>\n      {windowDimensions.width > 1210 && (\n        <div style={styles.parent}>\n          <>\n            <div style={styles.child}>\n              <RedeemCard nft={nft} disabled={disabled} onClick={onClick} />\n            </div>\n            <div style={styles.child}>\n              <NftCardTrade\n                nft={nft}\n                setChangeOrderRef={onChangeOrderRef}\n                smallScreen={false}\n                onPrice={onPrice}\n                onSize={onSize}\n              />\n            </div>\n            <Modal\n              closable={false}\n              visible={showModal && connected}\n              onOk={() => setShowModal(false)}\n              onCancel={() => setShowModal(false)}\n              width=\"800px\"\n              centered={true}\n              keyboard={true}\n              maskClosable={true}\n              bodyStyle={styles.body}\n              maskStyle={styles.mask}\n              style={styles.modal}\n              footer={null}\n            >\n              <RedeemForm\n                nftMint={nft.mintAddress}\n                //@ts-ignore\n                destination={nft.redeemAddress}\n              />\n            </Modal>\n          </>\n        </div>\n      )}\n      {windowDimensions.width < 1210 && (\n        <>\n          <Row align=\"middle\" justify=\"center\">\n            <Col flex=\"auto\" />\n            <Col>\n              <img src={nft.img.toString()} alt={nft.name} style={styles.img} />\n            </Col>\n            <Col flex=\"auto\" />\n          </Row>\n          <Paragraph style={{ textAlign: 'center' }}>\n            {nft.redeemDescription}\n          </Paragraph>\n          <Row align=\"middle\" justify=\"center\">\n            <Col flex=\"auto\" />\n            <Col>\n              <NftCardTrade\n                nft={nft}\n                setChangeOrderRef={onChangeOrderRef}\n                smallScreen={false}\n                onPrice={onPrice}\n                onSize={onSize}\n              />\n            </Col>\n            <Col flex=\"auto\" />\n          </Row>\n        </>\n      )}\n    </>\n  );\n};\n"],"sourceRoot":""}