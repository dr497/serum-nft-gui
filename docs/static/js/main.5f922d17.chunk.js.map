{"version":3,"sources":["assets/solible-logo.svg","assets/social/discord.svg","assets/social/telegram.svg","assets/social/twitter.svg","assets/homepage/bonfida_waves.svg","utils/utils.tsx","utils/fetch-loop.tsx","utils/connection.tsx","components/Link.js","utils/notifications.tsx","utils/wallet.tsx","global_style.ts","components/ErrorBoundary.jsx","utils/send.tsx","utils/tokens.tsx","utils/bonfidaConnector.tsx","utils/nfts/index.tsx","utils/markets.tsx","utils/preferences.tsx","utils/useInterval.tsx","components/Settings.jsx","components/WalletConnect.tsx","components/SearchBar.tsx","components/TopBar.tsx","components/HelpUrls.ts","components/Footer.tsx","components/BasicLayout.js","utils/nfts/utils.tsx","components/NftCard.tsx","pages/ExplorePage.tsx","components/ExplorerLink.tsx","components/TradePanel.tsx","components/ButtonViewMore.tsx","components/MoreNfts.tsx","pages/TradePage.tsx","utils/redeem.tsx","components/RedeemForm.tsx","pages/RedeemPage.tsx","pages/CollectionPage.tsx","components/Listing/index.tsx","pages/ListingPage.tsx","routes.tsx","App.tsx","serviceWorker.js","index.js"],"names":["module","exports","dexProgramId","MARKETS","find","deprecated","programId","isValidPublicKey","key","PublicKey","sleep","ms","a","Promise","resolve","setTimeout","Intl","NumberFormat","undefined","style","minimumFractionDigits","maximumFractionDigits","getDecimalCount","value","isNaN","Math","floor","toString","includes","split","length","parseInt","localStorageListeners","useLocalStorageStringState","defaultState","state","localStorage","getItem","useState","notify","useEffect","push","filter","listener","setState","useCallback","newState","removeItem","setItem","forEach","useLocalStorageState","JSON","stringify","stringState","setStringState","useMemo","parse","rpcRequest","method","params","fetch","MAINNET_ENDPOINT","headers","body","jsonrpc","id","response","ok","status","Error","json","result","console","error","isValidMarket","connection","marketAddress","Market","load","pageLoadTime","Date","globalCache","Map","FetchLoopListener","cacheKey","fn","refreshInterval","refreshIntervalOnError","callback","cacheNullValues","this","FetchLoopInternal","timeoutId","listeners","errors","refresh","clearTimeout","stopped","errored","data","log","set","notifyListeners","warn","waitTime","min","timeSincePageLoad","document","visibilityState","hasFocus","random","Set","previousRefreshInterval","add","assert","delete","map","refreshIntervalsOnError","x","size","globalLoops","loops","has","get","addListener","loop","removeListener","all","values","useAsyncData","asyncFn","useReducer","i","rerender","loaded","ENDPOINTS","name","endpoint","custom","accountListenerCount","ConnectionContext","React","createContext","ConnectionProvider","children","setEndpoint","customEndpoints","setCustomEndpoints","availableEndpoints","concat","Connection","sendConnection","onAccountChange","Account","publicKey","removeAccountChangeListener","onSlotChange","removeSlotChangeListener","Provider","useConnection","context","useContext","useAccountInfo","tuple","toBase58","getAccountInfo","accountInfo","count","previousInfo","subscriptionId","info","equals","lamports","initializeOnly","setCache","currentItem","previousInfoRef","useRef","current","useAccountData","Link","external","props","to","rest","href","target","rel","message","description","txid","type","placement","color","slice","notification","backgroundColor","boxShadow","WALLET_PROVIDERS","url","WalletContext","WalletProvider","providerUrl","endpointInfo","useConnectionConfig","savedProviderUrl","setProviderUrl","wallet","Wallet","connected","setConnected","on","walletPublicKey","substring","disconnect","providerName","useWallet","setProvider","getProgramAccounts","pubkey","encoding","filters","dataSize","memcmp","offset","bytes","GlobalStyle","createGlobalStyle","Title","Typography","ErrorBoundary","hasError","level","Component","createTokenAccountTransaction","mintPublicKey","newAccount","transaction","Transaction","SystemProgram","getMinimumBalanceForRentExemption","TokenInstructions","TOKEN_PROGRAM_ID","fromPubkey","newAccountPubkey","space","instruction","createAccount","initializeAccount","account","mint","owner","signer","settleAllFunds","tokenAccounts","markets","selectedTokenAccounts","programIds","reduce","cumulative","m","_programId","p","getOpenOrdersAccountsForProgramId","OpenOrders","findForOwner","openOrdersAccounts","openOrders","baseTokenFree","toNumber","quoteTokenFree","openOrdersAccountsForProgramIds","accounts","openOrdersAccount","market","_decoded","ownAddress","baseMint","baseMintAddress","quoteMint","quoteMintAddress","selectedBaseTokenAccount","getSelectedTokenAccountForMint","selectedQuoteTokenAccount","makeSettleFundsTransaction","settleTransactions","transactions","t","signers","s","mergeTransactions","sendTransaction","cancelOrder","cancelOrders","orders","order","makeMatchOrdersTransaction","makeCancelOrderInstruction","sendingMessage","placeOrder","side","price","orderType","baseCurrencyAccount","quoteCurrencyAccount","feeDiscountPubkey","formattedMinOrderSize","minOrderSize","toFixed","formattedTickSize","tickSize","isIncrement","num","step","abs","createAccountTransaction","createAccountSigners","payer","matchOrderstransaction","startTime","getUnixTs","makePlaceOrderTransaction","placeOrderTx","placeOrderSigners","endTime","getTime","sentMessage","successMessage","timeout","signTransaction","signedTransaction","sendSignedTransaction","getRecentBlockhash","recentBlockhash","blockhash","setSigners","partialSign","rawTransaction","serialize","sendRawTransaction","skipPreflight","done","awaitTransactionSignatureConfirmation","simulateResult","simulateTransaction","err","logs","line","startsWith","reject","onSignature","e","getSignatureStatuses","signatureStatuses","confirmations","resultDescription","AccountInfoResult","struct","executable","rentEpoch","array","union","jsonRpcVersion","literal","jsonRpcResult","slot","commitment","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","args","_rpcRequest","res","ACCOUNT_LAYOUT","BufferLayout","parseTokenAccountData","decode","amount","getOwnedAccountsFilters","offsetOf","span","getOwnedTokenAccounts","resp","bs58","every","filterBytes","getTokenAccountInfo","ownerAddress","splAccounts","parsedSplAccounts","effectiveMint","WRAPPED_SOL_MINT","BonfidaApi","path","URL","responseJson","success","NFT_Types","NFT","img","imgSmall","supply","mintAddress","redeembable","keywords","redeemAddress","redeemDescription","auctionDeadLine","nft","NFTS","nftsJson","redeem","REDEEMABLE_NFTS","redeemableNftsJson","ALL","getNftList","VIDEO","getExceptionalStyle","top","USE_MARKETS","TOKEN_MINTS","OFFICIAL_TOKENS","useAllMarkets","customMarkets","useCustomMarkets","time","getMarketInfos","marketInfo","address","marketName","_VERY_SLOW_REFRESH_INTERVAL","MarketContext","DEFAULT_MARKET","getMarketDetails","otherMarket","baseCurrency","token","baseLabel","quoteCurrency","quoteLabel","setCustomMarkets","MarketProvider","setMarketAddress","marketInfos","setMarket","then","catch","useSelectedTokenAccounts","useMarket","useOrderbookAccounts","bidData","bids","askData","asks","bidOrderbook","Orderbook","askOrderbook","useOpenOrdersAccounts","fast","getOpenOrdersAccounts","findOpenOrdersAccountsForOwner","useSelectedOpenOrdersAccount","useTokenAccounts","selectedPubKey","filtered","useSelectedQuoteCurrencyAccount","useSelectedBaseCurrencyAccount","useLocallyStoredFeeDiscountKey","storedFeeDiscountKey","setStoredFeeDiscountKey","useBalances","baseCurrencyBalances","baseSplSizeToNumber","BN","useSelectedBaseCurrencyBalances","quoteCurrencyBalances","quoteSplSizeToNumber","useSelectedQuoteCurrencyBalances","baseExists","baseTokenTotal","quoteExists","quoteTokenTotal","coin","sub","unsettled","customMarketsInfo","PreferencesContext","PreferencesProvider","autoSettleEnabled","setAutoSettleEnabled","marketList","delay","savedCallback","setInterval","clearInterval","useInterval","autoSettle","autoApprove","Settings","usePreferences","fontWeight","fontSize","marginRight","disabled","checked","onChange","Item","Menu","Dot","width","height","borderRadius","background","WalletConnect","history","useHistory","styles","menu","icon","col","paddingRight","item","paddingTop","allMarkets","allMarketsConnected","tokenAccountsConnected","onSettleFunds","ConnectedDropDown","align","justify","onClick","AppstoreOutlined","CheckCircleOutlined","DisconnectOutlined","Fragment","connect","textTransform","border","borderColor","overlay","overlayStyle","base58","abbreviateAddress","Search","Input","SearchBar","placeholder","onSearch","trim","toLowerCase","replace","enterButton","maxWidth","LogoWrapper","styled","div","explore","cursor","addNft","marginLeft","faq","mainRow","childRow","TopBar","src","logo","alt","window","location","onSelect","Option","helpUrls","Footer","Layout","useBreakpoint","Grid","footerElements","link","footer","paddingBottom","paddingLeft","discord","telegram","twitter","ipfs","marginTop","CustomFooter","smallScreen","lg","elem","index","Header","Content","BasicLayout","display","minHeight","flexDirection","padding","flex","findNftFromMint","useNftInfo","quote","setQuote","bestAsk","setBestAsk","setSupply","bestBid","setBestBid","loadAsks","loadBids","bb","getL2","ba","getTokenSupply","_supply","uiAmount","RedeemableTag","prop","className","OwnedTag","NftCard","muted","autoPlay","playsInline","textAlign","ExplorePage","nfts","productRows","Array","ceil","row","idx","useLocation","URLSearchParams","search","AddressLink","Countdown","Statistic","Line","TradeForm","bidPrice","setBidPrice","askPrice","setAskPrice","hasNft","setHasNft","submitting","setSubmitting","balances","useSendConnection","findFeeDiscountKeys","feeDiscountKey","useFeeDiscountKeys","filterForOpenOrders","useOpenOrders","openOrder","setOpenOrder","o","b","parsed","tokenAmount","placeBid","parseFloat","buyBestOffer","placeAsk","sellBestBid","cancelOpenOrder","direction","suffix","title","TradePanel","findNftFromMarket","ButtonViewMore","redeemable","MoreNfts","sort","marginBottom","TradePage","useParams","saved","getTradePageUrl","Urls","sendSplToken","sourceSpl","destination","tx","Token","createTransferInstruction","apiPost","postRedeemForm","StyledInput","StyledInputNumber","InputNumber","Spin","antIcon","LoadingOutlined","spin","indicator","layout","labelCol","wrapperCol","validateMessages","required","types","email","number","range","Help","RedeemForm","nftMint","source","submitted","setSubmitted","emailRef","nameRef","phoneRef","amountRef","countryRef","cityRef","addressRef","postCodeRef","additionalRef","label","placeHolder","onFinish","round","postBody","phone","country","city","postcode","txId","rules","prefix","MailOutlined","UserOutlined","PhoneOutlined","max","GlobalOutlined","FileSearchOutlined","htmlType","showIcon","RedeemPage","CollectionPage","allNfts","setNfts","setTokenAccounts","setLoaded","getTokenAccountsByOwner","getTokenAccountBalance","balance","getParsedAccountInfo","prev","intersection","r","Paragraph","Select","formContainer","justifyContent","alignItems","container","margin","leftAlign","URLS","ListingExplainer","formItemLayout","xs","sm","tailFormItemLayout","Listing","setName","setMint","setIpfs","ipfsSmall","setIpfsSmall","setType","githubText","setGithubText","canSubmit","submit","validMarket","validMint","toJson","defaultValue","v","Image","onload","vid","createElement","ListingPage","Routes","basename","exact","App","fallback","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5f922d17.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/solible-logo.eff5ddb2.svg\";","module.exports = __webpack_public_path__ + \"static/media/discord.e59842c9.svg\";","module.exports = __webpack_public_path__ + \"static/media/telegram.bbb9b4eb.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.ef3fca7c.svg\";","module.exports = __webpack_public_path__ + \"static/media/bonfida_waves.c7ff066f.svg\";","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { PublicKey, Connection, AccountInfo } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport BN from 'bn.js';\nimport { Market, MARKETS } from '@project-serum/serum';\nimport { MAINNET_ENDPOINT } from './connection';\n\n// @ts-ignore\nconst dexProgramId = MARKETS?.find(({ deprecated }) => !deprecated).programId;\n\nexport function isValidPublicKey(key) {\n  if (!key) {\n    return false;\n  }\n  try {\n    new PublicKey(key);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport async function sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport const percentFormat = new Intl.NumberFormat(undefined, {\n  style: 'percent',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport function floorToDecimal(\n  value: number,\n  decimals: number | undefined | null,\n) {\n  return decimals ? Math.floor(value * 10 ** decimals) / 10 ** decimals : value;\n}\n\nexport function roundToDecimal(\n  value: number,\n  decimals: number | undefined | null,\n) {\n  return decimals ? Math.round(value * 10 ** decimals) / 10 ** decimals : value;\n}\n\nexport function getDecimalCount(value): number {\n  if (\n    !isNaN(value) &&\n    Math.floor(value) !== value &&\n    value.toString().includes('.')\n  )\n    return value.toString().split('.')[1].length || 0;\n  if (\n    !isNaN(value) &&\n    Math.floor(value) !== value &&\n    value.toString().includes('e')\n  )\n    return parseInt(value.toString().split('e-')[1] || '0');\n  return 0;\n}\n\nexport function divideBnToNumber(numerator: BN, denominator: BN): number {\n  const quotient = numerator.div(denominator).toNumber();\n  const rem = numerator.umod(denominator);\n  const gcd = rem.gcd(denominator);\n  return quotient + rem.div(gcd).toNumber() / denominator.div(gcd).toNumber();\n}\n\nexport function getTokenMultiplierFromDecimals(decimals: number): BN {\n  return new BN(10).pow(new BN(decimals));\n}\n\nconst localStorageListeners = {};\n\nexport function useLocalStorageStringState(\n  key: string,\n  defaultState: string | null = null,\n): [string | null, (newState: string | null) => void] {\n  const state = localStorage.getItem(key) || defaultState;\n\n  const [, notify] = useState(key + '\\n' + state);\n\n  useEffect(() => {\n    if (!localStorageListeners[key]) {\n      localStorageListeners[key] = [];\n    }\n    localStorageListeners[key].push(notify);\n    return () => {\n      localStorageListeners[key] = localStorageListeners[key].filter(\n        (listener) => listener !== notify,\n      );\n      if (localStorageListeners[key].length === 0) {\n        delete localStorageListeners[key];\n      }\n    };\n  }, [key]);\n\n  const setState = useCallback<(newState: string | null) => void>(\n    (newState) => {\n      const changed = state !== newState;\n      if (!changed) {\n        return;\n      }\n\n      if (newState === null) {\n        localStorage.removeItem(key);\n      } else {\n        localStorage.setItem(key, newState);\n      }\n      localStorageListeners[key].forEach((listener) =>\n        listener(key + '\\n' + newState),\n      );\n    },\n    [state, key],\n  );\n\n  return [state, setState];\n}\n\nexport function useLocalStorageState<T = any>(\n  key: string,\n  defaultState: T | null = null,\n): [T, (newState: T) => void] {\n  let [stringState, setStringState] = useLocalStorageStringState(\n    key,\n    JSON.stringify(defaultState),\n  );\n  return [\n    useMemo(() => stringState && JSON.parse(stringState), [stringState]),\n    (newState) => setStringState(JSON.stringify(newState)),\n  ];\n}\n\nexport function useEffectAfterTimeout(effect, timeout) {\n  useEffect(() => {\n    const handle = setTimeout(effect, timeout);\n    return () => clearTimeout(handle);\n  });\n}\n\nexport function useListener(emitter, eventName) {\n  const [, forceUpdate] = useState(0);\n  useEffect(() => {\n    const listener = () => forceUpdate((i) => i + 1);\n    emitter.on(eventName, listener);\n    return () => emitter.removeListener(eventName, listener);\n  }, [emitter, eventName]);\n}\n\nexport function abbreviateAddress(address: PublicKey, size = 4) {\n  const base58 = address.toBase58();\n  return base58.slice(0, size) + '…' + base58.slice(-size);\n}\n\nexport function isEqual(obj1, obj2, keys) {\n  if (!keys && Object.keys(obj1).length !== Object.keys(obj2).length) {\n    return false;\n  }\n  keys = keys || Object.keys(obj1);\n  for (const k of keys) {\n    if (obj1[k] !== obj2[k]) {\n      // shallow comparison\n      return false;\n    }\n  }\n  return true;\n}\n\nexport const useTokenAccounts = (owner: PublicKey, connection: Connection) => {\n  const [tokenAccounts, setTokenAccounts] = useState<Array<string>>([]);\n  const [loaded, setLoaded] = useState(false);\n  useEffect(() => {\n    let filter = { programId: TOKEN_PROGRAM_ID };\n    const get = async () => {\n      if (!owner || !connection) {\n        return;\n      } else {\n        const accounts = await connection.getTokenAccountsByOwner(\n          owner,\n          filter,\n        );\n\n        for (let i = 0; i < accounts.value.length; i++) {\n          const balance = await connection.getTokenAccountBalance(\n            accounts.value[i].pubkey,\n          );\n          const info = await connection.getParsedAccountInfo(\n            accounts.value[i].pubkey,\n          );\n          if (balance.value.uiAmount > 1) {\n            setTokenAccounts((prev) => [\n              ...prev,\n              // @ts-ignore\n              info.value?.data.parsed.info.mint,\n            ]);\n          }\n        }\n      }\n      setLoaded(true);\n    };\n    get();\n  }, [owner]);\n  return { balances: tokenAccounts, loaded };\n};\n\nexport const rpcRequest = async (method: string, params: any) => {\n  try {\n    let response = await fetch(MAINNET_ENDPOINT, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        jsonrpc: '2.0',\n        id: 1,\n        method: method,\n        params: params,\n      }),\n    });\n    if (!response.ok) {\n      return [];\n    }\n    if (response.status !== 200 || !response.ok) {\n      throw new Error(`Error rpcRequest `);\n    }\n    let json = await response.json();\n    return json.result;\n  } catch (err) {\n    console.error(err);\n    throw new Error(`Error rpcRequest = ${err}`);\n  }\n};\n\nexport const isValidMarket = async (\n  connection: Connection,\n  marketAddress: string,\n) => {\n  try {\n    const market = await Market.load(\n      connection,\n      new PublicKey(marketAddress),\n      {},\n      dexProgramId,\n    );\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n","import { useEffect, useReducer } from 'react';\n\nimport assert from 'assert';\n\nconst pageLoadTime = new Date();\n\nconst globalCache: Map<any, any> = new Map();\n\nclass FetchLoopListener<T = any> {\n  cacheKey: any;\n  fn: () => Promise<T>;\n  refreshInterval: number;\n  refreshIntervalOnError: number | null;\n  callback: () => void;\n  cacheNullValues: Boolean = true;\n\n  constructor(\n    cacheKey: any,\n    fn: () => Promise<T>,\n    refreshInterval: number,\n    refreshIntervalOnError: number | null,\n    callback: () => void,\n    cacheNullValues: Boolean,\n  ) {\n    this.cacheKey = cacheKey;\n    this.fn = fn;\n    this.refreshInterval = refreshInterval;\n    this.refreshIntervalOnError = refreshIntervalOnError;\n    this.callback = callback;\n    this.cacheNullValues = cacheNullValues;\n  }\n}\n\nclass FetchLoopInternal<T = any> {\n  cacheKey: any;\n  fn: () => Promise<T>;\n  timeoutId: null | any;\n  listeners: Set<FetchLoopListener<T>>;\n  errors: number;\n  cacheNullValues: Boolean = true;\n\n  constructor(cacheKey: any, fn: () => Promise<T>, cacheNullValues: Boolean) {\n    this.cacheKey = cacheKey;\n    this.fn = fn;\n    this.timeoutId = null;\n    this.listeners = new Set();\n    this.errors = 0;\n    this.cacheNullValues = cacheNullValues;\n  }\n\n  get refreshInterval(): number {\n    return Math.min(\n      ...[...this.listeners].map((listener) => listener.refreshInterval),\n    );\n  }\n\n  get refreshIntervalOnError(): number | null {\n    const refreshIntervalsOnError: number[] = [...this.listeners]\n      .map((listener) => listener.refreshIntervalOnError)\n      .filter((x): x is number => x !== null);\n    if (refreshIntervalsOnError.length === 0) {\n      return null;\n    }\n    return Math.min(...refreshIntervalsOnError);\n  }\n\n  get stopped(): boolean {\n    return this.listeners.size === 0;\n  }\n\n  addListener(listener: FetchLoopListener<T>): void {\n    const previousRefreshInterval = this.refreshInterval;\n    this.listeners.add(listener);\n    if (this.refreshInterval < previousRefreshInterval) {\n      this.refresh();\n    }\n  }\n\n  removeListener(listener: FetchLoopListener<T>): void {\n    assert(this.listeners.delete(listener));\n    if (this.stopped) {\n      if (this.timeoutId) {\n        clearTimeout(this.timeoutId);\n        this.timeoutId = null;\n      }\n    }\n  }\n\n  notifyListeners(): void {\n    this.listeners.forEach((listener) => listener.callback());\n  }\n\n  refresh = async () => {\n    if (this.timeoutId) {\n      clearTimeout(this.timeoutId);\n      this.timeoutId = null;\n    }\n    if (this.stopped) {\n      return;\n    }\n\n    let errored = false;\n    try {\n      const data = await this.fn();\n      if (!this.cacheNullValues && data === null) {\n        console.log(`Not caching null value for ${this.cacheKey}`);\n        // cached data has not changed so no need to re-render\n        this.errors = 0;\n        return data;\n      } else {\n        globalCache.set(this.cacheKey, data);\n        this.errors = 0;\n        this.notifyListeners();\n        return data;\n      }\n    } catch (error) {\n      ++this.errors;\n      console.warn(error);\n      errored = true;\n    } finally {\n      if (!this.timeoutId && !this.stopped) {\n        let waitTime = this.refreshInterval;\n        if (\n          errored &&\n          this.refreshIntervalOnError &&\n          this.refreshIntervalOnError > 0\n        ) {\n          waitTime = this.refreshIntervalOnError;\n        }\n\n        // Back off on errors.\n        if (this.errors > 0) {\n          waitTime = Math.min(1000 * 2 ** (this.errors - 1), 60000);\n        }\n\n        // Don't do any refreshing for the first five seconds, to make way for other things to load.\n        const timeSincePageLoad = +new Date() - +pageLoadTime;\n        if (timeSincePageLoad < 5000) {\n          waitTime += 5000 - timeSincePageLoad / 2;\n        }\n\n        // Refresh background pages slowly.\n        if (document.visibilityState === 'hidden') {\n          waitTime = 60000;\n        } else if (!document.hasFocus()) {\n          waitTime *= 1.5;\n        }\n\n        // Add jitter so we don't send all requests at the same time.\n        waitTime *= 0.8 + 0.4 * Math.random();\n\n        this.timeoutId = setTimeout(this.refresh, waitTime);\n      }\n    }\n  };\n}\n\nclass FetchLoops {\n  loops = new Map();\n\n  addListener<T>(listener: FetchLoopListener<T>) {\n    if (!this.loops.has(listener.cacheKey)) {\n      this.loops.set(\n        listener.cacheKey,\n        new FetchLoopInternal<T>(\n          listener.cacheKey,\n          listener.fn,\n          listener.cacheNullValues,\n        ),\n      );\n    }\n    this.loops.get(listener.cacheKey).addListener(listener);\n  }\n\n  removeListener<T>(listener: FetchLoopListener<T>) {\n    const loop = this.loops.get(listener.cacheKey);\n    loop.removeListener(listener);\n    if (loop.stopped) {\n      this.loops.delete(listener.cacheKey);\n      globalCache.delete(listener.cacheKey);\n    }\n  }\n\n  refresh(cacheKey) {\n    if (this.loops.has(cacheKey)) {\n      this.loops.get(cacheKey).refresh();\n    }\n  }\n\n  refreshAll() {\n    return Promise.all([...this.loops.values()].map((loop) => loop.refresh()));\n  }\n}\nconst globalLoops = new FetchLoops();\n\nexport function useAsyncData<T = any>(\n  asyncFn: () => Promise<T>,\n  cacheKey: any,\n  { refreshInterval = 60000, refreshIntervalOnError = null } = {},\n  cacheNullValues: Boolean = true,\n): [null | undefined | T, boolean] {\n  const [, rerender] = useReducer((i) => i + 1, 0);\n\n  useEffect(() => {\n    if (!cacheKey) {\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      return () => {};\n    }\n    const listener = new FetchLoopListener<T>(\n      cacheKey,\n      asyncFn,\n      refreshInterval,\n      refreshIntervalOnError,\n      rerender,\n      cacheNullValues,\n    );\n    globalLoops.addListener(listener);\n    return () => globalLoops.removeListener(listener);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cacheKey, refreshInterval]);\n\n  if (!cacheKey) {\n    return [null, false];\n  }\n\n  const loaded = globalCache.has(cacheKey);\n  const data = loaded ? globalCache.get(cacheKey) : undefined;\n  return [data, loaded];\n}\n\nexport function refreshCache(cacheKey: any, clearCache = false): void {\n  if (clearCache) {\n    globalCache.delete(cacheKey);\n  }\n  const loop = globalLoops.loops.get(cacheKey);\n  if (loop) {\n    loop.refresh();\n    if (clearCache) {\n      loop.notifyListeners();\n    }\n  }\n}\n\nexport function refreshAllCaches(): void {\n  for (const loop of globalLoops.loops.values()) {\n    loop.refresh();\n  }\n}\n\nexport function setCache(\n  cacheKey: any,\n  value: any,\n  { initializeOnly = false } = {},\n): void {\n  if (initializeOnly && globalCache.has(cacheKey)) {\n    return;\n  }\n  globalCache.set(cacheKey, value);\n  const loop = globalLoops.loops.get(cacheKey);\n  if (loop) {\n    loop.notifyListeners();\n  }\n}\n","import { useLocalStorageState } from './utils';\nimport { Account, AccountInfo, Connection, PublicKey } from '@solana/web3.js';\nimport React, { useContext, useEffect, useMemo, useRef } from 'react';\nimport { setCache, useAsyncData } from './fetch-loop';\nimport tuple from 'immutable-tuple';\nimport { ConnectionContextValues, EndpointInfo } from './types';\n\nexport const MAINNET_ENDPOINT = 'https://solana-api.projectserum.com';\n\nexport const ENDPOINTS: EndpointInfo[] = [\n  {\n    name: 'mainnet-beta',\n    endpoint: 'https://solana-api.projectserum.com',\n    // endpoint: 'https://api.mainnet-beta.solana.com',\n    // endpoint:\n    //   'http://ec2-52-194-187-6.ap-northeast-1.compute.amazonaws.com:8899/',\n\n    custom: false,\n  },\n  { name: 'localnet', endpoint: 'http://127.0.0.1:8899', custom: false },\n];\n\nconst accountListenerCount = new Map();\n\nconst ConnectionContext: React.Context<null | ConnectionContextValues> = React.createContext<null | ConnectionContextValues>(\n  null,\n);\n\nexport function ConnectionProvider({ children }) {\n  const [endpoint, setEndpoint] = useLocalStorageState<string>(\n    'connectionEndpts',\n    ENDPOINTS[0].endpoint,\n  );\n  const [customEndpoints, setCustomEndpoints] = useLocalStorageState<\n    EndpointInfo[]\n  >('customConnectionEndpoints', []);\n  const availableEndpoints = ENDPOINTS.concat(customEndpoints);\n\n  const connection = useMemo(() => new Connection(endpoint, 'recent'), [\n    endpoint,\n  ]);\n  const sendConnection = useMemo(() => new Connection(endpoint, 'recent'), [\n    endpoint,\n  ]);\n\n  // The websocket library solana/web3.js uses closes its websocket connection when the subscription list\n  // is empty after opening its first time, preventing subsequent subscriptions from receiving responses.\n  // This is a hack to prevent the list from every getting empty\n  useEffect(() => {\n    const id = connection.onAccountChange(new Account().publicKey, () => {});\n    return () => {\n      connection.removeAccountChangeListener(id);\n    };\n  }, [connection]);\n\n  useEffect(() => {\n    const id = connection.onSlotChange(() => null);\n    return () => {\n      connection.removeSlotChangeListener(id);\n    };\n  }, [connection]);\n\n  useEffect(() => {\n    const id = sendConnection.onAccountChange(\n      new Account().publicKey,\n      () => {},\n    );\n    return () => {\n      sendConnection.removeAccountChangeListener(id);\n    };\n  }, [sendConnection]);\n\n  useEffect(() => {\n    const id = sendConnection.onSlotChange(() => null);\n    return () => {\n      sendConnection.removeSlotChangeListener(id);\n    };\n  }, [sendConnection]);\n\n  return (\n    <ConnectionContext.Provider\n      value={{\n        endpoint,\n        setEndpoint,\n        connection,\n        sendConnection,\n        availableEndpoints,\n        setCustomEndpoints,\n      }}\n    >\n      {children}\n    </ConnectionContext.Provider>\n  );\n}\n\nexport function useConnection() {\n  const context = useContext(ConnectionContext);\n  if (!context) {\n    throw new Error('Missing connection context');\n  }\n  return context.connection;\n}\n\nexport function useSendConnection() {\n  const context = useContext(ConnectionContext);\n  if (!context) {\n    throw new Error('Missing connection context');\n  }\n  return context.sendConnection;\n}\n\nexport function useConnectionConfig() {\n  const context = useContext(ConnectionContext);\n  if (!context) {\n    throw new Error('Missing connection context');\n  }\n  return {\n    endpoint: context.endpoint,\n    endpointInfo: context.availableEndpoints.find(\n      (info) => info.endpoint === context.endpoint,\n    ),\n    setEndpoint: context.setEndpoint,\n    availableEndpoints: context.availableEndpoints,\n    setCustomEndpoints: context.setCustomEndpoints,\n  };\n}\n\nexport function useAccountInfo(\n  publicKey: PublicKey | undefined | null,\n): [AccountInfo<Buffer> | null | undefined, boolean] {\n  const connection = useConnection();\n  const cacheKey = tuple(connection, publicKey?.toBase58());\n  const [accountInfo, loaded] = useAsyncData<AccountInfo<Buffer> | null>(\n    async () => (publicKey ? connection.getAccountInfo(publicKey) : null),\n    cacheKey,\n    { refreshInterval: 60_000 },\n  );\n  useEffect(() => {\n    if (!publicKey) {\n      return;\n    }\n    if (accountListenerCount.has(cacheKey)) {\n      let currentItem = accountListenerCount.get(cacheKey);\n      ++currentItem.count;\n    } else {\n      let previousInfo: AccountInfo<Buffer> | null = null;\n      const subscriptionId = connection.onAccountChange(publicKey, (info) => {\n        if (\n          !previousInfo ||\n          !previousInfo.data.equals(info.data) ||\n          previousInfo.lamports !== info.lamports\n        ) {\n          previousInfo = info;\n          setCache(cacheKey, info);\n        }\n      });\n      accountListenerCount.set(cacheKey, { count: 1, subscriptionId });\n    }\n    return () => {\n      let currentItem = accountListenerCount.get(cacheKey);\n      let nextCount = currentItem.count - 1;\n      if (nextCount <= 0) {\n        connection.removeAccountChangeListener(currentItem.subscriptionId);\n        accountListenerCount.delete(cacheKey);\n      } else {\n        --currentItem.count;\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cacheKey]);\n  const previousInfoRef = useRef<AccountInfo<Buffer> | null | undefined>(null);\n  if (\n    !accountInfo ||\n    !previousInfoRef.current ||\n    !previousInfoRef.current.data.equals(accountInfo.data) ||\n    previousInfoRef.current.lamports !== accountInfo.lamports\n  ) {\n    previousInfoRef.current = accountInfo;\n  }\n  return [previousInfoRef.current, loaded];\n}\n\nexport function useAccountData(publicKey) {\n  const [accountInfo] = useAccountInfo(publicKey);\n  return accountInfo && accountInfo.data;\n}\n","import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\nexport default function Link({ external = false, ...props }) {\n  let { to, children, ...rest } = props;\n  if (external) {\n    return (\n      <a href={to} target=\"_blank\" rel=\"noopener noreferrer\" {...rest}>\n        {children}\n      </a>\n    );\n  }\n  return (\n    <RouterLink to={to} {...rest}>\n      {children}\n    </RouterLink>\n  );\n}\n","import React from 'react';\nimport { notification } from 'antd';\nimport Link from '../components/Link';\n\nexport function notify({\n  message,\n  description,\n  txid,\n  type = 'info',\n  placement = 'bottomLeft',\n}: {\n  message: string;\n  description?: string | JSX.Element;\n  txid?: string;\n  type?: string;\n  placement?: string;\n}) {\n  if (txid) {\n    description = (\n      <Link\n        external\n        to={'https://explorer.solana.com/tx/' + txid}\n        style={{ color: '#0000ff' }}\n      >\n        View transaction {txid.slice(0, 8)}...{txid.slice(txid.length - 8)}\n      </Link>\n    );\n  }\n  notification[type]({\n    message: <span style={{ color: '#FFFFFF' }}>{message}</span>,\n    description: (\n      <span style={{ color: 'color: rgba(255, 255, 255, 0.6)' }}>\n        {description}\n      </span>\n    ),\n    placement,\n    style: {\n      backgroundColor: '#0a0d1f',\n      boxShadow:\n        '0px 3px 6px -4px rgba(0, 0, 0, 0.12), 0px 6px 16px rgba(0, 0, 0, 0.08), 0px 9px 28px 8px rgba(0, 0, 0, 0.05)',\n    },\n  });\n}\n","import React, { useContext, useEffect, useMemo, useState } from 'react';\nimport Wallet from '@project-serum/sol-wallet-adapter';\nimport { notify } from './notifications';\nimport { useConnectionConfig } from './connection';\nimport { useLocalStorageState } from './utils';\nimport { WalletContextValues } from './types';\nimport { PublicKey } from '@solana/web3.js';\nimport { rpcRequest } from './utils';\n\nexport const WALLET_PROVIDERS = [\n  { name: 'sollet.io', url: 'https://www.sollet.io' },\n  { name: 'Bonfida Wallet', url: 'https://www.bonfida.com/wallet' },\n];\n\nconst WalletContext = React.createContext<null | WalletContextValues>(null);\n\nexport function WalletProvider({ children }) {\n  const { endpoint } = useConnectionConfig();\n\n  const [savedProviderUrl, setProviderUrl] = useLocalStorageState(\n    'walletProvider',\n    'https://www.sollet.io',\n  );\n  let providerUrl;\n  if (!savedProviderUrl) {\n    providerUrl = 'https://www.sollet.io';\n  } else {\n    providerUrl = savedProviderUrl;\n  }\n\n  const wallet = useMemo(() => new Wallet(providerUrl, endpoint), [\n    providerUrl,\n    endpoint,\n  ]);\n\n  const [connected, setConnected] = useState(false);\n\n  useEffect(() => {\n    console.log('trying to connect');\n    wallet.on('connect', () => {\n      console.log('connected');\n      localStorage.removeItem('feeDiscountKey');\n      setConnected(true);\n      let walletPublicKey = wallet.publicKey.toBase58();\n      let keyToDisplay =\n        walletPublicKey.length > 20\n          ? `${walletPublicKey.substring(0, 7)}.....${walletPublicKey.substring(\n              walletPublicKey.length - 7,\n              walletPublicKey.length,\n            )}`\n          : walletPublicKey;\n      notify({\n        message: 'Wallet update',\n        description: 'Connected to wallet ' + keyToDisplay,\n      });\n    });\n    wallet.on('disconnect', () => {\n      setConnected(false);\n      notify({\n        message: 'Wallet update',\n        description: 'Disconnected from wallet',\n      });\n      localStorage.removeItem('feeDiscountKey');\n    });\n    return () => {\n      wallet.disconnect();\n      setConnected(false);\n    };\n  }, [wallet]);\n\n  return (\n    <WalletContext.Provider\n      value={{\n        wallet,\n        connected,\n        providerUrl,\n        setProviderUrl,\n        providerName:\n          WALLET_PROVIDERS.find(({ url }) => url === providerUrl)?.name ??\n          providerUrl,\n      }}\n    >\n      {children}\n    </WalletContext.Provider>\n  );\n}\n\nexport function useWallet() {\n  const context = useContext(WalletContext);\n  if (!context) {\n    throw new Error('Missing wallet context');\n  }\n  return {\n    connected: context.connected,\n    wallet: context.wallet,\n    providerUrl: context.providerUrl,\n    setProvider: context.setProviderUrl,\n    providerName: context.providerName,\n  };\n}\n\nexport const getProgramAccounts = async (pubkey: PublicKey) => {\n  const params = [\n    'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    {\n      encoding: 'jsonParsed',\n      filters: [\n        {\n          dataSize: 165,\n        },\n        {\n          memcmp: {\n            offset: 32,\n            bytes: pubkey?.toBase58(),\n          },\n        },\n      ],\n    },\n  ];\n  const result = await rpcRequest('getProgramAccounts', params);\n  return result;\n};\n","import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\nhtml,body{\n  background: #11161D;\n}\ninput[type=number]::-webkit-inner-spin-button {\n  opacity: 0;\n}\ninput[type=number]:hover::-webkit-inner-spin-button,\ninput[type=number]:focus::-webkit-inner-spin-button {\n  opacity: 0.25;\n}\n/* width */\n::-webkit-scrollbar {\n  width: 15px;\n}\n/* Track */\n::-webkit-scrollbar-track {\n  background: #2d313c;\n}\n/* Handle */\n::-webkit-scrollbar-thumb {\n  background: #5b5f67;\n}\n/* Handle on hover */\n::-webkit-scrollbar-thumb:hover {\n  background: #5b5f67;\n}\n.ant-slider-track, .ant-slider:hover .ant-slider-track {\n  background-color: #2abdd2;\n  opacity: 0.75;\n}\n.ant-slider-track,\n.ant-slider ant-slider-track:hover {\n  background-color: #2abdd2;\n  opacity: 0.75;\n}\n.ant-slider-dot-active,\n.ant-slider-handle,\n.ant-slider-handle-click-focused,\n.ant-slider:hover .ant-slider-handle:not(.ant-tooltip-open)  {\n  border: 2px solid #2abdd2; \n}\n.ant-table-tbody > tr.ant-table-row:hover > td {\n  background: #273043;\n}\n.ant-table-tbody > tr > td {\n  border-bottom: 8px solid #1A2029;\n}\n.ant-table-container table > thead > tr:first-child th {\n  border-bottom: none;\n}\n.ant-divider-horizontal.ant-divider-with-text::before, .ant-divider-horizontal.ant-divider-with-text::after {\n  border-top: 1px solid #434a59 !important;\n}\n.ant-layout {\n  background: linear-gradient(258.48deg, rgba(128, 128, 255, 0.1) 0%, rgba(71, 71, 240, 0.1) 100%), #121837;\n  }\n  .ant-table {\n    background: #212734;\n  }\n  .ant-table-thead > tr > th {\n    background: #1A2029;\n  }\n.ant-select-item-option-content {\n  img {\n    margin-right: 4px;\n  }\n}\n.ant-modal-content {\n  background-color: #212734;\n}\n\n@-webkit-keyframes highlight {\n  from { background-color: #2abdd2;}\n  to {background-color: #1A2029;}\n}\n@-moz-keyframes highlight {\n  from { background-color: #2abdd2;}\n  to {background-color: #1A2029;}\n}\n@-keyframes highlight {\n  from { background-color: #2abdd2;}\n  to {background-color: #1A2029;}\n}\n.flash {\n  -moz-animation: highlight 0.5s ease 0s 1 alternate ;\n  -webkit-animation: highlight 0.5s ease 0s 1 alternate;\n  animation: highlight 0.5s ease 0s 1 alternate;\n}`;\n","import React, { Component } from 'react';\nimport { Typography } from 'antd';\n\nconst { Title } = Typography;\n\nexport default class ErrorBoundary extends Component {\n  state = {\n    hasError: false,\n  };\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div>\n          <div>\n            <Title level={2}>Something went wrong.</Title>\n            <Title level={4}>Please try again later.</Title>\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n","import { notify } from './notifications';\nimport { getDecimalCount, sleep } from './utils';\nimport { getSelectedTokenAccountForMint } from './markets';\nimport {\n  Account,\n  AccountInfo,\n  Commitment,\n  Connection,\n  PublicKey,\n  RpcResponseAndContext,\n  SimulatedTransactionResponse,\n  SystemProgram,\n  Transaction,\n  TransactionSignature,\n} from '@solana/web3.js';\nimport BN from 'bn.js';\nimport {\n  DexInstructions,\n  Market,\n  OpenOrders,\n  TOKEN_MINTS,\n  TokenInstructions,\n} from '@project-serum/serum';\nimport Wallet from '@project-serum/sol-wallet-adapter';\nimport { SelectedTokenAccounts, TokenAccount } from './types';\nimport { Order } from '@project-serum/serum/lib/market';\nimport { Buffer } from 'buffer';\nimport assert from 'assert';\nimport { struct } from 'superstruct';\n\nexport async function createTokenAccountTransaction({\n  connection,\n  wallet,\n  mintPublicKey,\n}: {\n  connection: Connection;\n  wallet: Wallet;\n  mintPublicKey: PublicKey;\n}): Promise<{\n  transaction: Transaction;\n  signer: Account;\n  newAccountPubkey: PublicKey;\n}> {\n  const newAccount = new Account();\n  const transaction = new Transaction();\n  const instruction = SystemProgram.createAccount({\n    fromPubkey: wallet.publicKey,\n    newAccountPubkey: newAccount.publicKey,\n    lamports: await connection.getMinimumBalanceForRentExemption(165),\n    space: 165,\n    programId: TokenInstructions.TOKEN_PROGRAM_ID,\n  });\n  transaction.add(instruction);\n  transaction.add(\n    TokenInstructions.initializeAccount({\n      account: newAccount.publicKey,\n      mint: mintPublicKey,\n      owner: wallet.publicKey,\n    }),\n  );\n  return {\n    transaction,\n    signer: newAccount,\n    newAccountPubkey: newAccount.publicKey,\n  };\n}\n\nexport async function settleFunds({\n  market,\n  openOrders,\n  connection,\n  wallet,\n  baseCurrencyAccount,\n  quoteCurrencyAccount,\n}: {\n  market: Market;\n  openOrders: OpenOrders;\n  connection: Connection;\n  wallet: Wallet;\n  baseCurrencyAccount: TokenAccount;\n  quoteCurrencyAccount: TokenAccount;\n}): Promise<string | undefined> {\n  if (\n    !market ||\n    !wallet ||\n    !connection ||\n    !openOrders ||\n    (!baseCurrencyAccount && !quoteCurrencyAccount)\n  ) {\n    notify({ message: 'Not connected' });\n    return;\n  }\n\n  let createAccountTransaction: Transaction | undefined;\n  let createAccountSigner: Account | undefined;\n  let baseCurrencyAccountPubkey = baseCurrencyAccount?.pubkey;\n  let quoteCurrencyAccountPubkey = quoteCurrencyAccount?.pubkey;\n\n  if (!baseCurrencyAccountPubkey) {\n    const result = await createTokenAccountTransaction({\n      connection,\n      wallet,\n      mintPublicKey: market.baseMintAddress,\n    });\n    baseCurrencyAccountPubkey = result?.newAccountPubkey;\n    createAccountTransaction = result?.transaction;\n    createAccountSigner = result?.signer;\n  }\n  if (!quoteCurrencyAccountPubkey) {\n    const result = await createTokenAccountTransaction({\n      connection,\n      wallet,\n      mintPublicKey: market.quoteMintAddress,\n    });\n    quoteCurrencyAccountPubkey = result?.newAccountPubkey;\n    createAccountTransaction = result?.transaction;\n    createAccountSigner = result?.signer;\n  }\n  let referrerQuoteWallet: PublicKey | null = null;\n  if (market.supportsReferralFees) {\n    const usdt = TOKEN_MINTS.find(({ name }) => name === 'USDT');\n    const usdc = TOKEN_MINTS.find(({ name }) => name === 'USDC');\n    if (\n      process.env.REACT_APP_USDT_REFERRAL_FEES_ADDRESS &&\n      usdt &&\n      market.quoteMintAddress.equals(usdt.address)\n    ) {\n      referrerQuoteWallet = new PublicKey(\n        process.env.REACT_APP_USDT_REFERRAL_FEES_ADDRESS,\n      );\n    } else if (\n      process.env.REACT_APP_USDC_REFERRAL_FEES_ADDRESS &&\n      usdc &&\n      market.quoteMintAddress.equals(usdc.address)\n    ) {\n      referrerQuoteWallet = new PublicKey(\n        process.env.REACT_APP_USDC_REFERRAL_FEES_ADDRESS,\n      );\n    }\n  }\n  const {\n    transaction: settleFundsTransaction,\n    signers: settleFundsSigners,\n  } = await market.makeSettleFundsTransaction(\n    connection,\n    openOrders,\n    baseCurrencyAccountPubkey,\n    quoteCurrencyAccountPubkey,\n    referrerQuoteWallet,\n  );\n\n  let transaction = mergeTransactions([\n    createAccountTransaction,\n    settleFundsTransaction,\n  ]);\n  let signers = createAccountSigner\n    ? [...settleFundsSigners, createAccountSigner]\n    : settleFundsSigners;\n\n  return await sendTransaction({\n    transaction,\n    signers,\n    wallet,\n    connection,\n    sendingMessage: 'Settling funds...',\n  });\n}\n\nexport async function settleAllFunds({\n  connection,\n  wallet,\n  tokenAccounts,\n  markets,\n  selectedTokenAccounts,\n}: {\n  connection: Connection;\n  wallet: Wallet;\n  tokenAccounts: TokenAccount[];\n  markets: Market[];\n  selectedTokenAccounts?: SelectedTokenAccounts;\n}) {\n  if (!markets || !wallet || !connection || !tokenAccounts) {\n    return;\n  }\n\n  const programIds: PublicKey[] = [];\n  markets\n    .reduce((cumulative, m) => {\n      // @ts-ignore\n      cumulative.push(m._programId);\n      return cumulative;\n    }, [])\n    .forEach((programId) => {\n      if (!programIds.find((p) => p.equals(programId))) {\n        programIds.push(programId);\n      }\n    });\n\n  const getOpenOrdersAccountsForProgramId = async (programId) => {\n    const openOrdersAccounts = await OpenOrders.findForOwner(\n      connection,\n      wallet.publicKey,\n      programId,\n    );\n    return openOrdersAccounts.filter(\n      (openOrders) =>\n        openOrders.baseTokenFree.toNumber() ||\n        openOrders.quoteTokenFree.toNumber(),\n    );\n  };\n\n  const openOrdersAccountsForProgramIds = await Promise.all(\n    programIds.map((programId) => getOpenOrdersAccountsForProgramId(programId)),\n  );\n  const openOrdersAccounts = openOrdersAccountsForProgramIds.reduce(\n    (accounts, current) => accounts.concat(current),\n    [],\n  );\n\n  const settleTransactions = (\n    await Promise.all(\n      openOrdersAccounts.map((openOrdersAccount) => {\n        const market = markets.find((m) =>\n          // @ts-ignore\n          m._decoded?.ownAddress?.equals(openOrdersAccount.market),\n        );\n        const baseMint = market?.baseMintAddress;\n        const quoteMint = market?.quoteMintAddress;\n\n        const selectedBaseTokenAccount = getSelectedTokenAccountForMint(\n          tokenAccounts,\n          baseMint,\n          baseMint &&\n            selectedTokenAccounts &&\n            selectedTokenAccounts[baseMint.toBase58()],\n        )?.pubkey;\n        const selectedQuoteTokenAccount = getSelectedTokenAccountForMint(\n          tokenAccounts,\n          quoteMint,\n          quoteMint &&\n            selectedTokenAccounts &&\n            selectedTokenAccounts[quoteMint.toBase58()],\n        )?.pubkey;\n        if (!selectedBaseTokenAccount || !selectedQuoteTokenAccount) {\n          return null;\n        }\n        return (\n          market &&\n          market.makeSettleFundsTransaction(\n            connection,\n            openOrdersAccount,\n            selectedBaseTokenAccount,\n            selectedQuoteTokenAccount,\n          )\n        );\n      }),\n    )\n  ).filter(\n    (\n      x,\n    ): x is {\n      signers: Account[];\n      transaction: Transaction;\n      payer: PublicKey;\n    } => !!x,\n  );\n  if (!settleTransactions || settleTransactions.length === 0) return;\n\n  const transactions = settleTransactions.slice(0, 4).map((t) => t.transaction);\n  const signers: Array<Account> = [];\n  settleTransactions\n    .reduce((cumulative: Array<Account>, t) => cumulative.concat(t.signers), [])\n    .forEach((signer) => {\n      if (!signers.find((s) => s.publicKey.equals(signer.publicKey))) {\n        signers.push(signer);\n      }\n    });\n\n  const transaction = mergeTransactions(transactions);\n\n  return await sendTransaction({\n    transaction,\n    signers,\n    wallet,\n    connection,\n  });\n}\n\nexport async function cancelOrder(params: {\n  market: Market;\n  connection: Connection;\n  wallet: Wallet;\n  order: Order;\n}) {\n  return cancelOrders({ ...params, orders: [params.order] });\n}\n\nexport async function cancelOrders({\n  market,\n  wallet,\n  connection,\n  orders,\n}: {\n  market: Market;\n  wallet: Wallet;\n  connection: Connection;\n  orders: Order[];\n}) {\n  const transaction = market.makeMatchOrdersTransaction(5);\n  orders.forEach((order) => {\n    transaction.add(\n      market.makeCancelOrderInstruction(connection, wallet.publicKey, order),\n    );\n  });\n  transaction.add(market.makeMatchOrdersTransaction(5));\n  return await sendTransaction({\n    transaction,\n    wallet,\n    connection,\n    sendingMessage: 'Sending cancel...',\n  });\n}\n\nexport async function placeOrder({\n  side,\n  price,\n  size,\n  orderType,\n  market,\n  connection,\n  wallet,\n  baseCurrencyAccount,\n  quoteCurrencyAccount,\n  feeDiscountPubkey = undefined,\n}: {\n  side: 'buy' | 'sell';\n  price: number;\n  size: number;\n  orderType: 'ioc' | 'postOnly' | 'limit';\n  market: Market | undefined | null;\n  connection: Connection;\n  wallet: Wallet;\n  baseCurrencyAccount: PublicKey | undefined;\n  quoteCurrencyAccount: PublicKey | undefined;\n  feeDiscountPubkey: PublicKey | undefined;\n}) {\n  let formattedMinOrderSize =\n    market?.minOrderSize?.toFixed(getDecimalCount(market.minOrderSize)) ||\n    market?.minOrderSize;\n  let formattedTickSize =\n    market?.tickSize?.toFixed(getDecimalCount(market.tickSize)) ||\n    market?.tickSize;\n  const isIncrement = (num, step) =>\n    Math.abs((num / step) % 1) < 1e-5 ||\n    Math.abs(((num / step) % 1) - 1) < 1e-5;\n  if (isNaN(price)) {\n    notify({ message: 'Invalid price', type: 'error' });\n    return;\n  }\n  if (isNaN(size)) {\n    notify({ message: 'Invalid size', type: 'error' });\n    return;\n  }\n  if (!wallet || !wallet.publicKey) {\n    notify({ message: 'Connect wallet', type: 'error' });\n    return;\n  }\n  if (!market) {\n    notify({ message: 'Invalid  market', type: 'error' });\n    return;\n  }\n  if (!isIncrement(size, market.minOrderSize)) {\n    notify({\n      message: `Size must be an increment of ${formattedMinOrderSize}`,\n      type: 'error',\n    });\n    return;\n  }\n  if (size < market.minOrderSize) {\n    notify({ message: 'Size too small', type: 'error' });\n    return;\n  }\n  if (!isIncrement(price, market.tickSize)) {\n    notify({\n      message: `Price must be an increment of ${formattedTickSize}`,\n      type: 'error',\n    });\n    return;\n  }\n  if (price < market.tickSize) {\n    notify({ message: 'Price under tick size', type: 'error' });\n    return;\n  }\n  const owner = wallet.publicKey;\n  const transaction = new Transaction();\n  const signers: Account[] = [];\n\n  if (!baseCurrencyAccount) {\n    const {\n      transaction: createAccountTransaction,\n      signer: createAccountSigners,\n      newAccountPubkey,\n    } = await createTokenAccountTransaction({\n      connection,\n      wallet,\n      mintPublicKey: market.baseMintAddress,\n    });\n    transaction.add(createAccountTransaction);\n    signers.push(createAccountSigners);\n    baseCurrencyAccount = newAccountPubkey;\n  }\n  if (!quoteCurrencyAccount) {\n    const {\n      transaction: createAccountTransaction,\n      signer: createAccountSigners,\n      newAccountPubkey,\n    } = await createTokenAccountTransaction({\n      connection,\n      wallet,\n      mintPublicKey: market.quoteMintAddress,\n    });\n    transaction.add(createAccountTransaction);\n    signers.push(createAccountSigners);\n    quoteCurrencyAccount = newAccountPubkey;\n  }\n\n  const payer = side === 'sell' ? baseCurrencyAccount : quoteCurrencyAccount;\n  if (!payer) {\n    notify({\n      message: 'Need an SPL token account for cost currency',\n      type: 'error',\n    });\n    return;\n  }\n  const params = {\n    owner,\n    payer,\n    side,\n    price,\n    size,\n    orderType,\n    feeDiscountPubkey: feeDiscountPubkey || null,\n  };\n  console.log(params);\n\n  const matchOrderstransaction = market.makeMatchOrdersTransaction(5);\n  transaction.add(matchOrderstransaction);\n  const startTime = getUnixTs();\n  let {\n    transaction: placeOrderTx,\n    signers: placeOrderSigners,\n  } = await market.makePlaceOrderTransaction(\n    connection,\n    params,\n    120_000,\n    120_000,\n  );\n  const endTime = getUnixTs();\n  console.log(`Creating order transaction took ${endTime - startTime}`);\n  transaction.add(placeOrderTx);\n  transaction.add(market.makeMatchOrdersTransaction(5));\n  signers.push(...placeOrderSigners);\n\n  return await sendTransaction({\n    transaction,\n    wallet,\n    connection,\n    signers,\n    sendingMessage: 'Sending order...',\n  });\n}\n\nexport async function listMarket({\n  connection,\n  wallet,\n  baseMint,\n  quoteMint,\n  baseLotSize,\n  quoteLotSize,\n  dexProgramId,\n}: {\n  connection: Connection;\n  wallet: Wallet;\n  baseMint: PublicKey;\n  quoteMint: PublicKey;\n  baseLotSize: number;\n  quoteLotSize: number;\n  dexProgramId: PublicKey;\n}) {\n  const market = new Account();\n  const requestQueue = new Account();\n  const eventQueue = new Account();\n  const bids = new Account();\n  const asks = new Account();\n  const baseVault = new Account();\n  const quoteVault = new Account();\n  const feeRateBps = 0;\n  const quoteDustThreshold = new BN(100);\n\n  async function getVaultOwnerAndNonce() {\n    const nonce = new BN(0);\n    while (true) {\n      try {\n        const vaultOwner = await PublicKey.createProgramAddress(\n          [market.publicKey.toBuffer(), nonce.toArrayLike(Buffer, 'le', 8)],\n          dexProgramId,\n        );\n        return [vaultOwner, nonce];\n      } catch (e) {\n        nonce.iaddn(1);\n      }\n    }\n  }\n  const [vaultOwner, vaultSignerNonce] = await getVaultOwnerAndNonce();\n\n  const tx1 = new Transaction();\n  tx1.add(\n    SystemProgram.createAccount({\n      fromPubkey: wallet.publicKey,\n      newAccountPubkey: baseVault.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(165),\n      space: 165,\n      programId: TokenInstructions.TOKEN_PROGRAM_ID,\n    }),\n    SystemProgram.createAccount({\n      fromPubkey: wallet.publicKey,\n      newAccountPubkey: quoteVault.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(165),\n      space: 165,\n      programId: TokenInstructions.TOKEN_PROGRAM_ID,\n    }),\n    TokenInstructions.initializeAccount({\n      account: baseVault.publicKey,\n      mint: baseMint,\n      owner: vaultOwner,\n    }),\n    TokenInstructions.initializeAccount({\n      account: quoteVault.publicKey,\n      mint: quoteMint,\n      owner: vaultOwner,\n    }),\n  );\n\n  const tx2 = new Transaction();\n  tx2.add(\n    SystemProgram.createAccount({\n      fromPubkey: wallet.publicKey,\n      newAccountPubkey: market.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(\n        Market.getLayout(dexProgramId).span,\n      ),\n      space: Market.getLayout(dexProgramId).span,\n      programId: dexProgramId,\n    }),\n    SystemProgram.createAccount({\n      fromPubkey: wallet.publicKey,\n      newAccountPubkey: requestQueue.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(5120 + 12),\n      space: 5120 + 12,\n      programId: dexProgramId,\n    }),\n    SystemProgram.createAccount({\n      fromPubkey: wallet.publicKey,\n      newAccountPubkey: eventQueue.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(262144 + 12),\n      space: 262144 + 12,\n      programId: dexProgramId,\n    }),\n    SystemProgram.createAccount({\n      fromPubkey: wallet.publicKey,\n      newAccountPubkey: bids.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(65536 + 12),\n      space: 65536 + 12,\n      programId: dexProgramId,\n    }),\n    SystemProgram.createAccount({\n      fromPubkey: wallet.publicKey,\n      newAccountPubkey: asks.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(65536 + 12),\n      space: 65536 + 12,\n      programId: dexProgramId,\n    }),\n    DexInstructions.initializeMarket({\n      market: market.publicKey,\n      requestQueue: requestQueue.publicKey,\n      eventQueue: eventQueue.publicKey,\n      bids: bids.publicKey,\n      asks: asks.publicKey,\n      baseVault: baseVault.publicKey,\n      quoteVault: quoteVault.publicKey,\n      baseMint,\n      quoteMint,\n      baseLotSize: new BN(baseLotSize),\n      quoteLotSize: new BN(quoteLotSize),\n      feeRateBps,\n      vaultSignerNonce,\n      quoteDustThreshold,\n      programId: dexProgramId,\n    }),\n  );\n\n  const signedTransactions = await signTransactions({\n    transactionsAndSigners: [\n      { transaction: tx1, signers: [baseVault, quoteVault] },\n      {\n        transaction: tx2,\n        signers: [market, requestQueue, eventQueue, bids, asks],\n      },\n    ],\n    wallet,\n    connection,\n  });\n  for (let signedTransaction of signedTransactions) {\n    await sendSignedTransaction({\n      signedTransaction,\n      connection,\n    });\n  }\n\n  return market.publicKey;\n}\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nconst DEFAULT_TIMEOUT = 15000;\n\nexport async function sendTransaction({\n  transaction,\n  wallet,\n  signers = [],\n  connection,\n  sendingMessage = 'Sending transaction...',\n  sentMessage = 'Transaction sent',\n  successMessage = 'Transaction confirmed',\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  transaction: Transaction;\n  wallet: Wallet;\n  signers?: Array<Account>;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}) {\n  const signedTransaction = await signTransaction({\n    transaction,\n    wallet,\n    signers,\n    connection,\n  });\n  return await sendSignedTransaction({\n    signedTransaction,\n    connection,\n    sendingMessage,\n    sentMessage,\n    successMessage,\n    timeout,\n  });\n}\n\nexport async function signTransaction({\n  transaction,\n  wallet,\n  signers = [],\n  connection,\n}: {\n  transaction: Transaction;\n  wallet: Wallet;\n  signers?: Array<Account>;\n  connection: Connection;\n}) {\n  transaction.recentBlockhash = (\n    await connection.getRecentBlockhash('max')\n  ).blockhash;\n  transaction.setSigners(wallet.publicKey, ...signers.map((s) => s.publicKey));\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  return await wallet.signTransaction(transaction);\n}\n\nexport async function signTransactions({\n  transactionsAndSigners,\n  wallet,\n  connection,\n}: {\n  transactionsAndSigners: {\n    transaction: Transaction;\n    signers?: Array<Account>;\n  }[];\n  wallet: Wallet;\n  connection: Connection;\n}) {\n  const blockhash = (await connection.getRecentBlockhash('max')).blockhash;\n  transactionsAndSigners.forEach(({ transaction, signers = [] }) => {\n    transaction.recentBlockhash = blockhash;\n    transaction.setSigners(\n      wallet.publicKey,\n      ...signers.map((s) => s.publicKey),\n    );\n    if (signers?.length > 0) {\n      transaction.partialSign(...signers);\n    }\n  });\n  return await wallet.signAllTransactions(\n    transactionsAndSigners.map(({ transaction }) => transaction),\n  );\n}\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  sendingMessage = 'Sending transaction...',\n  sentMessage = 'Transaction sent',\n  successMessage = 'Transaction confirmed',\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<string> {\n  const rawTransaction = signedTransaction.serialize();\n  const startTime = getUnixTs();\n  notify({ message: sendingMessage });\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    },\n  );\n  notify({ message: sentMessage, type: 'success', txid });\n\n  console.log('Started awaiting confirmation for', txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(300);\n    }\n  })();\n  try {\n    await awaitTransactionSignatureConfirmation(txid, timeout, connection);\n  } catch (err) {\n    if (err.timeout) {\n      throw new Error('Timed out awaiting confirmation on transaction');\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, 'single')\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith('Program log: ')) {\n            throw new Error(\n              'Transaction failed: ' + line.slice('Program log: '.length),\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n  notify({ message: successMessage, type: 'success', txid });\n\n  console.log('Latency', txid, getUnixTs() - startTime);\n  return txid;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n) {\n  let done = false;\n  const result = await new Promise((resolve, reject) => {\n    (async () => {\n      setTimeout(() => {\n        if (done) {\n          return;\n        }\n        done = true;\n        console.log('Timed out for txid', txid);\n        reject({ timeout: true });\n      }, timeout);\n      try {\n        connection.onSignature(\n          txid,\n          (result) => {\n            console.log('WS confirmed', txid, result);\n            done = true;\n            if (result.err) {\n              reject(result.err);\n            } else {\n              resolve(result);\n            }\n          },\n          'recent',\n        );\n        console.log('Set up WS connection', txid);\n      } catch (e) {\n        done = true;\n        console.log('WS error in setup', txid, e);\n      }\n      while (!done) {\n        // eslint-disable-next-line no-loop-func\n        (async () => {\n          try {\n            const signatureStatuses = await connection.getSignatureStatuses([\n              txid,\n            ]);\n            const result = signatureStatuses && signatureStatuses.value[0];\n            if (!done) {\n              if (!result) {\n                console.log('REST null result for', txid, result);\n              } else if (result.err) {\n                console.log('REST error for', txid, result);\n                done = true;\n                reject(result.err);\n              } else if (!result.confirmations) {\n                console.log('REST no confirmations for', txid, result);\n              } else {\n                console.log('REST confirmation for', txid, result);\n                done = true;\n                resolve(result);\n              }\n            }\n          } catch (e) {\n            if (!done) {\n              console.log('REST connection error: txid', txid, e);\n            }\n          }\n        })();\n        await sleep(300);\n      }\n    })();\n  });\n  done = true;\n  return result;\n}\n\nfunction mergeTransactions(transactions: (Transaction | undefined)[]) {\n  const transaction = new Transaction();\n  transactions\n    .filter((t): t is Transaction => t !== undefined)\n    .forEach((t) => {\n      transaction.add(t);\n    });\n  return transaction;\n}\n\nfunction jsonRpcResult(resultDescription: any) {\n  const jsonRpcVersion = struct.literal('2.0');\n  return struct.union([\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'any',\n    }),\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'null?',\n      result: resultDescription,\n    }),\n  ]);\n}\n\nfunction jsonRpcResultAndContext(resultDescription: any) {\n  return jsonRpcResult({\n    context: struct({\n      slot: 'number',\n    }),\n    value: resultDescription,\n  });\n}\n\nconst AccountInfoResult = struct({\n  executable: 'boolean',\n  owner: 'string',\n  lamports: 'number',\n  data: 'any',\n  rentEpoch: 'number?',\n});\n\nexport const GetMultipleAccountsAndContextRpcResult = jsonRpcResultAndContext(\n  struct.array([struct.union(['null', AccountInfoResult])]),\n);\n\nexport async function getMultipleSolanaAccounts(\n  connection: Connection,\n  publicKeys: PublicKey[],\n): Promise<\n  RpcResponseAndContext<{ [key: string]: AccountInfo<Buffer> | null }>\n> {\n  const args = [publicKeys.map((k) => k.toBase58()), { commitment: 'recent' }];\n  // @ts-ignore\n  const unsafeRes = await connection._rpcRequest('getMultipleAccounts', args);\n  const res = GetMultipleAccountsAndContextRpcResult(unsafeRes);\n  if (res.error) {\n    throw new Error(\n      'failed to get info about accounts ' +\n        publicKeys.map((k) => k.toBase58()).join(', ') +\n        ': ' +\n        res.error.message,\n    );\n  }\n  assert(typeof res.result !== 'undefined');\n  const accounts: Array<{\n    executable: any;\n    owner: PublicKey;\n    lamports: any;\n    data: Buffer;\n  } | null> = [];\n  for (const account of res.result.value) {\n    let value: {\n      executable: any;\n      owner: PublicKey;\n      lamports: any;\n      data: Buffer;\n    } | null = null;\n    if (res.result.value) {\n      const { executable, owner, lamports, data } = account;\n      assert(data[1] === 'base64');\n      value = {\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n        data: Buffer.from(data[0], 'base64'),\n      };\n    }\n    accounts.push(value);\n  }\n  return {\n    context: {\n      slot: res.result.context.slot,\n    },\n    value: Object.fromEntries(\n      accounts.map((account, i) => [publicKeys[i].toBase58(), account]),\n    ),\n  };\n}\n\n/** Copy of Connection.simulateTransaction that takes a commitment parameter. */\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment,\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching,\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config: any = { encoding: 'base64', commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args);\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n  return res.result;\n}\n","import * as BufferLayout from 'buffer-layout';\nimport bs58 from 'bs58';\nimport { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\nimport { WRAPPED_SOL_MINT } from '@project-serum/serum/lib/token-instructions';\nimport { TokenAccount } from './types';\nimport { TOKEN_MINTS } from '@project-serum/serum';\nimport { useAllMarkets, useCustomMarkets, useTokenAccounts } from './markets';\nimport { getMultipleSolanaAccounts } from './send';\nimport { useConnection } from './connection';\nimport { useAsyncData } from './fetch-loop';\nimport tuple from 'immutable-tuple';\nimport BN from 'bn.js';\nimport { useMemo } from 'react';\n\nexport const ACCOUNT_LAYOUT = BufferLayout.struct([\n  BufferLayout.blob(32, 'mint'),\n  BufferLayout.blob(32, 'owner'),\n  BufferLayout.nu64('amount'),\n  BufferLayout.blob(93),\n]);\n\nexport const MINT_LAYOUT = BufferLayout.struct([\n  BufferLayout.blob(36),\n  BufferLayout.blob(8, 'supply'),\n  BufferLayout.u8('decimals'),\n  BufferLayout.u8('initialized'),\n  BufferLayout.blob(36),\n]);\n\nexport function parseTokenAccountData(\n  data: Buffer,\n): { mint: PublicKey; owner: PublicKey; amount: number } {\n  let { mint, owner, amount } = ACCOUNT_LAYOUT.decode(data);\n  return {\n    mint: new PublicKey(mint),\n    owner: new PublicKey(owner),\n    amount,\n  };\n}\n\nexport interface MintInfo {\n  decimals: number;\n  initialized: boolean;\n  supply: BN;\n}\n\nexport function parseTokenMintData(data): MintInfo {\n  let { decimals, initialized, supply } = MINT_LAYOUT.decode(data);\n  return {\n    decimals,\n    initialized: !!initialized,\n    supply: new BN(supply, 10, 'le'),\n  };\n}\n\nexport function getOwnedAccountsFilters(publicKey: PublicKey) {\n  return [\n    {\n      memcmp: {\n        offset: ACCOUNT_LAYOUT.offsetOf('owner'),\n        bytes: publicKey.toBase58(),\n      },\n    },\n    {\n      dataSize: ACCOUNT_LAYOUT.span,\n    },\n  ];\n}\n\nexport const TOKEN_PROGRAM_ID = new PublicKey(\n  'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n);\n\nexport async function getOwnedTokenAccounts(\n  connection: Connection,\n  publicKey: PublicKey,\n): Promise<Array<{ publicKey: PublicKey; accountInfo: AccountInfo<Buffer> }>> {\n  let filters = getOwnedAccountsFilters(publicKey);\n  // @ts-ignore\n  let resp = await connection._rpcRequest('getProgramAccounts', [\n    TOKEN_PROGRAM_ID.toBase58(),\n    {\n      commitment: connection.commitment,\n      filters,\n    },\n  ]);\n  if (resp.error) {\n    throw new Error(\n      'failed to get token accounts owned by ' +\n        publicKey.toBase58() +\n        ': ' +\n        resp.error.message,\n    );\n  }\n  return resp.result\n    .map(({ pubkey, account: { data, executable, owner, lamports } }) => ({\n      publicKey: new PublicKey(pubkey),\n      accountInfo: {\n        data: bs58.decode(data),\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n      },\n    }))\n    .filter(({ accountInfo }) => {\n      // TODO: remove this check once mainnet is updated\n      return filters.every((filter) => {\n        if (filter.dataSize) {\n          return accountInfo.data.length === filter.dataSize;\n        } else if (filter.memcmp) {\n          let filterBytes = bs58.decode(filter.memcmp.bytes);\n          return accountInfo.data\n            .slice(\n              filter.memcmp.offset,\n              filter.memcmp.offset + filterBytes.length,\n            )\n            .equals(filterBytes);\n        }\n        return false;\n      });\n    });\n}\n\nexport async function getTokenAccountInfo(\n  connection: Connection,\n  ownerAddress: PublicKey,\n) {\n  let [splAccounts, account] = await Promise.all([\n    getOwnedTokenAccounts(connection, ownerAddress),\n    connection.getAccountInfo(ownerAddress),\n  ]);\n  const parsedSplAccounts: TokenAccount[] = splAccounts.map(\n    ({ publicKey, accountInfo }) => {\n      return {\n        pubkey: publicKey,\n        account: accountInfo,\n        effectiveMint: parseTokenAccountData(accountInfo.data).mint,\n      };\n    },\n  );\n  return parsedSplAccounts.concat({\n    pubkey: ownerAddress,\n    account,\n    effectiveMint: WRAPPED_SOL_MINT,\n  });\n}\n\nexport function useMintToTickers(): { [mint: string]: string } {\n  const { customMarkets } = useCustomMarkets();\n  const [markets] = useAllMarkets();\n  return useMemo(() => {\n    const mintsToTickers = Object.fromEntries(\n      TOKEN_MINTS.map((mint) => [mint.address.toBase58(), mint.name]),\n    );\n    for (let market of markets || []) {\n      const customMarketInfo = customMarkets.find(\n        (customMarket) =>\n          customMarket.address === market.market.address.toBase58(),\n      );\n      if (!(market.market.baseMintAddress.toBase58() in mintsToTickers)) {\n        if (customMarketInfo) {\n          mintsToTickers[market.market.baseMintAddress.toBase58()] =\n            customMarketInfo.baseLabel || `${customMarketInfo.name}_BASE`;\n        }\n      }\n      if (!(market.market.quoteMintAddress.toBase58() in mintsToTickers)) {\n        if (customMarketInfo) {\n          mintsToTickers[market.market.quoteMintAddress.toBase58()] =\n            customMarketInfo.quoteLabel || `${customMarketInfo.name}_QUOTE`;\n        }\n      }\n    }\n    return mintsToTickers;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [markets?.length, customMarkets.length]);\n}\n\nconst _VERY_SLOW_REFRESH_INTERVAL = 5000 * 1000;\n\nexport function useMintInfos(): [\n  (\n    | {\n        [mintAddress: string]: {\n          decimals: number;\n          initialized: boolean;\n        } | null;\n      }\n    | null\n    | undefined\n  ),\n  boolean,\n] {\n  const connection = useConnection();\n  const [tokenAccounts] = useTokenAccounts();\n  const [allMarkets] = useAllMarkets();\n\n  const allMints = (tokenAccounts || [])\n    .map((account) => account.effectiveMint)\n    .concat(\n      (allMarkets || []).map((marketInfo) => marketInfo.market.baseMintAddress),\n    )\n    .concat(\n      (allMarkets || []).map(\n        (marketInfo) => marketInfo.market.quoteMintAddress,\n      ),\n    );\n  const uniqueMints = [...new Set(allMints.map((mint) => mint.toBase58()))].map(\n    (stringMint) => new PublicKey(stringMint),\n  );\n\n  const getAllMintInfo = async () => {\n    const mintInfos = await getMultipleSolanaAccounts(connection, uniqueMints);\n    return Object.fromEntries(\n      Object.entries(mintInfos.value).map(([key, accountInfo]) => [\n        key,\n        accountInfo && parseTokenMintData(accountInfo.data),\n      ]),\n    );\n  };\n\n  return useAsyncData(\n    getAllMintInfo,\n    tuple(\n      'getAllMintInfo',\n      connection,\n      (tokenAccounts || []).length,\n      (allMarkets || []).length,\n    ),\n    { refreshInterval: _VERY_SLOW_REFRESH_INTERVAL },\n  );\n}\n","import { BonfidaTrade } from './types';\n\nexport default class BonfidaApi {\n  static URL: string = 'https://serum-api.bonfida.com/';\n\n  static async get(path: string) {\n    try {\n      const response = await fetch(this.URL + path);\n      if (response.ok) {\n        const responseJson = await response.json();\n        return responseJson.success ? responseJson.data : null;\n      }\n    } catch (err) {\n      console.log(`Error fetching from Bonfida API ${path}: ${err}`);\n    }\n    return null;\n  }\n\n  static async getRecentTrades(\n    marketAddress: string,\n  ): Promise<BonfidaTrade[] | null> {\n    return BonfidaApi.get(`trades/address/${marketAddress}`);\n  }\n}\n\nexport const BONFIDA_DATA_FEED = 'https://serum-api.bonfida.com/tv';\n","import { mintTo } from '@project-serum/serum/lib/token-instructions';\nimport { PublicKey } from '@solana/web3.js';\nimport nftsJson from './nfts.json';\nimport redeemableNftsJson from './redeemable.json';\n\nenum NFT_Types {\n  VIDEO = 'VIDEO',\n  IMAGE = 'IMAGE',\n  REDEEMABLE = 'REDEEMABLE',\n}\n\nexport class NFT {\n  img: string;\n  imgSmall: string;\n  name: string;\n  supply: number;\n  mintAddress: PublicKey;\n  marketAddress: PublicKey;\n  redeembable: boolean;\n  keywords: string[];\n  type: NFT_Types;\n  redeemAddress?: PublicKey;\n  redeemDescription?: string;\n  auctionDeadLine?: string;\n  description?: string;\n  constructor(\n    img: string,\n    imgSmall: string,\n    name: string,\n    supply: number,\n    mintAddress: string,\n    marketAddress: string,\n    redeembable: boolean,\n    keywords: string[],\n    type: NFT_Types,\n    redeemAddress?: string,\n    redeemDescription?: string,\n    auctionDeadLine?: string,\n    description?: string,\n  ) {\n    this.img = img;\n    this.imgSmall = imgSmall;\n    this.name = name;\n    this.supply = supply;\n    this.mintAddress = new PublicKey(mintAddress);\n    this.marketAddress = new PublicKey(marketAddress);\n    this.redeembable = redeembable;\n    this.keywords = keywords;\n    this.type = type;\n    this.redeemAddress = redeemAddress\n      ? new PublicKey(redeemAddress)\n      : undefined;\n    this.redeemDescription = redeemDescription;\n    this.auctionDeadLine = auctionDeadLine;\n    this.description = description;\n  }\n  toJson() {\n    let nft: any = { ...this };\n    nft.mintAddress = nft.mintAddress.toBase58();\n    nft.marketAddress = nft.marketAddress.toBase58();\n    return JSON.stringify(nft, null, 2);\n  }\n}\n\n// @ts-ignore\nconst NFTS = nftsJson.map(\n  ({\n    img,\n    imgSmall,\n    name,\n    supply,\n    mintAddress,\n    marketAddress,\n    // @ts-ignore\n    redeem,\n    keywords,\n    type,\n    // @ts-ignore\n    description,\n  }) =>\n    new NFT(\n      img,\n      imgSmall,\n      name,\n      supply,\n      mintAddress,\n      marketAddress,\n      redeem,\n      keywords,\n      // @ts-ignore\n      type,\n      description,\n    ),\n);\n\nconst REDEEMABLE_NFTS = redeemableNftsJson.map(\n  ({\n    img,\n    imgSmall,\n    name,\n    supply,\n    mintAddress,\n    marketAddress,\n    // @ts-ignore\n    redeem,\n    keywords,\n    type,\n    redeemAddress,\n    redeemDescription,\n    auctionDeadLine,\n    // @ts-ignore\n    description,\n  }) =>\n    new NFT(\n      img,\n      imgSmall,\n      name,\n      supply,\n      mintAddress,\n      marketAddress,\n      redeem,\n      keywords,\n      // @ts-ignore\n      type,\n      redeemAddress,\n      redeemDescription,\n      auctionDeadLine,\n      description,\n    ),\n);\n\nexport default NFTS;\n\nexport const ALL = [...REDEEMABLE_NFTS, ...NFTS];\n\nexport const DEFAULT_NFT = new NFT(\n  'https://gateway.pinata.cloud/ipfs/QmfFrkRRv4Lanpe3dEK3p1rRdKwspZXh8kBWLXZBRJaRyy/AcstFzGGawvvdVhYV9bftr7fmBHbePUjhv53YK1W3dZo/AcstFzGGawvvdVhYV9bftr7fmBHbePUjhv53YK1W3dZo.gif',\n  'https://gateway.pinata.cloud/ipfs/QmfFrkRRv4Lanpe3dEK3p1rRdKwspZXh8kBWLXZBRJaRyy/AcstFzGGawvvdVhYV9bftr7fmBHbePUjhv53YK1W3dZo/small.mp4',\n  'LSD',\n  1,\n  'AcstFzGGawvvdVhYV9bftr7fmBHbePUjhv53YK1W3dZo',\n  'DG7rHpfmQ1CHi1KvvpTM9ffyGkZHuFXEQyPKrWXL8rCW',\n  false,\n  ['lsd', 'gif'],\n  NFT_Types.VIDEO,\n);\n\nexport const getNftList = () => {\n  return ALL;\n};\n\nexport const getRedeemableNftList = () => {\n  return REDEEMABLE_NFTS;\n};\n\nexport const getNonRedeemableNftList = () => {\n  return NFTS;\n};\n\nexport const getExceptionalStyle = (mint: PublicKey): any => {\n  switch (mint.toBase58()) {\n    case '94w8qHS4XFadqJhWZzyfAS2bbj55ReFnVYB8BwewMNmf':\n      return { top: 80 };\n    default:\n      return null;\n  }\n};\n","import {\n  decodeEventQueue,\n  Market,\n  MARKETS,\n  OpenOrders,\n  Orderbook,\n  TOKEN_MINTS as OFFICIAL_TOKENS,\n  TokenInstructions,\n} from '@project-serum/serum';\nimport { PublicKey } from '@solana/web3.js';\nimport React, { useContext, useEffect, useState } from 'react';\nimport {\n  divideBnToNumber,\n  floorToDecimal,\n  getTokenMultiplierFromDecimals,\n  useLocalStorageState,\n} from './utils';\nimport { refreshCache, useAsyncData } from './fetch-loop';\nimport { useAccountData, useAccountInfo, useConnection } from './connection';\nimport { useWallet } from './wallet';\nimport tuple from 'immutable-tuple';\nimport { notify } from './notifications';\nimport BN from 'bn.js';\nimport {\n  getTokenAccountInfo,\n  parseTokenAccountData,\n  useMintInfos,\n} from './tokens';\nimport {\n  Balances,\n  CustomMarketInfo,\n  DeprecatedOpenOrdersBalances,\n  FullMarketInfo,\n  MarketContextValues,\n  MarketInfo,\n  OrderWithMarketAndMarketName,\n  SelectedTokenAccounts,\n  TokenAccount,\n  Trade,\n} from './types';\nimport { WRAPPED_SOL_MINT } from '@project-serum/serum/lib/token-instructions';\nimport { Order } from '@project-serum/serum/lib/market';\nimport BonfidaApi from './bonfidaConnector';\nimport { getNftList } from './nfts';\n\n// Used in debugging, should be false in production\nconst _IGNORE_DEPRECATED = false;\n\nexport let USE_MARKETS: MarketInfo[] = _IGNORE_DEPRECATED\n  ? MARKETS.map((m) => ({ ...m, deprecated: false }))\n  : MARKETS;\n\nlet TOKEN_MINTS = OFFICIAL_TOKENS;\n\ngetNftList().forEach((nft) => {\n  USE_MARKETS.push({\n    name: nft.name,\n    address: nft.marketAddress,\n    programId: new PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin'),\n    deprecated: false,\n  });\n  TOKEN_MINTS.push({\n    name: nft.name,\n    address: nft.mintAddress,\n  });\n});\n\nexport function useMarketsList() {\n  return USE_MARKETS.filter(({ deprecated }) => !deprecated);\n}\n\nexport function useAllMarkets() {\n  const connection = useConnection();\n  const { customMarkets } = useCustomMarkets();\n  const [time, setTime] = useState(new Date().getTime());\n\n  const getAllMarkets = async () => {\n    const markets: Array<{\n      market: Market;\n      marketName: string;\n      programId: PublicKey;\n    } | null> = await Promise.all(\n      getMarketInfos(customMarkets).map(async (marketInfo) => {\n        try {\n          const market = await Market.load(\n            connection,\n            marketInfo.address,\n            {},\n            marketInfo.programId,\n          );\n          return {\n            market,\n            marketName: marketInfo.name,\n            programId: marketInfo.programId,\n          };\n        } catch (err) {\n          const now = new Date().getTime();\n          if (now - time > 60 * 1_000) {\n            notify({\n              message: 'Error loading all market',\n              description: err.message,\n              type: 'error',\n            });\n          }\n          console.warn(`Error loading all markets - ${err.message}`);\n          return null;\n        }\n      }),\n    );\n    return markets.filter(\n      (m): m is { market: Market; marketName: string; programId: PublicKey } =>\n        !!m,\n    );\n  };\n  return useAsyncData(\n    getAllMarkets,\n    tuple('getAllMarkets', customMarkets.length, connection),\n    { refreshInterval: _VERY_SLOW_REFRESH_INTERVAL },\n  );\n}\n\nexport function useUnmigratedOpenOrdersAccounts() {\n  const connection = useConnection();\n  const { wallet } = useWallet();\n\n  async function getUnmigratedOpenOrdersAccounts(): Promise<OpenOrders[]> {\n    if (!wallet || !connection || !wallet.publicKey) {\n      return [];\n    }\n    console.log('refreshing useUnmigratedOpenOrdersAccounts');\n    let deprecatedOpenOrdersAccounts: OpenOrders[] = [];\n    const deprecatedProgramIds = Array.from(\n      new Set(\n        USE_MARKETS.filter(\n          ({ deprecated }) => deprecated,\n        ).map(({ programId }) => programId.toBase58()),\n      ),\n    ).map((publicKeyStr) => new PublicKey(publicKeyStr));\n    let programId: PublicKey;\n    for (programId of deprecatedProgramIds) {\n      try {\n        const openOrdersAccounts = await OpenOrders.findForOwner(\n          connection,\n          wallet.publicKey,\n          programId,\n        );\n        deprecatedOpenOrdersAccounts = deprecatedOpenOrdersAccounts.concat(\n          openOrdersAccounts\n            .filter(\n              (openOrders) =>\n                openOrders.baseTokenTotal.toNumber() ||\n                openOrders.quoteTokenTotal.toNumber(),\n            )\n            .filter((openOrders) =>\n              USE_MARKETS.some(\n                (market) =>\n                  market.deprecated && market.address.equals(openOrders.market),\n              ),\n            ),\n        );\n      } catch (e) {\n        console.log(\n          'Error loading deprecated markets',\n          programId?.toBase58(),\n          e.message,\n        );\n      }\n    }\n    // Maybe sort\n    return deprecatedOpenOrdersAccounts;\n  }\n\n  const cacheKey = tuple(\n    'getUnmigratedOpenOrdersAccounts',\n    connection,\n    wallet?.publicKey?.toBase58(),\n  );\n  const [accounts] = useAsyncData(getUnmigratedOpenOrdersAccounts, cacheKey, {\n    refreshInterval: _VERY_SLOW_REFRESH_INTERVAL,\n  });\n\n  return {\n    accounts,\n    refresh: (clearCache: boolean) => refreshCache(cacheKey, clearCache),\n  };\n}\n\nconst MarketContext: React.Context<null | MarketContextValues> = React.createContext<null | MarketContextValues>(\n  null,\n);\n\nconst _VERY_SLOW_REFRESH_INTERVAL = 5000 * 1000;\n\n// For things that don't really change\nconst _SLOW_REFRESH_INTERVAL = 5 * 1000;\n\n// For things that change frequently\nconst _FAST_REFRESH_INTERVAL = 1000;\n\nexport const DEFAULT_MARKET = USE_MARKETS.find(\n  ({ name, deprecated }) => name === 'SRM/USDT' && !deprecated,\n);\n\nexport function getMarketDetails(\n  market: Market | undefined | null,\n  customMarkets: CustomMarketInfo[],\n): FullMarketInfo {\n  if (!market) {\n    return {};\n  }\n  const marketInfos = getMarketInfos(customMarkets);\n  const marketInfo = marketInfos.find((otherMarket) =>\n    otherMarket.address.equals(market.address),\n  );\n  const baseCurrency =\n    (market?.baseMintAddress &&\n      TOKEN_MINTS.find((token) => token.address.equals(market.baseMintAddress))\n        ?.name) ||\n    (marketInfo?.baseLabel && `${marketInfo?.baseLabel}*`) ||\n    'UNKNOWN';\n  const quoteCurrency =\n    (market?.quoteMintAddress &&\n      TOKEN_MINTS.find((token) => token.address.equals(market.quoteMintAddress))\n        ?.name) ||\n    (marketInfo?.quoteLabel && `${marketInfo?.quoteLabel}*`) ||\n    'UNKNOWN';\n\n  return {\n    ...marketInfo,\n    marketName: marketInfo?.name,\n    baseCurrency,\n    quoteCurrency,\n    marketInfo,\n  };\n}\n\nexport function useCustomMarkets() {\n  const [customMarkets, setCustomMarkets] = useLocalStorageState<\n    CustomMarketInfo[]\n  >('customMarkets', []);\n  return { customMarkets, setCustomMarkets };\n}\n\nexport function MarketProvider({ marketAddress, setMarketAddress, children }) {\n  const { customMarkets, setCustomMarkets } = useCustomMarkets();\n\n  const address = marketAddress && new PublicKey(marketAddress);\n  const connection = useConnection();\n  const marketInfos = getMarketInfos(customMarkets);\n  const marketInfo =\n    address && marketInfos.find((market) => market.address.equals(address));\n\n  // Replace existing market with a non-deprecated one on first load\n  useEffect(() => {\n    if (marketInfo && marketInfo.deprecated) {\n      console.log('Switching markets from deprecated', marketInfo);\n      if (DEFAULT_MARKET) {\n        setMarketAddress(DEFAULT_MARKET.address.toBase58());\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const [market, setMarket] = useState<Market | null>();\n  useEffect(() => {\n    if (\n      market &&\n      marketInfo &&\n      // @ts-ignore\n      market._decoded.ownAddress?.equals(marketInfo?.address)\n    ) {\n      return;\n    }\n    setMarket(null);\n    if (!marketInfo || !marketInfo.address) {\n      notify({\n        message: 'Error loading market',\n        description: 'Please select a market from the dropdown',\n        type: 'error',\n      });\n      return;\n    }\n    Market.load(connection, marketInfo.address, {}, marketInfo.programId)\n      .then(setMarket)\n      .catch((e) =>\n        notify({\n          message: 'Error loading market',\n          description: e.message,\n          type: 'error',\n        }),\n      );\n    // eslint-disable-next-line\n  }, [connection, marketInfo]);\n\n  return (\n    <MarketContext.Provider\n      value={{\n        market,\n        ...getMarketDetails(market, customMarkets),\n        setMarketAddress,\n        customMarkets,\n        setCustomMarkets,\n      }}\n    >\n      {children}\n    </MarketContext.Provider>\n  );\n}\n\nexport function getTradePageUrl(marketAddress?: string) {\n  if (!marketAddress) {\n    const saved = localStorage.getItem('marketAddress');\n    if (saved) {\n      marketAddress = JSON.parse(saved);\n    }\n    marketAddress = marketAddress || DEFAULT_MARKET?.address.toBase58() || '';\n  }\n  return `/market/${marketAddress}`;\n}\n\nexport function useSelectedTokenAccounts(): [\n  SelectedTokenAccounts,\n  (newSelectedTokenAccounts: SelectedTokenAccounts) => void,\n] {\n  const [\n    selectedTokenAccounts,\n    setSelectedTokenAccounts,\n  ] = useLocalStorageState<SelectedTokenAccounts>('selectedTokenAccounts', {});\n  return [selectedTokenAccounts, setSelectedTokenAccounts];\n}\n\nexport function useMarket() {\n  const context = useContext(MarketContext);\n  if (!context) {\n    throw new Error('Missing market context');\n  }\n  return context;\n}\n\nexport function useMarkPrice() {\n  const [markPrice, setMarkPrice] = useState<null | number>(null);\n\n  const [orderbook] = useOrderbook();\n  const trades = useTrades();\n\n  useEffect(() => {\n    let bb = orderbook?.bids?.length > 0 && Number(orderbook.bids[0][0]);\n    let ba = orderbook?.asks?.length > 0 && Number(orderbook.asks[0][0]);\n    let last = trades && trades.length > 0 && trades[0].price;\n\n    let markPrice =\n      bb && ba\n        ? last\n          ? [bb, ba, last].sort((a, b) => a - b)[1]\n          : (bb + ba) / 2\n        : null;\n\n    setMarkPrice(markPrice);\n  }, [orderbook, trades]);\n\n  return markPrice;\n}\n\nexport function _useUnfilteredTrades(limit = 10000) {\n  const { market } = useMarket();\n  const connection = useConnection();\n  async function getUnfilteredTrades(): Promise<any[] | null> {\n    if (!market || !connection) {\n      return null;\n    }\n    return await market.loadFills(connection, limit);\n  }\n  const [trades] = useAsyncData(\n    getUnfilteredTrades,\n    tuple('getUnfilteredTrades', market, connection),\n    { refreshInterval: _SLOW_REFRESH_INTERVAL },\n  );\n  return trades;\n  // NOTE: For now, websocket is too expensive since the event queue is large\n  // and updates very frequently\n\n  // let data = useAccountData(market && market._decoded.eventQueue);\n  // if (!data) {\n  //   return null;\n  // }\n  // const events = decodeEventQueue(data, limit);\n  // return events\n  //   .filter((event) => event.eventFlags.fill && event.nativeQuantityPaid.gtn(0))\n  //   .map(market.parseFillEvent.bind(market));\n}\n\nexport function useBonfidaTrades() {\n  const { market } = useMarket();\n  const marketAddress = market?.address.toBase58();\n\n  async function getBonfidaTrades() {\n    if (!marketAddress) {\n      return null;\n    }\n    return await BonfidaApi.getRecentTrades(marketAddress);\n  }\n\n  return useAsyncData(\n    getBonfidaTrades,\n    tuple('getBonfidaTrades', marketAddress),\n    { refreshInterval: _SLOW_REFRESH_INTERVAL },\n    false,\n  );\n}\n\nexport function useOrderbookAccounts() {\n  const { market } = useMarket();\n  // @ts-ignore\n  let bidData = useAccountData(market && market._decoded.bids);\n  // @ts-ignore\n  let askData = useAccountData(market && market._decoded.asks);\n  return {\n    bidOrderbook: market && bidData ? Orderbook.decode(market, bidData) : null,\n    askOrderbook: market && askData ? Orderbook.decode(market, askData) : null,\n  };\n}\n\nexport function useOrderbook(\n  depth = 20,\n): [{ bids: number[][]; asks: number[][] }, boolean] {\n  const { bidOrderbook, askOrderbook } = useOrderbookAccounts();\n  const { market } = useMarket();\n  const bids =\n    !bidOrderbook || !market\n      ? []\n      : bidOrderbook.getL2(depth).map(([price, size]) => [price, size]);\n  const asks =\n    !askOrderbook || !market\n      ? []\n      : askOrderbook.getL2(depth).map(([price, size]) => [price, size]);\n  return [{ bids, asks }, !!bids || !!asks];\n}\n\n// Want the balances table to be fast-updating, dont want open orders to flicker\n// TODO: Update to use websocket\nexport function useOpenOrdersAccounts(fast = false) {\n  const { market } = useMarket();\n  const { connected, wallet } = useWallet();\n  const connection = useConnection();\n  async function getOpenOrdersAccounts() {\n    if (!connected) {\n      return null;\n    }\n    if (!market) {\n      return null;\n    }\n    return await market.findOpenOrdersAccountsForOwner(\n      connection,\n      wallet.publicKey,\n    );\n  }\n  return useAsyncData(\n    getOpenOrdersAccounts,\n    tuple('getOpenOrdersAccounts', wallet, market, connected),\n    { refreshInterval: fast ? _FAST_REFRESH_INTERVAL : _SLOW_REFRESH_INTERVAL },\n  );\n}\n\nexport function useSelectedOpenOrdersAccount(fast = false) {\n  const [accounts] = useOpenOrdersAccounts(fast);\n  if (!accounts) {\n    return null;\n  }\n  return accounts[0];\n}\n\nexport function useTokenAccounts(): [\n  TokenAccount[] | null | undefined,\n  boolean,\n] {\n  const { connected, wallet } = useWallet();\n  const connection = useConnection();\n  async function getTokenAccounts() {\n    if (!connected) {\n      return null;\n    }\n    return await getTokenAccountInfo(connection, wallet.publicKey);\n  }\n  return useAsyncData(\n    getTokenAccounts,\n    tuple('getTokenAccounts', wallet, connected),\n    { refreshInterval: _SLOW_REFRESH_INTERVAL },\n  );\n}\n\nexport function getSelectedTokenAccountForMint(\n  accounts: TokenAccount[] | undefined | null,\n  mint: PublicKey | undefined,\n  selectedPubKey?: string | PublicKey | null,\n) {\n  if (!accounts || !mint) {\n    return null;\n  }\n  const filtered = accounts.filter(\n    ({ effectiveMint, pubkey }) =>\n      mint.equals(effectiveMint) &&\n      (!selectedPubKey ||\n        (typeof selectedPubKey === 'string'\n          ? selectedPubKey\n          : selectedPubKey.toBase58()) === pubkey.toBase58()),\n  );\n  return filtered && filtered[0];\n}\n\nexport function useSelectedQuoteCurrencyAccount() {\n  const [accounts] = useTokenAccounts();\n  const { market } = useMarket();\n  const [selectedTokenAccounts] = useSelectedTokenAccounts();\n  const mintAddress = market?.quoteMintAddress;\n  return getSelectedTokenAccountForMint(\n    accounts,\n    mintAddress,\n    mintAddress && selectedTokenAccounts[mintAddress.toBase58()],\n  );\n}\n\nexport function useSelectedBaseCurrencyAccount() {\n  const [accounts] = useTokenAccounts();\n  const { market } = useMarket();\n  const [selectedTokenAccounts] = useSelectedTokenAccounts();\n  const mintAddress = market?.baseMintAddress;\n  return getSelectedTokenAccountForMint(\n    accounts,\n    mintAddress,\n    mintAddress && selectedTokenAccounts[mintAddress.toBase58()],\n  );\n}\n\n// TODO: Update to use websocket\nexport function useSelectedQuoteCurrencyBalances() {\n  const quoteCurrencyAccount = useSelectedQuoteCurrencyAccount();\n  const { market } = useMarket();\n  const [accountInfo, loaded] = useAccountInfo(quoteCurrencyAccount?.pubkey);\n  if (!market || !quoteCurrencyAccount || !loaded || !accountInfo) {\n    return null;\n  }\n  if (market.quoteMintAddress.equals(TokenInstructions.WRAPPED_SOL_MINT)) {\n    return accountInfo?.lamports / 1e9 ?? 0;\n  }\n  return market.quoteSplSizeToNumber(\n    new BN(accountInfo.data.slice(64, 72), 10, 'le'),\n  );\n}\n\n// TODO: Update to use websocket\nexport function useSelectedBaseCurrencyBalances() {\n  const baseCurrencyAccount = useSelectedBaseCurrencyAccount();\n  const { market } = useMarket();\n  const [accountInfo, loaded] = useAccountInfo(baseCurrencyAccount?.pubkey);\n  if (!market || !baseCurrencyAccount || !loaded || !accountInfo) {\n    return null;\n  }\n  if (market.baseMintAddress.equals(TokenInstructions.WRAPPED_SOL_MINT)) {\n    return accountInfo?.lamports / 1e9 ?? 0;\n  }\n  return market.baseSplSizeToNumber(\n    new BN(accountInfo.data.slice(64, 72), 10, 'le'),\n  );\n}\n\nexport function useOpenOrders() {\n  const { market, marketName } = useMarket();\n  const openOrdersAccount = useSelectedOpenOrdersAccount();\n  const { bidOrderbook, askOrderbook } = useOrderbookAccounts();\n  if (!market || !openOrdersAccount || !bidOrderbook || !askOrderbook) {\n    return null;\n  }\n  return market\n    .filterForOpenOrders(bidOrderbook, askOrderbook, [openOrdersAccount])\n    .map((order) => ({ ...order, marketName, market }));\n}\n\nexport function useTrades(limit = 100) {\n  const trades = _useUnfilteredTrades(limit);\n  if (!trades) {\n    return null;\n  }\n  // Until partial fills are each given their own fill, use maker fills\n  return trades\n    .filter(({ eventFlags }) => eventFlags.maker)\n    .map((trade) => ({\n      ...trade,\n      side: trade.side === 'buy' ? 'sell' : 'buy',\n    }));\n}\n\nexport function useLocallyStoredFeeDiscountKey(): {\n  storedFeeDiscountKey: PublicKey | undefined;\n  setStoredFeeDiscountKey: (key: string) => void;\n} {\n  const [\n    storedFeeDiscountKey,\n    setStoredFeeDiscountKey,\n  ] = useLocalStorageState<string>(`feeDiscountKey`, undefined);\n  return {\n    storedFeeDiscountKey: storedFeeDiscountKey\n      ? new PublicKey(storedFeeDiscountKey)\n      : undefined,\n    setStoredFeeDiscountKey,\n  };\n}\n\nexport function useFeeDiscountKeys(): [\n  (\n    | {\n        pubkey: PublicKey;\n        feeTier: number;\n        balance: number;\n        mint: PublicKey;\n      }[]\n    | null\n    | undefined\n  ),\n  boolean,\n] {\n  const { market } = useMarket();\n  const { connected, wallet } = useWallet();\n  const connection = useConnection();\n  const { setStoredFeeDiscountKey } = useLocallyStoredFeeDiscountKey();\n  let getFeeDiscountKeys = async () => {\n    if (!connected) {\n      return null;\n    }\n    if (!market) {\n      return null;\n    }\n    const feeDiscountKey = await market.findFeeDiscountKeys(\n      connection,\n      wallet.publicKey,\n    );\n    if (feeDiscountKey) {\n      setStoredFeeDiscountKey(feeDiscountKey[0].pubkey.toBase58());\n    }\n    return feeDiscountKey;\n  };\n  return useAsyncData(\n    getFeeDiscountKeys,\n    tuple('getFeeDiscountKeys', wallet, market, connected),\n    { refreshInterval: _SLOW_REFRESH_INTERVAL },\n  );\n}\n\nexport function useFills(limit = 100) {\n  const { marketName } = useMarket();\n  const fills = _useUnfilteredTrades(limit);\n  const [openOrdersAccounts] = useOpenOrdersAccounts();\n  if (!openOrdersAccounts || openOrdersAccounts.length === 0) {\n    return null;\n  }\n  if (!fills) {\n    return null;\n  }\n  return fills\n    .filter((fill) =>\n      openOrdersAccounts.some((openOrdersAccount) =>\n        fill.openOrders.equals(openOrdersAccount.publicKey),\n      ),\n    )\n    .map((fill) => ({ ...fill, marketName }));\n}\n\n// TODO: Update to use websocket\nexport function useFillsForAllMarkets(limit = 100) {\n  const { connected, wallet } = useWallet();\n\n  const connection = useConnection();\n  const allMarkets = useAllMarkets();\n\n  async function getFillsForAllMarkets() {\n    let fills: Trade[] = [];\n    if (!connected) {\n      return fills;\n    }\n\n    let marketData;\n    for (marketData of allMarkets) {\n      const { market, marketName } = marketData;\n      if (!market) {\n        return fills;\n      }\n      const openOrdersAccounts = await market.findOpenOrdersAccountsForOwner(\n        connection,\n        wallet.publicKey,\n      );\n      const openOrdersAccount = openOrdersAccounts && openOrdersAccounts[0];\n      if (!openOrdersAccount) {\n        return fills;\n      }\n      const eventQueueData = await connection.getAccountInfo(\n        market && market._decoded.eventQueue,\n      );\n      let data = eventQueueData?.data;\n      if (!data) {\n        return fills;\n      }\n      const events = decodeEventQueue(data, limit);\n      const fillsForMarket: Trade[] = events\n        .filter(\n          (event) => event.eventFlags.fill && event.nativeQuantityPaid.gtn(0),\n        )\n        .map(market.parseFillEvent.bind(market));\n      const ownFillsForMarket = fillsForMarket\n        .filter((fill) => fill.openOrders.equals(openOrdersAccount.publicKey))\n        .map((fill) => ({ ...fill, marketName }));\n      fills = fills.concat(ownFillsForMarket);\n    }\n\n    console.log(JSON.stringify(fills));\n    return fills;\n  }\n\n  return useAsyncData(\n    getFillsForAllMarkets,\n    tuple('getFillsForAllMarkets', connected, connection, allMarkets, wallet),\n    { refreshInterval: _FAST_REFRESH_INTERVAL },\n  );\n}\n\nexport function useAllOpenOrdersAccounts() {\n  const { wallet, connected } = useWallet();\n  const connection = useConnection();\n  const marketInfos = useMarketInfos();\n  const programIds = [\n    ...new Set(marketInfos.map((info) => info.programId.toBase58())),\n  ].map((stringProgramId) => new PublicKey(stringProgramId));\n\n  const getAllOpenOrdersAccounts = async () => {\n    if (!connected) {\n      return [];\n    }\n    return (\n      await Promise.all(\n        programIds.map((programId) =>\n          OpenOrders.findForOwner(connection, wallet.publicKey, programId),\n        ),\n      )\n    ).flat();\n  };\n  return useAsyncData(\n    getAllOpenOrdersAccounts,\n    tuple(\n      'getAllOpenOrdersAccounts',\n      connection,\n      connected,\n      wallet?.publicKey?.toBase58(),\n      marketInfos.length,\n      (programIds || []).length,\n    ),\n    { refreshInterval: _SLOW_REFRESH_INTERVAL },\n  );\n}\n\nexport function useAllOpenOrdersBalances() {\n  const [\n    openOrdersAccounts,\n    loadedOpenOrdersAccounts,\n  ] = useAllOpenOrdersAccounts();\n  const [mintInfos, mintInfosConnected] = useMintInfos();\n  const [allMarkets] = useAllMarkets();\n  if (!loadedOpenOrdersAccounts || !mintInfosConnected) {\n    return {};\n  }\n\n  const marketsByAddress = Object.fromEntries(\n    (allMarkets || []).map((m) => [m.market.address.toBase58(), m]),\n  );\n  const openOrdersBalances: {\n    [mint: string]: { market: PublicKey; free: number; total: number }[];\n  } = {};\n  for (let account of openOrdersAccounts || []) {\n    const marketInfo = marketsByAddress[account.market.toBase58()];\n    const baseMint = marketInfo?.market.baseMintAddress.toBase58();\n    const quoteMint = marketInfo?.market.quoteMintAddress.toBase58();\n    if (!(baseMint in openOrdersBalances)) {\n      openOrdersBalances[baseMint] = [];\n    }\n    if (!(quoteMint in openOrdersBalances)) {\n      openOrdersBalances[quoteMint] = [];\n    }\n\n    const baseMintInfo = mintInfos && mintInfos[baseMint];\n    const baseFree = divideBnToNumber(\n      new BN(account.baseTokenFree),\n      getTokenMultiplierFromDecimals(baseMintInfo?.decimals || 0),\n    );\n    const baseTotal = divideBnToNumber(\n      new BN(account.baseTokenTotal),\n      getTokenMultiplierFromDecimals(baseMintInfo?.decimals || 0),\n    );\n    const quoteMintInfo = mintInfos && mintInfos[quoteMint];\n    const quoteFree = divideBnToNumber(\n      new BN(account.quoteTokenFree),\n      getTokenMultiplierFromDecimals(quoteMintInfo?.decimals || 0),\n    );\n    const quoteTotal = divideBnToNumber(\n      new BN(account.quoteTokenTotal),\n      getTokenMultiplierFromDecimals(quoteMintInfo?.decimals || 0),\n    );\n\n    openOrdersBalances[baseMint].push({\n      market: account.market,\n      free: baseFree,\n      total: baseTotal,\n    });\n    openOrdersBalances[quoteMint].push({\n      market: account.market,\n      free: quoteFree,\n      total: quoteTotal,\n    });\n  }\n  return openOrdersBalances;\n}\n\nexport function useAllOpenOrders(): {\n  openOrders: { orders: Order[]; marketAddress: string }[] | null | undefined;\n  loaded: boolean;\n  refreshOpenOrders: () => void;\n} {\n  const connection = useConnection();\n  const { connected } = useWallet();\n  const [\n    openOrdersAccounts,\n    openOrdersAccountsConnected,\n  ] = useAllOpenOrdersAccounts();\n  const [marketInfos, marketInfosConnected] = useAllMarkets();\n  const openOrdersAccountsByAddress: {\n    [marketAddress: string]: OpenOrders[];\n  } = {};\n  for (let account of openOrdersAccounts || []) {\n    const marketsAddr = account.market.toBase58();\n    if (!(marketsAddr in openOrdersAccountsByAddress)) {\n      openOrdersAccountsByAddress[marketsAddr] = [];\n    }\n    openOrdersAccountsByAddress[marketsAddr].push(account);\n  }\n  const marketsByAddress = Object.fromEntries(\n    (marketInfos || []).map((info) => [info.market.publicKey.toBase58(), info]),\n  );\n  const getAllOpenOrders = async () => {\n    return await Promise.all(\n      Object.keys(openOrdersAccountsByAddress).map(async (marketAddr) => {\n        const market = marketsByAddress[marketAddr].market;\n        const [bids, asks] = await Promise.all([\n          market.loadBids(connection),\n          market.loadAsks(connection),\n        ]);\n        return {\n          orders: market.filterForOpenOrders(\n            bids,\n            asks,\n            openOrdersAccountsByAddress[marketAddr],\n          ),\n          marketAddress: marketAddr,\n        };\n      }),\n    );\n  };\n  const cacheKey = tuple(\n    'getAllOpenOrders',\n    openOrdersAccountsConnected,\n    (openOrdersAccounts || []).length,\n    connection,\n    connected,\n    marketInfosConnected,\n  );\n  const [openOrders, loaded] = useAsyncData(getAllOpenOrders, cacheKey, {\n    refreshInterval: _VERY_SLOW_REFRESH_INTERVAL,\n  });\n  return {\n    openOrders,\n    loaded,\n    refreshOpenOrders: () => refreshCache(cacheKey),\n  };\n}\n\nexport function useBalances(): Balances[] {\n  const baseCurrencyBalances = useSelectedBaseCurrencyBalances();\n  const quoteCurrencyBalances = useSelectedQuoteCurrencyBalances();\n  const openOrders = useSelectedOpenOrdersAccount(true);\n  const { baseCurrency, quoteCurrency, market } = useMarket();\n  const baseExists =\n    openOrders && openOrders.baseTokenTotal && openOrders.baseTokenFree;\n  const quoteExists =\n    openOrders && openOrders.quoteTokenTotal && openOrders.quoteTokenFree;\n  if (\n    baseCurrency === 'UNKNOWN' ||\n    quoteCurrency === 'UNKNOWN' ||\n    !baseCurrency ||\n    !quoteCurrency\n  ) {\n    return [];\n  }\n  return [\n    {\n      market,\n      key: `${baseCurrency}${quoteCurrency}${baseCurrency}`,\n      coin: baseCurrency,\n      wallet: baseCurrencyBalances,\n      orders:\n        baseExists && market && openOrders\n          ? market.baseSplSizeToNumber(\n              openOrders.baseTokenTotal.sub(openOrders.baseTokenFree),\n            )\n          : null,\n      openOrders,\n      unsettled:\n        baseExists && market && openOrders\n          ? market.baseSplSizeToNumber(openOrders.baseTokenFree)\n          : null,\n    },\n    {\n      market,\n      key: `${quoteCurrency}${baseCurrency}${quoteCurrency}`,\n      coin: quoteCurrency,\n      wallet: quoteCurrencyBalances,\n      openOrders,\n      orders:\n        quoteExists && market && openOrders\n          ? market.quoteSplSizeToNumber(\n              openOrders.quoteTokenTotal.sub(openOrders.quoteTokenFree),\n            )\n          : null,\n      unsettled:\n        quoteExists && market && openOrders\n          ? market.quoteSplSizeToNumber(openOrders.quoteTokenFree)\n          : null,\n    },\n  ];\n}\n\nexport function useWalletBalancesForAllMarkets(): {\n  mint: string;\n  balance: number;\n}[] {\n  const [tokenAccounts] = useTokenAccounts();\n  const { connected } = useWallet();\n  const [mintInfos, mintInfosConnected] = useMintInfos();\n\n  if (!connected || !mintInfosConnected) {\n    return [];\n  }\n\n  let balances: { [mint: string]: number } = {};\n  for (let account of tokenAccounts || []) {\n    if (!account.account) {\n      continue;\n    }\n    let parsedAccount;\n    if (account.effectiveMint.equals(WRAPPED_SOL_MINT)) {\n      parsedAccount = {\n        mint: WRAPPED_SOL_MINT,\n        owner: account.pubkey,\n        amount: account.account.lamports,\n      };\n    } else {\n      parsedAccount = parseTokenAccountData(account.account.data);\n    }\n    if (!(parsedAccount.mint.toBase58() in balances)) {\n      balances[parsedAccount.mint.toBase58()] = 0;\n    }\n    const mintInfo = mintInfos && mintInfos[parsedAccount.mint.toBase58()];\n    const additionalAmount = divideBnToNumber(\n      new BN(parsedAccount.amount),\n      getTokenMultiplierFromDecimals(mintInfo?.decimals || 0),\n    );\n    balances[parsedAccount.mint.toBase58()] += additionalAmount;\n  }\n  return Object.entries(balances).map(([mint, balance]) => {\n    return { mint, balance };\n  });\n}\n\nexport function useUnmigratedDeprecatedMarkets() {\n  const connection = useConnection();\n  const { accounts } = useUnmigratedOpenOrdersAccounts();\n  const marketsList =\n    accounts &&\n    Array.from(new Set(accounts.map((openOrders) => openOrders.market)));\n  const deps = marketsList && marketsList.map((m) => m.toBase58());\n\n  const useUnmigratedDeprecatedMarketsInner = async () => {\n    if (!marketsList) {\n      return null;\n    }\n    const getMarket = async (address) => {\n      const marketInfo = USE_MARKETS.find((market) =>\n        market.address.equals(address),\n      );\n      if (!marketInfo) {\n        console.log('Failed loading market');\n        notify({\n          message: 'Error loading market',\n          type: 'error',\n        });\n        return null;\n      }\n      try {\n        console.log('Loading market', marketInfo.name);\n        // NOTE: Should this just be cached by (connection, marketInfo.address, marketInfo.programId)?\n        return await Market.load(\n          connection,\n          marketInfo.address,\n          {},\n          marketInfo.programId,\n        );\n      } catch (e) {\n        console.log('Failed loading market', marketInfo.name, e);\n        notify({\n          message: 'Error loading market',\n          description: e.message,\n          type: 'error',\n        });\n        return null;\n      }\n    };\n    return (await Promise.all(marketsList.map(getMarket))).filter((x) => x);\n  };\n  const [markets] = useAsyncData(\n    useUnmigratedDeprecatedMarketsInner,\n    tuple(\n      'useUnmigratedDeprecatedMarketsInner',\n      connection,\n      deps && deps.toString(),\n    ),\n    { refreshInterval: _VERY_SLOW_REFRESH_INTERVAL },\n  );\n  if (!markets) {\n    return null;\n  }\n  return markets.map((market) => ({\n    market,\n    openOrdersList: accounts?.filter(\n      (openOrders) => market && openOrders.market.equals(market.address),\n    ),\n  }));\n}\n\nexport function useGetOpenOrdersForDeprecatedMarkets(): {\n  openOrders: OrderWithMarketAndMarketName[] | null | undefined;\n  loaded: boolean;\n  refreshOpenOrders: () => void;\n} {\n  const { connected, wallet } = useWallet();\n  const { customMarkets } = useCustomMarkets();\n  const connection = useConnection();\n  const marketsAndOrders = useUnmigratedDeprecatedMarkets();\n  const marketsList =\n    marketsAndOrders && marketsAndOrders.map(({ market }) => market);\n\n  // This isn't quite right: open order balances could change\n  const deps =\n    marketsList &&\n    marketsList\n      .filter((market): market is Market => !!market)\n      .map((market) => market.address.toBase58());\n\n  async function getOpenOrdersForDeprecatedMarkets() {\n    if (!connected) {\n      return null;\n    }\n    if (!marketsList) {\n      return null;\n    }\n    console.log('refreshing getOpenOrdersForDeprecatedMarkets');\n    const getOrders = async (market: Market | null) => {\n      if (!market) {\n        return null;\n      }\n      const { marketName } = getMarketDetails(market, customMarkets);\n      try {\n        console.log('Fetching open orders for', marketName);\n        // Can do better than this, we have the open orders accounts already\n        return (\n          await market.loadOrdersForOwner(connection, wallet.publicKey)\n        ).map((order) => ({ marketName, market, ...order }));\n      } catch (e) {\n        console.log('Failed loading open orders', market.address.toBase58(), e);\n        notify({\n          message: `Error loading open orders for deprecated ${marketName}`,\n          description: e.message,\n          type: 'error',\n        });\n        return null;\n      }\n    };\n    return (await Promise.all(marketsList.map(getOrders)))\n      .filter((x): x is OrderWithMarketAndMarketName[] => !!x)\n      .flat();\n  }\n\n  const cacheKey = tuple(\n    'getOpenOrdersForDeprecatedMarkets',\n    connected,\n    connection,\n    wallet,\n    deps && deps.toString(),\n  );\n  const [openOrders, loaded] = useAsyncData(\n    getOpenOrdersForDeprecatedMarkets,\n    cacheKey,\n    {\n      refreshInterval: _VERY_SLOW_REFRESH_INTERVAL,\n    },\n  );\n  console.log('openOrders', openOrders);\n  return {\n    openOrders,\n    loaded,\n    refreshOpenOrders: () => refreshCache(cacheKey),\n  };\n}\n\nexport function useBalancesForDeprecatedMarkets() {\n  const markets = useUnmigratedDeprecatedMarkets();\n  const [customMarkets] = useLocalStorageState<CustomMarketInfo[]>(\n    'customMarkets',\n    [],\n  );\n  if (!markets) {\n    return null;\n  }\n\n  const openOrderAccountBalances: DeprecatedOpenOrdersBalances[] = [];\n  markets.forEach(({ market, openOrdersList }) => {\n    const { baseCurrency, quoteCurrency, marketName } = getMarketDetails(\n      market,\n      customMarkets,\n    );\n    if (!baseCurrency || !quoteCurrency || !market) {\n      return;\n    }\n    (openOrdersList || []).forEach((openOrders) => {\n      const inOrdersBase =\n        openOrders?.baseTokenTotal &&\n        openOrders?.baseTokenFree &&\n        market.baseSplSizeToNumber(\n          openOrders.baseTokenTotal.sub(openOrders.baseTokenFree),\n        );\n      const inOrdersQuote =\n        openOrders?.quoteTokenTotal &&\n        openOrders?.quoteTokenFree &&\n        market.baseSplSizeToNumber(\n          openOrders.quoteTokenTotal.sub(openOrders.quoteTokenFree),\n        );\n      const unsettledBase =\n        openOrders?.baseTokenFree &&\n        market.baseSplSizeToNumber(openOrders.baseTokenFree);\n      const unsettledQuote =\n        openOrders?.quoteTokenFree &&\n        market.baseSplSizeToNumber(openOrders.quoteTokenFree);\n\n      openOrderAccountBalances.push({\n        marketName,\n        market,\n        coin: baseCurrency,\n        key: `${marketName}${baseCurrency}`,\n        orders: inOrdersBase,\n        unsettled: unsettledBase,\n        openOrders,\n      });\n      openOrderAccountBalances.push({\n        marketName,\n        market,\n        coin: quoteCurrency,\n        key: `${marketName}${quoteCurrency}`,\n        orders: inOrdersQuote,\n        unsettled: unsettledQuote,\n        openOrders,\n      });\n    });\n  });\n  return openOrderAccountBalances;\n}\n\nexport function getMarketInfos(\n  customMarkets: CustomMarketInfo[],\n): MarketInfo[] {\n  const customMarketsInfo = customMarkets.map((m) => ({\n    ...m,\n    address: new PublicKey(m.address),\n    programId: new PublicKey(m.programId),\n    deprecated: false,\n  }));\n\n  return [...customMarketsInfo, ...USE_MARKETS];\n}\n\nexport function useMarketInfos() {\n  const { customMarkets } = useCustomMarkets();\n  return getMarketInfos(customMarkets);\n}\n\n/**\n * If selling, choose min tick size. If buying choose a price\n * s.t. given the state of the orderbook, the order will spend\n * `cost` cost currency.\n *\n * @param orderbook serum Orderbook object\n * @param cost quantity to spend. Base currency if selling,\n *  quote currency if buying.\n * @param tickSizeDecimals size of price increment of the market\n */\nexport function getMarketOrderPrice(\n  orderbook: Orderbook,\n  cost: number,\n  tickSizeDecimals?: number,\n) {\n  if (orderbook.isBids) {\n    return orderbook.market.tickSize;\n  }\n  let spentCost = 0;\n  let price, sizeAtLevel, costAtLevel: number;\n  const asks = orderbook.getL2(1000);\n  for ([price, sizeAtLevel] of asks) {\n    costAtLevel = price * sizeAtLevel;\n    if (spentCost + costAtLevel > cost) {\n      break;\n    }\n    spentCost += costAtLevel;\n  }\n  const sendPrice = Math.min(price * 1.02, asks[0][0] * 1.05);\n  let formattedPrice;\n  if (tickSizeDecimals) {\n    formattedPrice = floorToDecimal(sendPrice, tickSizeDecimals);\n  } else {\n    formattedPrice = sendPrice;\n  }\n  return formattedPrice;\n}\n\nexport function getExpectedFillPrice(\n  orderbook: Orderbook,\n  cost: number,\n  tickSizeDecimals?: number,\n) {\n  let spentCost = 0;\n  let avgPrice = 0;\n  let price, sizeAtLevel, costAtLevel: number;\n  for ([price, sizeAtLevel] of orderbook.getL2(1000)) {\n    costAtLevel = (orderbook.isBids ? 1 : price) * sizeAtLevel;\n    if (spentCost + costAtLevel > cost) {\n      avgPrice += (cost - spentCost) * price;\n      spentCost = cost;\n      break;\n    }\n    avgPrice += costAtLevel * price;\n    spentCost += costAtLevel;\n  }\n  const totalAvgPrice = avgPrice / Math.min(cost, spentCost);\n  let formattedPrice;\n  if (tickSizeDecimals) {\n    formattedPrice = floorToDecimal(totalAvgPrice, tickSizeDecimals);\n  } else {\n    formattedPrice = totalAvgPrice;\n  }\n  return formattedPrice;\n}\n","import React, { useContext } from 'react';\nimport { useLocalStorageState } from './utils';\nimport { useInterval } from './useInterval';\nimport { useConnection } from './connection';\nimport { useWallet } from './wallet';\nimport {\n  useAllMarkets,\n  useSelectedTokenAccounts,\n  useTokenAccounts,\n} from './markets';\nimport { settleAllFunds } from './send';\nimport { PreferencesContextValues } from './types';\n\nconst PreferencesContext = React.createContext<PreferencesContextValues | null>(\n  null,\n);\n\nexport function PreferencesProvider({ children }) {\n  const [autoSettleEnabled, setAutoSettleEnabled] = useLocalStorageState(\n    'autoSettleEnabled',\n    true,\n  );\n\n  const [tokenAccounts] = useTokenAccounts();\n  const { connected, wallet } = useWallet();\n  const [marketList] = useAllMarkets();\n  const connection = useConnection();\n  const [selectedTokenAccounts] = useSelectedTokenAccounts();\n\n  useInterval(() => {\n    const autoSettle = async () => {\n      const markets = (marketList || []).map((m) => m.market);\n      try {\n        console.log('Auto settling');\n        await settleAllFunds({\n          connection,\n          wallet,\n          tokenAccounts: tokenAccounts || [],\n          markets,\n          selectedTokenAccounts,\n        });\n      } catch (e) {\n        console.log('Error auto settling funds: ' + e.message);\n      }\n    };\n\n    connected && wallet?.autoApprove && autoSettleEnabled && autoSettle();\n  }, 10000);\n\n  return (\n    <PreferencesContext.Provider\n      value={{\n        autoSettleEnabled,\n        setAutoSettleEnabled,\n      }}\n    >\n      {children}\n    </PreferencesContext.Provider>\n  );\n}\n\nexport function usePreferences() {\n  const context = useContext(PreferencesContext);\n  if (!context) {\n    throw new Error('Missing preferences context');\n  }\n  return {\n    autoSettleEnabled: context.autoSettleEnabled,\n    setAutoSettleEnabled: context.setAutoSettleEnabled,\n  };\n}\n","import { useRef, useEffect } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef<() => void>();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current && savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from 'react';\nimport { Switch, Typography } from 'antd';\nimport { usePreferences } from '../utils/preferences';\n\nexport default function Settings({ autoApprove }) {\n  const { autoSettleEnabled, setAutoSettleEnabled } = usePreferences();\n\n  return (\n    <div style={{ fontWeight: 400, fontSize: 16, color: 'white' }}>\n      <Switch\n        style={{\n          marginRight: 2,\n        }}\n        disabled={!autoApprove}\n        checked={autoApprove && autoSettleEnabled}\n        onChange={setAutoSettleEnabled}\n      />{' '}\n      Auto settle\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport { Button, Row, Col, Dropdown, Menu } from 'antd';\nimport { useWallet } from '../utils/wallet';\nimport { abbreviateAddress } from '../utils/utils';\nimport Settings from './Settings';\nimport {\n  DisconnectOutlined,\n  AppstoreOutlined,\n  CheckCircleOutlined,\n} from '@ant-design/icons';\nimport { useHistory } from 'react-router-dom';\n\nimport { settleAllFunds } from '../utils/send';\nimport {\n  useAllMarkets,\n  useSelectedTokenAccounts,\n  useTokenAccounts,\n} from '../utils/markets';\nimport { useConnection } from '../utils/connection';\nimport { notify } from '../utils/notifications';\n\nconst { Item } = Menu;\n\nexport const Dot = () => {\n  return (\n    <div\n      style={{\n        width: 6,\n        height: 6,\n        borderRadius: 4,\n        background: '#51D07B',\n      }}\n    />\n  );\n};\n\nexport default function WalletConnect(): JSX.Element {\n  const { connected, wallet } = useWallet();\n  const publicKey = wallet?.publicKey;\n  const history = useHistory();\n\n  const styles = {\n    menu: {\n      width: '100%',\n      fontWeight: 400,\n      fontSize: 16,\n      color: 'white',\n    },\n    icon: { fontSize: 24, color: '#B3B3FF' },\n    col: { paddingRight: 20 },\n    item: {\n      paddingTop: 15,\n    },\n  };\n\n  const connection = useConnection();\n\n  const [selectedTokenAccounts] = useSelectedTokenAccounts();\n  const [allMarkets, allMarketsConnected] = useAllMarkets();\n  const [tokenAccounts, tokenAccountsConnected] = useTokenAccounts();\n\n  const onSettleFunds = async () => {\n    try {\n      if (!tokenAccounts || !tokenAccountsConnected) {\n        notify({\n          message: 'Error settling funds',\n          description: 'TokenAccounts not connected',\n          type: 'error',\n        });\n        return;\n      }\n      if (!allMarkets || !allMarketsConnected) {\n        notify({\n          message: 'Error settling funds',\n          description: 'Markets not connected',\n          type: 'error',\n        });\n        return;\n      }\n      await settleAllFunds({\n        connection,\n        tokenAccounts,\n        selectedTokenAccounts,\n        wallet,\n        markets: allMarkets.map((marketInfo) => marketInfo.market),\n      });\n    } catch (e) {\n      notify({\n        message: 'Error settling funds',\n        description: e.message,\n        type: 'error',\n      });\n    } finally {\n      notify({\n        message: 'Funds settled',\n        description: 'All funds settled',\n        type: 'success',\n      });\n    }\n  };\n\n  const ConnectedDropDown = (\n    <Menu style={styles.menu}>\n      <Item>\n        <Settings autoApprove={wallet?.autoApprove} />\n      </Item>\n      <Item style={styles.item}>\n        <Row\n          align=\"middle\"\n          justify=\"start\"\n          onClick={() => history.push('/collection')}\n        >\n          <Col style={styles.col}>\n            <AppstoreOutlined style={styles.icon} />\n          </Col>\n          <Col>Collection</Col>\n        </Row>\n      </Item>\n      <Item onClick={() => onSettleFunds()} style={styles.item}>\n        <Row align=\"middle\" justify=\"start\">\n          <Col style={styles.col}>\n            <CheckCircleOutlined style={styles.icon} />\n          </Col>\n          <Col>Settle</Col>\n        </Row>\n      </Item>\n      <Item onClick={wallet.disconnect} style={styles.item}>\n        <Row align=\"middle\" justify=\"start\">\n          <Col style={styles.col}>\n            <DisconnectOutlined style={styles.icon} />\n          </Col>\n          <Col>Disconnect</Col>\n        </Row>\n      </Item>\n    </Menu>\n  );\n\n  return (\n    <React.Fragment>\n      <Button\n        type=\"text\"\n        size=\"large\"\n        onClick={connected ? () => {} : wallet.connect}\n        style={{\n          color: '#B2B2FF',\n          textTransform: 'uppercase',\n          border: '1px solid',\n          borderColor: '#B2B2F',\n        }}\n      >\n        {!connected ? (\n          'Connect wallet'\n        ) : (\n          <Dropdown\n            overlay={ConnectedDropDown}\n            placement=\"bottomCenter\"\n            overlayStyle={{ width: 284, background: '#0A0D1F' }}\n          >\n            <Row align=\"middle\" justify=\"space-around\">\n              <Col style={{ paddingRight: 10 }}>\n                <Dot />\n              </Col>\n              <Col>{abbreviateAddress(publicKey)}</Col>\n            </Row>\n          </Dropdown>\n        )}\n      </Button>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport { Input } from 'antd';\nimport { useHistory } from 'react-router-dom';\n\nconst { Search } = Input;\n\nconst SearchBar = () => {\n  const history = useHistory();\n  const onSearch = (value) => {\n    if (!value.trim()) {\n      return;\n    }\n    history.push(\n      `/explore?keywords=${value.trim().toLowerCase().replace(/ /g, '-')}`,\n    );\n  };\n  return (\n    <Search\n      placeholder=\"Search items\"\n      onSearch={onSearch}\n      enterButton\n      style={{ maxWidth: 500 }}\n    />\n  );\n};\n\nexport default SearchBar;\n","import React from 'react';\nimport { Button, Col, Popover, Row, Select } from 'antd';\nimport { useHistory } from 'react-router-dom';\nimport logo from '../assets/solible-logo.svg';\nimport styled from 'styled-components';\nimport { useWallet, WALLET_PROVIDERS } from '../utils/wallet';\nimport WalletConnect from './WalletConnect';\nimport SearchBar from './SearchBar';\n\nconst LogoWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  color: white;\n  font-weight: 600;\n  cursor: pointer;\n  font-size: 16px;\n  img {\n    height: 30px;\n    margin-right: 8px;\n  }\n`;\n\nconst styles = {\n  explore: {\n    cursor: 'pointer',\n  },\n  addNft: {\n    marginRight: 70,\n    marginLeft: 70,\n    cursor: 'pointer',\n  },\n  faq: {\n    marginRight: 70,\n    cursor: 'pointer',\n  },\n  mainRow: { background: '#121837' },\n  childRow: { fontWeight: 600, fontSize: 16 },\n};\n\nexport default function TopBar(): JSX.Element {\n  const { connected, wallet, providerUrl, setProvider } = useWallet();\n  const history = useHistory();\n  return (\n    <>\n      <Row align=\"middle\" justify=\"space-around\" style={styles.mainRow}>\n        <LogoWrapper onClick={() => history.push('/')}>\n          <img src={logo} alt=\"\" />\n          {'Solible'}\n        </LogoWrapper>\n        <SearchBar />\n        <Col>\n          <Row justify=\"space-around\" style={styles.childRow}>\n            <Col\n              style={styles.explore}\n              onClick={() => history.push('/explore')}\n            >\n              EXPLORE\n            </Col>\n            <Col style={styles.addNft} onClick={() => history.push('/list')}>\n              ADD NFT\n            </Col>\n            <Col\n              style={styles.faq}\n              onClick={() =>\n                (window.location.href = 'https://help.bonfida.com')\n              }\n            >\n              FAQ\n            </Col>\n            <Col>\n              <WalletConnect />\n            </Col>\n            <Col style={{ marginLeft: 20 }}>\n              <Select onSelect={setProvider} value={providerUrl}>\n                {WALLET_PROVIDERS.map(({ name, url }) => (\n                  <Select.Option value={url} key={url}>\n                    {name}\n                  </Select.Option>\n                ))}\n              </Select>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </>\n  );\n}\n","export const helpUrls = {\n  twitter: 'https://twitter.com/bonfida',\n  support: 'https://help.bonfida.com/',\n  bonfida: 'https://bonfida.com',\n  discord: 'https://discord.gg/B4xzATxQHC',\n  telegram: 'https://t.me/bonfidatg',\n};\n","import React from 'react';\nimport { Layout, Row, Col, Grid } from 'antd';\nimport Link from './Link';\nimport { helpUrls } from './HelpUrls';\nimport logo from '../assets/solible-logo.svg';\nimport discord from '../assets/social/discord.svg';\nimport telegram from '../assets/social/telegram.svg';\nimport twitter from '../assets/social/twitter.svg';\n\nconst { Footer } = Layout;\nconst { useBreakpoint } = Grid;\n\nconst footerElements = [\n  {\n    description: 'Twitter',\n    link: helpUrls.twitter,\n  },\n  { description: 'Support', link: helpUrls.support },\n  { description: 'Bonfida', link: helpUrls.bonfida },\n];\n\nconst styles = {\n  footer: {\n    height: '60px',\n    paddingBottom: 10,\n    paddingTop: 10,\n    background: '#121837',\n  },\n  link: {\n    color: 'rgba(255, 255, 255, 0.6)',\n    textTransform: 'uppercase',\n    paddingLeft: 20,\n    paddingRight: 20,\n  },\n  discord: {\n    height: 25,\n    cursor: 'pointer',\n  },\n  telegram: {\n    height: 20,\n    marginRight: 25,\n    marginLeft: 25,\n    cursor: 'pointer',\n  },\n  twitter: {\n    height: 20,\n    cursor: 'pointer',\n  },\n  ipfs: {\n    color: 'rgba(255, 255, 255, 0.6)',\n    textTransform: 'uppercase',\n    marginTop: 10,\n    marginLeft: 10,\n  } as React.CSSProperties,\n};\n\nexport const CustomFooter = () => {\n  const smallScreen = !useBreakpoint().lg;\n\n  return (\n    <Footer style={styles.footer}>\n      <Row align=\"middle\" justify=\"space-around\">\n        <Col>\n          <img src={logo} alt=\"\" />\n        </Col>\n        {!smallScreen && (\n          <Col>\n            {footerElements.map((elem, index) => {\n              return (\n                <Link\n                  key={`footer-elem-${index}-${elem.description}`}\n                  external\n                  to={elem.link}\n                  style={styles.link}\n                >\n                  {elem.description}\n                </Link>\n              );\n            })}\n          </Col>\n        )}\n        <Col>\n          <img\n            src={discord}\n            style={styles.discord}\n            onClick={() => (window.location.href = helpUrls.discord)}\n            alt=\"\"\n          />\n          <img\n            src={telegram}\n            style={styles.telegram}\n            onClick={() => (window.location.href = helpUrls.telegram)}\n            alt=\"\"\n          />\n          <img\n            src={twitter}\n            style={styles.twitter}\n            onClick={() => (window.location.href = helpUrls.twitter)}\n            alt=\"\"\n          />\n        </Col>\n      </Row>\n    </Footer>\n  );\n};\n","import { Layout } from 'antd';\nimport React from 'react';\nimport TopBar from './TopBar';\nimport { CustomFooter as Footer } from './Footer';\nconst { Header, Content } = Layout;\n\nexport default function BasicLayout({ children }) {\n  return (\n    <React.Fragment>\n      <Layout\n        style={{ display: 'flex', minHeight: '100vh', flexDirection: 'column' }}\n      >\n        <Header style={{ padding: 0, minHeight: 64, height: 'unset' }}>\n          <TopBar />\n        </Header>\n        <Content style={{ flex: 1 }}>{children}</Content>\n        <Footer />\n      </Layout>\n    </React.Fragment>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport { PublicKey, TokenAmount } from '@solana/web3.js';\nimport { useConnection } from '../connection';\nimport { Market, TOKEN_MINTS } from '@project-serum/serum';\nimport { getNftList } from './';\nimport { NFT } from './';\nimport { sleep } from '../utils';\n\nexport const DISABLE_SELL = ['327ubUZkUUAEdeWvyQYh1Ycs9mt6yDnt7jDAW47U3krw'];\nexport const PUBLIC_KEY_GOD = 'BJa7dq3bRP216zaTdw4cdcV71WkPc1HXvmnGeFVDi5DC';\n\nconst programId = new PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin');\n\nexport const findMarketFromMint = (\n  mintAddress: PublicKey,\n): PublicKey | undefined => {\n  const allNfts = getNftList();\n  return allNfts.find(\n    (nft) => nft.mintAddress.toBase58() === mintAddress.toBase58(),\n  )?.marketAddress;\n};\n\nexport const findMintfromMarket = (\n  marketAddress: PublicKey,\n): PublicKey | undefined => {\n  const allNfts = getNftList();\n  return allNfts.find(\n    (nft) => nft.marketAddress.toBase58() === marketAddress.toBase58(),\n  )?.mintAddress;\n};\n\nexport const findNftFromMarket = (\n  marketAddress: PublicKey | null | undefined,\n): NFT | undefined => {\n  if (!marketAddress) {\n    return undefined;\n  }\n  const allNfts = getNftList();\n  return allNfts.find((nft) => {\n    return nft.marketAddress.toBase58() === marketAddress.toBase58();\n  });\n};\n\nexport const useQuoteFromMarketAddress = (\n  address: PublicKey | undefined,\n): string | undefined => {\n  const [quote, setQuote] = useState<string | undefined>(undefined);\n  const connection = useConnection();\n  useEffect(() => {\n    const get = async (): Promise<void> => {\n      if (!address) {\n        return;\n      }\n      await sleep(Math.random() * 2000);\n      let market = await Market.load(connection, address, {}, programId);\n      let quoteMint = market.quoteMintAddress;\n      setQuote(\n        TOKEN_MINTS.find(\n          (token) => token.address.toBase58() === quoteMint.toBase58(),\n        )?.name,\n      );\n    };\n    get();\n  });\n  return quote;\n};\n\nexport const findNftFromMint = (mintAddress: PublicKey): NFT | undefined => {\n  const allNfts = getNftList();\n  return allNfts.find(\n    (nft): boolean => nft.mintAddress.toBase58() === mintAddress.toBase58(),\n  );\n};\n\nexport const useBestBid = (address: PublicKey | undefined): number | null => {\n  const [bestBid, setBestBid] = useState<null | number>(null);\n  const connection = useConnection();\n\n  useEffect((): void => {\n    const get = async () => {\n      if (!address) {\n        return;\n      }\n      await sleep(Math.random() * 2000);\n      let market = await Market.load(connection, address, {}, programId);\n      await sleep(Math.random() * 2000);\n      let bids = await market.loadBids(connection);\n      const bb = bids.getL2(1);\n      setBestBid(bb[0] && bb[0][0] ? bb[0][0] : null);\n    };\n    get();\n  }, [connection, address]);\n\n  return bestBid;\n};\n\nexport const useBestAsk = (address: PublicKey | undefined): number | null => {\n  const [bestAsk, setBestAsk] = useState<null | number>(null);\n  const connection = useConnection();\n\n  useEffect((): void => {\n    const get = async () => {\n      if (!address) {\n        return;\n      }\n      await sleep(Math.random() * 2000);\n      let market = await Market.load(connection, address, {}, programId);\n      await sleep(Math.random() * 2000);\n      let asks = await market.loadAsks(connection);\n      const ba = asks.getL2(1);\n      setBestAsk(ba[0] && ba[0][0] ? ba[0][0] : null);\n    };\n    get();\n  }, [connection, address]);\n\n  return bestAsk;\n};\n\nexport const useMarkPrice = (address: PublicKey): number | null => {\n  const [price, setPrice] = useState<null | number>(null);\n  const connection = useConnection();\n\n  useEffect((): void => {\n    const get = async () => {\n      let market = await Market.load(connection, address, {}, programId);\n      let asks = await market.loadAsks(connection);\n      let bids = await market.loadBids(connection);\n\n      const ba = asks.getL2(1);\n      const bb = bids.getL2(1);\n\n      setPrice((ba[0][0] + bb[0][0]) / 2);\n    };\n    get();\n  }, [connection, address]);\n\n  return price;\n};\n\nexport const useSupply = (address: PublicKey): number | null => {\n  const [supply, setSupply] = useState<number | null>(null);\n  const connection = useConnection();\n\n  useEffect(() => {\n    const get = async () => {\n      try {\n        await sleep(Math.random() * 2000);\n        const _supply = await connection.getTokenSupply(address);\n        setSupply(_supply.value.uiAmount);\n      } catch (err) {\n        console.warn(`Error getting supply for ${address.toBase58()} - ${err}`);\n      }\n    };\n    get();\n  }, [connection]);\n  return supply;\n};\n\nexport const useTokenInfo = (address: string | null) => {\n  const [tokenAmount, setTokenAmount] = useState<TokenAmount | null>(null);\n  const connection = useConnection();\n  useEffect(() => {\n    const get = async () => {\n      if (!address) {\n        return;\n      }\n      try {\n        await sleep(Math.random() * 2000);\n        const result = await connection.getTokenSupply(new PublicKey(address));\n        setTokenAmount(result.value);\n      } catch (err) {\n        console.warn(`Error getting token info - ${err}`);\n      }\n    };\n    get();\n  }, [connection]);\n  return tokenAmount;\n};\n\nexport const useNftInfo = (\n  mintAddress: PublicKey,\n  marketAddress: PublicKey | null | undefined,\n) => {\n  const [quote, setQuote] = useState<string | undefined>(undefined);\n  const [bestAsk, setBestAsk] = useState<null | number>(null);\n  const [supply, setSupply] = useState<number | null>(null);\n  const [bestBid, setBestBid] = useState<number | null>(null);\n\n  const connection = useConnection();\n\n  useEffect(() => {\n    const get = async (): Promise<void> => {\n      if (!marketAddress) {\n        return;\n      }\n      // Market data\n      try {\n        let market = await Market.load(\n          connection,\n          marketAddress,\n          {},\n          programId,\n        );\n        let quoteMint = market.quoteMintAddress;\n        let asks = await market.loadAsks(connection);\n        await sleep(Math.random() * 1_000);\n        let bids = await market.loadBids(connection);\n        const bb = bids.getL2(1);\n        const ba = asks.getL2(1);\n        setBestAsk(ba[0] && ba[0][0] ? ba[0][0] : null);\n        setBestBid(bb[0] && bb[0][0] ? bb[0][0] : null);\n        setQuote(\n          TOKEN_MINTS.find(\n            (token) => token.address.toBase58() === quoteMint.toBase58(),\n          )?.name,\n        );\n        await sleep(Math.random() * 1_000);\n        // Token data\n        const _supply = await connection.getTokenSupply(mintAddress);\n        setSupply(_supply.value.uiAmount);\n      } catch (err) {\n        console.warn(`Error fetching NFT data - ${err}`);\n      }\n    };\n    get();\n  }, [connection, mintAddress, marketAddress]);\n  return {\n    quoteCurrency: quote,\n    bestAsk: bestAsk,\n    supply: supply,\n    bestBid: bestBid,\n  };\n};\n","import React from 'react';\nimport { Col, Row } from 'antd';\nimport { PublicKey } from '@solana/web3.js';\nimport { findNftFromMint, useNftInfo } from '../utils/nfts/utils';\nimport { getExceptionalStyle } from '../utils/nfts';\nimport { useHistory } from 'react-router-dom';\nimport LazyLoad from 'react-lazyload';\n\ninterface TagI {\n  style?: any;\n}\n\nexport const RedeemableTag = (prop: TagI): JSX.Element => {\n  return (\n    <div className=\"redeemable-tag\" style={prop.style}>\n      Redeemable\n    </div>\n  );\n};\n\nexport const OwnedTag = () => {\n  return <div className=\"owned-tag\">Owned by you</div>;\n};\n\nexport const NftCard = ({\n  mintAddress,\n}: {\n  mintAddress: PublicKey;\n}): JSX.Element | null => {\n  const nft = findNftFromMint(mintAddress);\n  const { bestAsk, supply, quoteCurrency } = useNftInfo(\n    mintAddress,\n    nft?.marketAddress,\n  );\n\n  const history = useHistory();\n\n  const onClick = (): void => {\n    history.push(`/market/${nft?.marketAddress}`);\n  };\n\n  if (!nft) {\n    return null;\n  }\n  return (\n    <div className=\"nft-card\" onClick={onClick}>\n      {nft.redeembable && (\n        <RedeemableTag style={getExceptionalStyle(nft.mintAddress)} />\n      )}\n      {nft.type === 'IMAGE' ? (\n        <LazyLoad height={300}>\n          <img\n            // @ts-ignore\n            src={nft.imgSmall}\n            alt=\"\"\n          />\n        </LazyLoad>\n      ) : (\n        <>\n          <LazyLoad height={300}>\n            <video\n              width=\"400\"\n              muted\n              loop\n              autoPlay\n              playsInline\n              style={getExceptionalStyle(nft.mintAddress)}\n            >\n              <source\n                // @ts-ignore\n                src={nft.imgSmall}\n                type=\"video/mp4\"\n              />\n            </video>\n          </LazyLoad>\n        </>\n      )}\n      <div className=\"bottom\">\n        <Row justify=\"space-between\">\n          <Col style={{ paddingLeft: 15 }}>\n            <span className=\"text-bold\">{nft.name}</span>\n            <br />\n            {bestAsk && (\n              <>\n                <span className=\"text-bold\">\n                  {bestAsk} {quoteCurrency}\n                </span>\n                <br />\n                <span className=\"text-light\">Price</span>\n              </>\n            )}\n          </Col>\n          <Col style={{ textAlign: 'right', paddingRight: 15 }}>\n            <b>{supply}</b>\n            <br />\n            Supply\n          </Col>\n        </Row>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Row, Col } from 'antd';\nimport { NftCard } from '../components/NftCard';\nimport { getNftList } from '../utils/nfts';\nimport { useLocation } from 'react-router-dom';\n\nconst ExplorePage = (): JSX.Element => {\n  let nfts = getNftList();\n\n  const rows = [...Array(Math.ceil(nfts.length / 4))];\n  const productRows = rows.map((row, idx) => nfts.slice(idx * 4, idx * 4 + 4));\n\n  const location = useLocation();\n  const params = new URLSearchParams(location.search);\n  const keywords = params.get('keywords')?.split('-');\n\n  // TODO Filter pour redeembale et sort option on the side\n\n  return (\n    <>\n      <Row align=\"middle\" justify=\"space-around\" style={{ paddingTop: 50 }}>\n        <Col>\n          {keywords ? (\n            <h1 className=\"explore-page-title\">\n              Search results for: {keywords.toString()}\n            </h1>\n          ) : null}\n        </Col>\n        {/* <Col>Sort options</Col> */}\n      </Row>\n      {productRows.map((row, idx) => {\n        return (\n          <Row align=\"middle\" justify=\"center\" style={{ paddingBottom: 20 }}>\n            {row.map((nft) => {\n              const intersection = nft.keywords.filter((x) =>\n                keywords?.includes(x),\n              );\n              if (intersection.length > 0 || !keywords) {\n                return (\n                  <Col style={{ padding: 20 }}>\n                    <NftCard mintAddress={nft.mintAddress} />\n                  </Col>\n                );\n              }\n            })}\n          </Row>\n        );\n      })}\n    </>\n  );\n};\n\nexport default ExplorePage;\n","import React from 'react';\nimport { PublicKey } from '@solana/web3.js';\nimport Link from './Link';\n\nconst EXPLORER = 'https://explorer.solana.com/address/';\n\nexport const AddressLink = ({ address }: { address: PublicKey }) => {\n  return (\n    <Link\n      external\n      to={EXPLORER + address.toBase58()}\n      style={{ color: 'white', fontWeight: 'bold' }}\n    >\n      {address.toBase58().slice(0, 6)}...\n      {address\n        .toBase58()\n        .slice(address.toBase58().length - 6, address.toBase58().length)}\n    </Link>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Button, Col, Row, Input, Space, Grid, Statistic } from 'antd';\nimport { findNftFromMarket } from '../utils/nfts/utils';\nimport {\n  useMarket,\n  useBalances,\n  useSelectedBaseCurrencyAccount,\n  useSelectedQuoteCurrencyAccount,\n  useFeeDiscountKeys,\n  useLocallyStoredFeeDiscountKey,\n  useOpenOrders,\n} from '../utils/markets';\nimport { NFT } from '../utils/nfts';\nimport { useNftInfo } from '../utils/nfts/utils';\nimport { AddressLink } from './ExplorerLink';\nimport { RedeemableTag, OwnedTag } from './NftCard';\nimport { useWallet } from '../utils/wallet';\nimport { placeOrder, cancelOrder } from '../utils/send';\nimport { notify } from '../utils/notifications';\nimport { useSendConnection, useConnection } from '../utils/connection';\nimport { useHistory } from 'react-router-dom';\nimport { getProgramAccounts } from '../utils/wallet';\n\nconst { useBreakpoint } = Grid;\n\nconst { Countdown } = Statistic;\n\nconst Line = () => {\n  return <div className=\"line\" />;\n};\n\nconst TradeForm = ({ nft }: { nft: NFT }): JSX.Element => {\n  const history = useHistory();\n  const [bidPrice, setBidPrice] = useState<string | null>(null);\n  const [askPrice, setAskPrice] = useState<string | null>(null);\n  const { wallet, connected } = useWallet();\n  const [hasNft, setHasNft] = useState(false);\n  const [submitting, setSubmitting] = useState(false);\n  const balances = useBalances();\n  const sendConnection = useSendConnection();\n  const baseCurrencyAccount = useSelectedBaseCurrencyAccount();\n  const quoteCurrencyAccount = useSelectedQuoteCurrencyAccount();\n  useFeeDiscountKeys();\n  const {\n    storedFeeDiscountKey: feeDiscountKey,\n  } = useLocallyStoredFeeDiscountKey();\n\n  const openOrders = useOpenOrders();\n\n  const [openOrder, setOpenOrder] = useState<any | null>(null);\n  const connection = useConnection();\n\n  let loaded = openOrders?.length;\n\n  useEffect(() => {\n    openOrders?.map((o) => {\n      if (o.market.address.toBase58() === nft.marketAddress.toBase58()) {\n        setOpenOrder(o);\n      }\n    });\n  }, [loaded]);\n\n  useEffect(() => {\n    balances?.forEach((b) => {\n      if (b.wallet && b.coin === nft.name && b.wallet > 0) {\n        setHasNft(true);\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    const get = async () => {\n      let result = await getProgramAccounts(wallet?.publicKey);\n\n      result = result?.map((t) => {\n        return {\n          mint: t?.account?.data?.parsed?.info?.mint,\n          amount: t?.account?.data?.parsed?.info?.tokenAmount?.uiAmount,\n        };\n      });\n      return result;\n    };\n    get().then((result) => {\n      result?.forEach((e) => {\n        if (e.mint === nft.mintAddress.toBase58() && e.amount > 0) {\n          setHasNft(true);\n        }\n      });\n    });\n  }, [connected]);\n\n  const { market } = useMarket();\n  const { bestBid, bestAsk, quoteCurrency: quote, supply } = useNftInfo(\n    nft.mintAddress,\n    market?.address,\n  );\n\n  const placeBid = async () => {\n    if (!bidPrice) {\n      console.warn('Missing price');\n      notify({ message: 'Missing price', type: 'error' });\n      return;\n    }\n    setSubmitting(true);\n    try {\n      await placeOrder({\n        side: 'buy',\n        price: parseFloat(bidPrice),\n        size: 1,\n        orderType: 'limit',\n        market: market,\n        connection: sendConnection,\n        wallet: wallet,\n        baseCurrencyAccount: baseCurrencyAccount?.pubkey,\n        quoteCurrencyAccount: quoteCurrencyAccount?.pubkey,\n        feeDiscountPubkey: feeDiscountKey,\n      });\n    } catch (e) {\n      console.warn(e);\n      notify({\n        message: 'Error placing order',\n        description: e.message,\n        type: 'error',\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const buyBestOffer = async () => {\n    console.log('Accepting offer');\n    if (!bestAsk) {\n      console.warn('No offer to take');\n      notify({ message: 'No offer to take', type: 'error' });\n      return;\n    }\n    setSubmitting(true);\n    try {\n      await placeOrder({\n        side: 'buy',\n        price: bestAsk,\n        size: 1,\n        orderType: 'limit',\n        market: market,\n        connection: sendConnection,\n        wallet: wallet,\n        baseCurrencyAccount: baseCurrencyAccount?.pubkey,\n        quoteCurrencyAccount: quoteCurrencyAccount?.pubkey,\n        feeDiscountPubkey: feeDiscountKey,\n      });\n    } catch (e) {\n      console.warn(e);\n      notify({\n        message: 'Error placing order',\n        description: e.message,\n        type: 'error',\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const placeAsk = async () => {\n    console.log('Placing ask');\n    if (!askPrice) {\n      console.warn('Missing Price');\n      notify({ message: 'Missing Price', type: 'error' });\n      return;\n    }\n    setSubmitting(true);\n    try {\n      await placeOrder({\n        side: 'sell',\n        price: parseFloat(askPrice),\n        size: 1,\n        orderType: 'limit',\n        market: market,\n        connection: sendConnection,\n        wallet: wallet,\n        baseCurrencyAccount: baseCurrencyAccount?.pubkey,\n        quoteCurrencyAccount: quoteCurrencyAccount?.pubkey,\n        feeDiscountPubkey: feeDiscountKey,\n      });\n    } catch (e) {\n      console.warn(e);\n      notify({\n        message: 'Error placing order',\n        description: e.message,\n        type: 'error',\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const sellBestBid = async () => {\n    console.log('Taking best bid');\n    if (!bestBid) {\n      console.warn('No bid');\n      notify({ message: 'No Bid', type: 'error' });\n      return;\n    }\n    setSubmitting(true);\n    try {\n      await placeOrder({\n        side: 'sell',\n        price: bestBid,\n        size: 1,\n        orderType: 'limit',\n        market: market,\n        connection: sendConnection,\n        wallet: wallet,\n        baseCurrencyAccount: baseCurrencyAccount?.pubkey,\n        quoteCurrencyAccount: quoteCurrencyAccount?.pubkey,\n        feeDiscountPubkey: feeDiscountKey,\n      });\n    } catch (e) {\n      console.warn(e);\n      notify({\n        message: 'Error placing order',\n        description: e.message,\n        type: 'error',\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const cancelOpenOrder = async () => {\n    setSubmitting(true);\n    try {\n      if (!openOrder) {\n        return;\n      }\n      await cancelOrder({\n        order: openOrder,\n        market: openOrder.market,\n        connection,\n        wallet,\n      });\n    } catch (e) {\n      notify({\n        message: 'Error cancelling openOrder',\n        description: e.message,\n        type: 'error',\n      });\n      return;\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <Space direction=\"vertical\" style={{ width: '100%' }}>\n      {hasNft && nft.redeembable && (\n        <>\n          <Row justify=\"end\" align=\"middle\" style={{ paddingBottom: 20 }}>\n            <Button\n              className=\"buy-button\"\n              disabled={submitting}\n              onClick={() => history.push(`/redeem/${nft.mintAddress}`)}\n            >\n              Redeem\n            </Button>\n          </Row>\n        </>\n      )}\n      {!hasNft && !(openOrder?.side === 'sell') && (\n        <>\n          <Row\n            justify=\"space-between\"\n            align=\"middle\"\n            style={{ paddingTop: 20 }}\n          >\n            <Col className=\"trade-form-label\">Price:</Col>\n            <Col className=\"trade-form-description\">\n              {bestAsk} {quote}\n            </Col>\n          </Row>\n          <Row justify=\"end\" align=\"middle\" style={{ paddingBottom: 20 }}>\n            <Button\n              className=\"buy-button\"\n              disabled={submitting}\n              onClick={buyBestOffer}\n            >\n              Buy now\n            </Button>\n          </Row>\n          <Row\n            align=\"middle\"\n            justify=\"space-between\"\n            style={{ paddingTop: 20 }}\n          >\n            <Col className=\"trade-form-label\">Place Bid</Col>\n            <Col className=\"trade-form-description\">\n              <Input\n                placeholder=\"Bid price\"\n                suffix={quote}\n                style={{ width: 200, borderColor: '#b3b3ff', marginRight: 10 }}\n                onChange={(e) => {\n                  setBidPrice(e.target.value.trim());\n                }}\n              />\n              <Button className=\"button-place-bid\" onClick={placeBid}>\n                Place bid\n              </Button>\n            </Col>\n          </Row>\n        </>\n      )}\n      {hasNft && (\n        <>\n          <Row\n            align=\"middle\"\n            justify=\"space-between\"\n            style={{ paddingTop: 20 }}\n          >\n            <Col className=\"trade-form-label\">Sell price</Col>\n            <Col className=\"trade-form-description\">\n              <Input\n                placeholder=\"Sell price\"\n                suffix={quote}\n                style={{ width: 200, borderColor: '#b3b3ff', marginRight: 10 }}\n                onChange={(e) => {\n                  setAskPrice(e.target.value.trim());\n                }}\n              />\n              <Button className=\"button-place-bid\" onClick={placeAsk}>\n                Set price\n              </Button>\n            </Col>\n          </Row>\n          <Row\n            align=\"middle\"\n            justify=\"space-between\"\n            style={{ paddingTop: 20 }}\n          >\n            <Col className=\"trade-form-label\">Bids</Col>\n            <Col className=\"trade-form-description\">\n              Highest Bid: {bestBid} {quote}\n              <Button\n                className=\"button-place-bid\"\n                onClick={sellBestBid}\n                style={{ marginLeft: 20 }}\n              >\n                Accept Bid\n              </Button>\n            </Col>\n          </Row>\n        </>\n      )}\n      {!hasNft && bestBid && !(openOrder?.side === 'sell') && (\n        <Row justify=\"start\" align=\"middle\" style={{ paddingBottom: 10 }}>\n          <Col flex=\"auto\" />\n          <Col>\n            Highest Bid: {bestBid} {quote}\n          </Col>\n        </Row>\n      )}\n      {openOrder?.side === 'buy' && (\n        <>\n          <Row\n            align=\"middle\"\n            justify=\"space-between\"\n            style={{ paddingTop: 20 }}\n          >\n            <Col className=\"trade-form-label\">Your bid</Col>\n            <Col className=\"trade-form-description\">\n              <Input\n                // @ts-ignore\n                placeholder={openOrder.price}\n                disabled={true}\n                suffix={quote}\n                style={{\n                  width: 200,\n                  borderColor: '#b3b3ff',\n                  marginRight: 10,\n                }}\n                onChange={(e) => {\n                  setBidPrice(e.target.value.trim());\n                }}\n              />\n              <Button\n                className=\"button-place-bid\"\n                onClick={() => cancelOpenOrder()}\n              >\n                Cancel\n              </Button>\n            </Col>\n          </Row>\n        </>\n      )}\n      {openOrder?.side === 'sell' && (\n        <>\n          <Row\n            align=\"middle\"\n            justify=\"space-between\"\n            style={{ paddingTop: 20 }}\n          >\n            <Col className=\"trade-form-label\">Your offer</Col>\n            <Col className=\"trade-form-description\">\n              <Input\n                // @ts-ignore\n                placeholder={openOrder.price}\n                disabled={true}\n                suffix={quote}\n                style={{\n                  width: 200,\n                  borderColor: '#b3b3ff',\n                  marginRight: 10,\n                }}\n                onChange={(e) => {\n                  setBidPrice(e.target.value.trim());\n                }}\n              />\n              <Button\n                className=\"button-place-bid\"\n                onClick={() => cancelOpenOrder()}\n              >\n                Cancel\n              </Button>\n            </Col>\n          </Row>\n        </>\n      )}\n      <Row\n        justify=\"space-between\"\n        align=\"middle\"\n        style={{ paddingTop: 20, paddingBottom: 20 }}\n      >\n        <Col className=\"trade-form-label\">Supply</Col>\n        <Col className=\"trade-form-description\">1 of {supply}</Col>\n      </Row>\n\n      {nft.description && (\n        <Row\n          justify=\"space-between\"\n          align=\"middle\"\n          style={{ paddingTop: 20, paddingBottom: 20 }}\n        >\n          <Col className=\"trade-form-label\">Description</Col>\n          <Col className=\"trade-form-description\">{nft.description}</Col>\n        </Row>\n      )}\n      <Row\n        justify=\"space-between\"\n        align=\"middle\"\n        style={{ paddingTop: 20, paddingBottom: 20 }}\n      >\n        <Col className=\"trade-form-label\">Mint address</Col>\n        <Col className=\"trade-form-description\">\n          <AddressLink address={nft.mintAddress} />\n        </Col>\n      </Row>\n      {nft.description && (\n        <Row\n          justify=\"space-between\"\n          align=\"middle\"\n          style={{ paddingTop: 20, paddingBottom: 20 }}\n        >\n          {nft.description}\n        </Row>\n      )}\n      {nft.redeemDescription && (\n        <Row\n          justify=\"space-between\"\n          align=\"middle\"\n          style={{ paddingTop: 20, paddingBottom: 20 }}\n        >\n          {nft.redeemDescription}\n        </Row>\n      )}\n      {nft.redeembable &&\n        nft.auctionDeadLine &&\n        new Date().getTime() < Date.parse(nft.auctionDeadLine) && (\n          <Countdown\n            title=\"Auction will end in\"\n            value={Date.parse(nft.auctionDeadLine)}\n          />\n        )}\n    </Space>\n  );\n};\n\nconst TradePanel = (): JSX.Element | null => {\n  const smallScreen = !useBreakpoint().lg;\n  const { market } = useMarket();\n  const nft = findNftFromMarket(market?.address);\n  const [hasNft, setHasNft] = useState(false);\n  const balances = useBalances();\n\n  useEffect(() => {\n    balances?.forEach((b) => {\n      if (b.wallet && b.coin === nft?.name && b.wallet > 0) {\n        setHasNft(true);\n      }\n    });\n  }, [balances, nft]);\n  if (!nft) {\n    return null;\n  }\n  return (\n    <div\n      className=\"trade-panel\"\n      style={{ height: smallScreen ? '60%' : '658px' }}\n    >\n      <Row align=\"middle\" justify=\"start\">\n        <Col>\n          <h1 className=\"title\">{nft.name}</h1>\n        </Col>\n        <Col style={{ paddingLeft: 20, paddingRight: 10 }}>\n          {nft.redeembable && <RedeemableTag />}\n        </Col>\n        {hasNft && <Col>{true && <OwnedTag />}</Col>}\n      </Row>\n      <Line />\n      <Row align=\"middle\" justify=\"space-around\" style={{ height: '80%' }}>\n        <Col flex=\"auto\" />\n        <Col>\n          <img\n            // @ts-ignore\n            src={nft.img}\n            alt=\"\"\n          />\n        </Col>\n        <Col flex=\"auto\" />\n        <Col flex=\"auto\">\n          <TradeForm nft={nft} />\n        </Col>\n        <Col flex=\"auto\" />\n      </Row>\n    </div>\n  );\n};\n\nexport default TradePanel;\n","import React from 'react';\nimport { Button } from 'antd';\nimport { useHistory } from 'react-router-dom';\n\nconst ButtonViewMore = ({\n  redeemable,\n}: {\n  redeemable: boolean;\n}): JSX.Element => {\n  const history = useHistory();\n  const onClick = () => {\n    history.push(\n      redeemable ? '/explore?redeemable=true' : '/explore?redeemable=false',\n    );\n  };\n  return (\n    <Button className=\"button-view-more\" onClick={onClick}>\n      View more items\n    </Button>\n  );\n};\n\nexport default ButtonViewMore;\n","import React from 'react';\nimport { Row, Col, Grid } from 'antd';\nimport { NftCard } from './NftCard';\nimport { getNftList } from '../utils/nfts';\nimport ButtonViewMore from './ButtonViewMore';\n\nconst { useBreakpoint } = Grid;\n\nconst MoreNfts = (): JSX.Element => {\n  const smallScreen = !useBreakpoint().lg;\n  const nfts = getNftList()\n    .map((a) => ({ sort: Math.random(), value: a }))\n    .sort((a, b) => a.sort - b.sort)\n    .map((a) => a.value)\n    .slice(0, 4);\n  return (\n    <>\n      {!smallScreen && (\n        <>\n          <Row\n            align=\"middle\"\n            justify=\"center\"\n            style={{ paddingTop: 80, paddingBottom: 40 }}\n          >\n            <h2 className=\"more-nfts\">More NFTs</h2>\n          </Row>\n          <Row align=\"middle\" justify=\"space-around\">\n            <Col flex=\"auto\" />\n            {nfts.map((nft) => {\n              return (\n                <Col\n                  style={{ padding: 20 }}\n                  key={`more-nfts-${nft.mintAddress.toBase58()}`}\n                >\n                  <NftCard mintAddress={nft.mintAddress} />\n                </Col>\n              );\n            })}\n            <Col flex=\"auto\" />\n          </Row>\n        </>\n      )}\n      <Row\n        align=\"middle\"\n        justify=\"center\"\n        style={{ marginBottom: 50, marginTop: smallScreen ? '30px' : 'unset' }}\n      >\n        <ButtonViewMore redeemable={false} />\n      </Row>\n    </>\n  );\n};\n\nexport default MoreNfts;\n","import React, { useEffect } from 'react';\nimport { Row } from 'antd';\nimport TradePanel from '../components/TradePanel';\nimport { MarketProvider, getTradePageUrl } from '../utils/markets';\nimport { useParams, useHistory } from 'react-router-dom';\nimport MoreNfts from '../components/MoreNfts';\n\nconst TradePage = () => {\n  const { marketAddress } = useParams();\n  useEffect(() => {\n    if (marketAddress) {\n      localStorage.setItem('marketAddress', JSON.stringify(marketAddress));\n    }\n  }, [marketAddress]);\n  const history = useHistory();\n  function setMarketAddress(address) {\n    history.push(getTradePageUrl(address));\n  }\n\n  return (\n    <MarketProvider\n      marketAddress={marketAddress}\n      setMarketAddress={setMarketAddress}\n    >\n      <Row justify=\"center\" style={{ paddingTop: 50 }}>\n        <TradePanel />\n      </Row>\n\n      <MoreNfts />\n    </MarketProvider>\n  );\n};\n\nexport default TradePage;\n","import { Connection, PublicKey, Transaction, Account } from '@solana/web3.js';\nimport Wallet from '@project-serum/sol-wallet-adapter';\nimport { Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { sendTransaction } from './send';\n\nconst Urls = {\n  postRedeemForm: 'https://wallet-api.bonfida.com/redeem',\n};\n\nexport const sendSplToken = async ({\n  connection,\n  owner,\n  sourceSpl,\n  destination,\n  amount,\n  wallet,\n}: {\n  connection: Connection;\n  owner: PublicKey;\n  sourceSpl: PublicKey;\n  destination: PublicKey;\n  amount: number;\n  wallet: Wallet;\n}) => {\n  const signers: Array<Account> = [];\n  const tx = new Transaction();\n  tx.add(\n    Token.createTransferInstruction(\n      TOKEN_PROGRAM_ID,\n      sourceSpl,\n      destination,\n      owner,\n      signers,\n      amount,\n    ),\n  );\n\n  return await sendTransaction({\n    transaction: tx,\n    signers: signers,\n    wallet: wallet,\n    connection: connection,\n    sendingMessage: 'Sending NFT to burn authority...',\n  });\n};\n\nexport async function apiPost(path, body, headers) {\n  try {\n    let response = await fetch(path, {\n      method: 'POST',\n      body: JSON.stringify(body),\n      headers: headers,\n    });\n    if (!response.ok) {\n      return [];\n    }\n    let json = await response.json();\n    return json;\n  } catch (err) {\n    console.log(err);\n    return [];\n  }\n}\n\nexport const postRedeemForm = async (data) => {\n  const result = await apiPost(Urls.postRedeemForm, data, {\n    'Content-Type': 'application/json',\n  });\n  return result;\n};\n","import React, { useState, useRef } from 'react';\nimport {\n  Form,\n  Input,\n  InputNumber,\n  Button,\n  Spin as SpinAntd,\n  Row,\n  Col,\n  Alert,\n} from 'antd';\nimport {\n  LoadingOutlined,\n  GlobalOutlined,\n  UserOutlined,\n  PhoneOutlined,\n  FileSearchOutlined,\n  MailOutlined,\n} from '@ant-design/icons';\nimport { PublicKey } from '@solana/web3.js';\nimport { postRedeemForm, sendSplToken } from '../utils/redeem';\nimport { useWallet } from '../utils/wallet';\nimport { useTokenAccounts } from '../utils/markets';\nimport { useConnection } from '../utils/connection';\nimport { notify } from '../utils/notifications';\nimport styled from 'styled-components';\nimport { findNftFromMint } from '../utils/nfts/utils';\nimport { NFT } from '../utils/nfts';\nimport waves from '../assets/homepage/bonfida_waves.svg';\n\nconst StyledInput = styled(Input)`\n  .ant-input {\n    color: white;\n  }\n`;\n\nconst StyledInputNumber = styled(InputNumber)`\n  .ant-input-number-input {\n    color: white;\n  }\n`;\n\nconst Spin = () => {\n  const antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n  return <SpinAntd indicator={antIcon} />;\n};\n\nconst layout = {\n  labelCol: {\n    span: 8,\n  },\n  wrapperCol: {\n    span: 16,\n  },\n};\nconst validateMessages = {\n  required: '${label} is required!',\n  types: {\n    email: '${label} is not a valid email!',\n    number: '${label} is not a valid number!',\n  },\n  number: {\n    range: '${label} must be between ${min} and ${max}',\n  },\n};\n\nconst RedeemForm = ({\n  nftMint,\n  destination,\n}: {\n  nftMint: PublicKey;\n  destination: PublicKey;\n}) => {\n  const [submitting, setSubmitting] = useState(false);\n  const connection = useConnection();\n  const { wallet } = useWallet();\n  const [tokenAccounts] = useTokenAccounts();\n  const source = tokenAccounts?.filter(\n    (e) => e.effectiveMint.toBase58() === nftMint.toBase58(),\n  );\n  const [submitted, setSubmitted] = useState(false);\n\n  const emailRef = useRef<string | null>(null);\n  const nameRef = useRef<string | null>(null);\n  const phoneRef = useRef<string | null>(null);\n  const amountRef = useRef(0);\n  const countryRef = useRef<string | null>(null);\n  const cityRef = useRef<string | null>(null);\n  const addressRef = useRef<string | null>(null);\n  const postCodeRef = useRef<string | null>(null);\n  const additionalRef = useRef<string | null>(null);\n\n  const nft = findNftFromMint(nftMint);\n  if (!nft) {\n    return null;\n  }\n\n  if (!source || source?.length === 0) {\n    console.log('Error getting source');\n    return null;\n  }\n\n  const styles = {\n    icon: { color: 'white' },\n    label: { color: 'white', fontSize: 16, fontWeight: 700 },\n    placeHolder: { color: 'white' },\n  };\n\n  const onFinish = async (values) => {\n    setSubmitting(true);\n    try {\n      const amount = Math.round(amountRef.current);\n      if (!amount || amount <= 0) {\n        throw new Error('Invalid amount');\n      }\n      const txid = await sendSplToken({\n        connection: connection,\n        owner: wallet.publicKey,\n        sourceSpl: source[0]?.pubkey,\n        destination: destination,\n        amount: amount,\n        wallet: wallet,\n      });\n\n      const postBody = {\n        email: emailRef.current,\n        name: nameRef.current,\n        phone: phoneRef.current,\n        amount: amountRef.current,\n        country: countryRef.current,\n        city: cityRef.current,\n        address: addressRef.current,\n        postcode: postCodeRef.current,\n        'additional-information': additionalRef.current,\n        txId: txid,\n      };\n\n      await postRedeemForm(postBody);\n      notify({ message: 'Redeem request successful', type: 'success', txid });\n      setSubmitted(true);\n    } catch (err) {\n      console.log(`Error redeeming: ${err}`);\n      notify({\n        message: 'Error redeeming',\n        type: 'error',\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <>\n      <Row className=\"redeem-form\" justify=\"center\">\n        <h1 style={{ paddingLeft: 40, paddingTop: 30 }}>Redeem {nft?.name}</h1>\n        <Col style={{ color: 'white', padding: 50 }}>\n          <Form\n            {...layout}\n            name=\"redeem\"\n            onFinish={onFinish}\n            validateMessages={validateMessages}\n            style={{ paddingTop: 10, paddingRight: 40, color: 'white' }}\n          >\n            <Form.Item\n              name={['user', 'email']}\n              label={<div style={styles.label}>Email</div>}\n              rules={[\n                {\n                  type: 'email',\n                  required: true,\n                },\n              ]}\n              style={styles.icon}\n            >\n              <StyledInput\n                prefix={<MailOutlined style={styles.icon} />}\n                onChange={(e) => (emailRef.current = e.target.value)}\n              />\n            </Form.Item>\n            <Form.Item\n              name={['user', 'name']}\n              label={<div style={styles.label}>Name</div>}\n              rules={[\n                {\n                  required: true,\n                  message: 'Please enter your name',\n                },\n              ]}\n            >\n              <StyledInput\n                prefix={<UserOutlined style={styles.icon} />}\n                onChange={(e) => (nameRef.current = e.target.value)}\n              />\n            </Form.Item>\n            <Form.Item\n              name={['user', 'phone']}\n              label={<div style={styles.label}>Phone Number</div>}\n              rules={[\n                {\n                  required: true,\n                  message: 'Please input your phone number',\n                },\n              ]}\n            >\n              <StyledInput\n                prefix={<PhoneOutlined style={styles.icon} />}\n                onChange={(e) => (phoneRef.current = e.target.value)}\n              />\n            </Form.Item>\n            <Form.Item\n              name={['user', 'amount']}\n              label={<div style={styles.label}>Amount to redeem</div>}\n              rules={[\n                {\n                  required: true,\n                  message:\n                    'Please enter the amount of token you want to redeem',\n                  type: 'number',\n                  min: 0,\n                  max: 99,\n                },\n              ]}\n            >\n              <StyledInputNumber\n                onChange={(e) => {\n                  if (e) {\n                    amountRef.current = parseFloat(e.toString());\n                  }\n                }}\n              />\n            </Form.Item>\n\n            <Form.Item\n              name={['user', 'country']}\n              label={<div style={styles.label}>Country</div>}\n              rules={[\n                {\n                  required: true,\n                  message: 'Please enter your country',\n                },\n              ]}\n            >\n              <StyledInput\n                prefix={<GlobalOutlined style={styles.icon} />}\n                onChange={(e) => (countryRef.current = e.target.value)}\n              />\n            </Form.Item>\n            <Form.Item\n              name={['user', 'City']}\n              label={<div style={styles.label}>City</div>}\n              rules={[\n                {\n                  required: true,\n                  message: 'Please enter your city',\n                },\n              ]}\n            >\n              <StyledInput\n                prefix={<GlobalOutlined style={styles.icon} />}\n                onChange={(e) => (cityRef.current = e.target.value)}\n              />\n            </Form.Item>\n            <Form.Item\n              name={['user', 'address']}\n              label={<div style={styles.label}>Address</div>}\n              rules={[\n                {\n                  required: true,\n                  message: 'Please enter your address',\n                },\n              ]}\n            >\n              <StyledInput\n                prefix={<GlobalOutlined style={styles.icon} />}\n                onChange={(e) => (addressRef.current = e.target.value)}\n              />\n            </Form.Item>\n            <Form.Item\n              name={['user', 'postcode']}\n              label={<div style={styles.label}>Postcode</div>}\n              rules={[\n                {\n                  required: true,\n                  message: 'Please enter your postcode',\n                },\n              ]}\n            >\n              <StyledInput\n                prefix={<GlobalOutlined style={styles.icon} />}\n                onChange={(e) => (postCodeRef.current = e.target.value)}\n              />\n            </Form.Item>\n            <Form.Item\n              name={['user', 'additional-information']}\n              label={<div style={styles.label}>Additional info.</div>}\n              rules={[\n                {\n                  required: false,\n                },\n              ]}\n            >\n              <StyledInput\n                onChange={(e) => (additionalRef.current = e.target.value)}\n                prefix={<FileSearchOutlined style={styles.icon} />}\n              />\n            </Form.Item>\n            <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\n              <Row align=\"middle\" justify=\"center\" style={{ paddingTop: 10 }}>\n                <Button\n                  className=\"buy-button\"\n                  type=\"primary\"\n                  htmlType=\"submit\"\n                  disabled={submitting}\n                >\n                  {submitting ? <Spin /> : 'Submit'}\n                </Button>\n              </Row>\n            </Form.Item>\n          </Form>\n          {submitted && (\n            <Alert\n              style={{\n                background: 'transparent',\n                border: '1px solid',\n                borderColor: '#51D07B',\n              }}\n              message={\n                <div style={{ fontSize: 14, textAlign: 'start' }}>\n                  Successfully redeemed. You will receive an email shortly to\n                  confirm the redemption\n                </div>\n              }\n              type=\"success\"\n              showIcon\n            />\n          )}\n          <Help />\n        </Col>\n      </Row>\n      <Row></Row>\n    </>\n  );\n};\n\nconst Help = () => {\n  const styles = {\n    root: {\n      textAlign: 'center',\n      paddingLeft: 60,\n      paddingTop: 20,\n    } as React.CSSProperties,\n  };\n  return (\n    <div style={styles.root}>\n      If you are having issues redeeming please email{' '}\n      <a href=\"mailto:redeem@solible.com\">redeem@solible.com</a>\n    </div>\n  );\n};\n\nexport const NftImage = ({ nft }: { nft: NFT }) => {\n  return (\n    <div\n      style={{\n        background: 'rgb(18, 24, 55)',\n        height: 500,\n        width: 500,\n      }}\n    >\n      <Row\n        align=\"middle\"\n        justify=\"center\"\n        style={{\n          backgroundImage: `url(${waves})`,\n          backgroundPosition: 'center',\n          backgroundRepeat: 'no-repeat',\n          backgroundSize: 'cover',\n        }}\n      >\n        <img\n          //@ts-ignore\n          src={nft.imgSmall}\n          style={{ margin: 'auto' }}\n          alt=\"\"\n        />\n      </Row>\n    </div>\n  );\n};\n\nexport default RedeemForm;\n","import React from 'react';\nimport RedeemForm from '../components/RedeemForm';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { PublicKey } from '@solana/web3.js';\nimport { Row } from 'antd';\nimport { findNftFromMint } from '../utils/nfts/utils';\n\nconst RedeemPage = () => {\n  const { mintAddress } = useParams();\n  const history = useHistory();\n  const nft = findNftFromMint(new PublicKey(mintAddress));\n  if (!nft || !nft?.redeembable || !nft?.redeemAddress) {\n    history.push('/');\n  }\n\n  return (\n    <Row justify=\"center\" style={{ paddingTop: 50 }}>\n      <RedeemForm\n        nftMint={new PublicKey(mintAddress)}\n        // @ts-ignore\n        destination={nft?.redeemAddress}\n      />\n    </Row>\n  );\n};\n\nexport default RedeemPage;\n","import React, { useEffect, useState } from 'react';\nimport { Row, Col, Spin } from 'antd';\nimport { NftCard } from '../components/NftCard';\nimport { getNftList } from '../utils/nfts';\nimport { useLocation } from 'react-router-dom';\nimport { useTokenAccounts } from '../utils/utils';\nimport { useWallet } from '../utils/wallet';\nimport { useConnection } from '../utils/connection';\nimport { NFT } from '../utils/nfts';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { getProgramAccounts } from '../utils/wallet';\n\nconst antIcon = <LoadingOutlined style={{ fontSize: 80 }} spin />;\n\nconst CollectionPage = (): JSX.Element => {\n  let allNfts = getNftList();\n  const [nfts, setNfts] = useState<Array<NFT>>([]);\n  const { wallet, connected } = useWallet();\n  const connection = useConnection();\n  const { balances, loaded } = useTokenAccounts(wallet?.publicKey, connection);\n  const rows = [...Array(Math.ceil(nfts?.length / 4))];\n  const productRows = rows.map((row, idx) => nfts?.slice(idx * 4, idx * 4 + 4));\n  const location = useLocation();\n  const params = new URLSearchParams(location.search);\n  const keywords = params.get('keywords')?.split('-');\n\n  useEffect(() => {\n    let intersection: NFT[] = [];\n    const get = async () => {\n      if (!connected) {\n        return;\n      }\n      let result = await getProgramAccounts(wallet?.publicKey);\n      result = result?.map((t) => {\n        return {\n          amount: t?.account?.data?.parsed?.info?.tokenAmount?.uiAmount,\n          mint: t?.account?.data?.parsed?.info?.mint,\n        };\n      });\n\n      return result?.filter((e) => e.amount > 0);\n    };\n    get().then((r) => {\n      let result = r?.map((e) => e.mint);\n      allNfts.forEach((x) => {\n        if (result?.includes(x.mintAddress.toBase58())) {\n          intersection.push(x);\n        }\n      });\n    });\n\n    setNfts(intersection);\n  }, [connected]);\n\n  if (!connected) {\n    return (\n      <Row align=\"middle\" justify=\"center\" style={{ paddingTop: 50 }}>\n        <h1 className=\"explore-page-title\">Please connect your wallet</h1>\n      </Row>\n    );\n  }\n\n  return (\n    <>\n      <Row align=\"middle\" justify=\"space-around\" style={{ paddingTop: 50 }}>\n        <Col>\n          <h1 className=\"explore-page-title\">Your collection</h1>\n        </Col>\n        {/* <Col>Sort options</Col> */}\n      </Row>\n      {productRows.map((row, idx) => {\n        return (\n          <Row\n            align=\"middle\"\n            justify=\"center\"\n            style={{ paddingBottom: 20 }}\n            key={`collection-${idx}`}\n          >\n            {row.map((nft, i) => {\n              if (nfts.length > 0) {\n                return (\n                  <Col style={{ padding: 20 }} key={`col-collection-${i}`}>\n                    <NftCard mintAddress={nft.mintAddress} />\n                  </Col>\n                );\n              }\n            })}\n          </Row>\n        );\n      })}\n    </>\n  );\n};\n\nexport default CollectionPage;\n","import React, { useState, useEffect } from 'react';\nimport { Row, Select, Form, Input, Button, Typography } from 'antd';\nimport { isValidPublicKey, isValidMarket } from '../../utils/utils';\nimport { notify } from '../../utils/notifications';\nimport { useConnection } from '../../utils/connection';\nimport { PublicKey, Connection } from '@solana/web3.js';\nimport { NFT } from '../../utils/nfts';\nimport Link from '../Link';\n\nconst { Title, Paragraph } = Typography;\nconst { Option } = Select;\n\nconst styles = {\n  formContainer: {\n    maxWidth: 500,\n    width: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  container: {\n    maxWidth: 800,\n  },\n  title: {\n    margin: 40,\n  },\n  leftAlign: {\n    textAlign: 'left',\n  } as React.CSSProperties,\n};\n\nconst URLS = {\n  githubPr:\n    'https://github.com/dr497/serum-dex-ui/edit/solible/src/utils/nfts/nfts.json',\n  pinata: 'https://pinata.cloud/',\n  listMarket: 'https://dex.bonfida.com/#/list-new-market',\n  github: 'https://github.com',\n  mint: 'https://www.spl-token-ui.com/#/',\n};\n\nconst ListingExplainer = () => {\n  return (\n    <>\n      <Row justify=\"center\">\n        <Title level={1} style={styles.title}>\n          Solible - Listing\n        </Title>\n      </Row>\n\n      <Row justify=\"center\">\n        <Title level={2}>How to list on Solible?</Title>\n      </Row>\n      <Paragraph>\n        We want Solible to be open source and self maintained. What does it mean\n        in practice?\n        <ul>\n          <li>Solible repository is open source on Github</li>\n          <li>Anyone can submit a pull request (PR) to list an NFT</li>\n          <li>Listing an NFT is free</li>\n        </ul>\n      </Paragraph>\n\n      <Row justify=\"center\">\n        <Title level={2}>What do you need to list on Solible?</Title>\n      </Row>\n      <Paragraph>\n        <ul>\n          <li>\n            A{' '}\n            <Link external to={URLS.github}>\n              GitHub\n            </Link>{' '}\n            account\n          </li>\n          <li>\n            You need to mint the token you want to list. It needs to be a token\n            with 0 decimals. You can mint tokens here{' '}\n            <Link external to={URLS.mint}>\n              SPL Token Creator\n            </Link>\n          </li>\n          <li>\n            You need to have created the market on which you want the NFT to be\n            traded on. You can create a Serum market here:{' '}\n            <Link external to={URLS.listMarket}>\n              Add a Serum market\n            </Link>\n          </li>\n          <li>A high resolution version of the art piece hosted on IPFS</li>\n          <li>\n            A low resolution (300 x 300px) of the art piece hosted on IPFS\n          </li>\n          <li>\n            Use the form below to generate the meta data needed for listing\n          </li>\n          <li>\n            Once you have generated the meta data click on{' '}\n            <b>Submit Pull Request on GitHub</b> to add the metadata to the list\n            of NFTs available on Solible\n          </li>\n        </ul>\n      </Paragraph>\n\n      <Row justify=\"center\">\n        <Title level={2}>Why host on IPFS?</Title>\n      </Row>\n      <Paragraph>\n        The InterPlanetary File System (IPFS) is a protocol and peer-to-peer\n        network for storing and sharing data in a distributed file system. IPFS\n        uses content-addressing to uniquely identify each file in a global\n        namespace connecting all computing devices. Files uploaded on IPFS have\n        a unique identifier called CID or hash. Therefore each piece of art can\n        be uniquely identified by this cryptographic hash.\n      </Paragraph>\n      <Paragraph>\n        The main issue with traditional hosting is that a file could be modified\n        without modifying the URL to access it. While with IPFS any small\n        modification would result in a completely different hash. Therefore the\n        hash contained in the meta data guarantees the originality of the art.\n      </Paragraph>\n      <Paragraph>\n        You can use Pinata to host your art on IPFS:{' '}\n        <Link external to={URLS.pinata}>\n          Pinata\n        </Link>\n        .\n      </Paragraph>\n    </>\n  );\n};\n\nconst formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 24,\n    },\n    sm: {\n      span: 12,\n    },\n  },\n  wrapperCol: {\n    xs: {\n      span: 24,\n    },\n    sm: {\n      span: 16,\n    },\n  },\n};\n\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0,\n    },\n    sm: {\n      span: 16,\n      offset: 12,\n    },\n  },\n};\n\nconst Listing = () => {\n  const connection = useConnection();\n  const [name, setName] = useState('');\n  const [mint, setMint] = useState('');\n  const [ipfs, setIpfs] = useState('');\n  const [ipfsSmall, setIpfsSmall] = useState('');\n  const [decimals, setDecimals] = useState('');\n  const [supply, setSupply] = useState('');\n  const [market, setMarket] = useState('');\n  const [type, setType] = useState('IMAGE');\n  const [githubText, setGithubText] = useState<JSX.Element | null>(null);\n\n  const handleChangeName = (e) => {\n    setName(e.target.value);\n  };\n\n  const handleChangeMint = (e) => {\n    setMint(e.target.value.trim());\n  };\n\n  const handleChangeIpfs = (e) => {\n    setIpfs(e.target.value.trim());\n  };\n\n  const handleChangeType = (v) => {\n    setType(v);\n  };\n\n  const handleChangeSupply = (e) => {\n    setSupply(e.target.value.trim());\n  };\n\n  const handleChangeIpfsSmall = (e) => {\n    const address = e.target.value.trim();\n    if (type === 'IMAGE') {\n      const img = new Image();\n      img.onload = function () {\n        // @ts-ignore\n        const width = this.width;\n        // @ts-ignore\n        const height = this.height;\n        console.log('white, heihgt', width, height);\n        if (width <= 300 && height <= 300) {\n          setIpfsSmall(address);\n        } else {\n          notify({\n            message: 'Invalid size - needs to be < 300 x 300',\n            type: 'error',\n          });\n          setIpfsSmall('');\n        }\n      };\n      img.src = address;\n    } else if (type === 'VIDEO') {\n      let vid = document.createElement('video');\n      vid.src = address;\n      if (vid.height <= 300 && vid.width <= 300) {\n        setIpfsSmall(address);\n      } else {\n        notify({\n          message: 'Invalid size - needs to be < 300 x 300',\n          type: 'error',\n        });\n        setIpfsSmall('');\n      }\n    }\n  };\n\n  const handleChangeMarket = (e) => {\n    setMarket(e.target.value.trim());\n  };\n\n  const canSubmit = name && mint && ipfsSmall && ipfs && market && supply;\n\n  const submit = async () => {\n    const validMarket = await isValidMarket(connection, market);\n    const validMint = isValidPublicKey(mint);\n    if (!validMarket) {\n      notify({\n        message: 'Invalid Market address',\n        type: 'error',\n      });\n      return;\n    }\n    if (!validMint) {\n      notify({\n        message: 'Invalid mint address',\n        type: 'error',\n      });\n      return;\n    }\n\n    const nft = new NFT(\n      ipfs,\n      ipfsSmall,\n      name,\n      parseFloat(supply),\n      mint,\n      market,\n      false,\n      name.trim().split(' '),\n      // @ts-ignore\n      type,\n    );\n    setGithubText(\n      <div>\n        <pre>{nft.toJson()}</pre>\n      </div>,\n    );\n  };\n\n  return (\n    <div style={styles.container}>\n      <ListingExplainer />\n      <Row justify=\"center\">\n        <Title level={2} style={styles.title}>\n          Listing Form\n        </Title>\n      </Row>\n      <div style={styles.formContainer}>\n        <Form {...formItemLayout} name=\"listing-form\">\n          <Form.Item label=\"Name\">\n            <Input value={name} onChange={handleChangeName} />\n          </Form.Item>\n          <Form.Item label=\"Market\">\n            <Input value={market} onChange={handleChangeMarket} />\n          </Form.Item>\n          <Form.Item label=\"Mint\">\n            <Input value={mint} onChange={handleChangeMint} />\n          </Form.Item>\n          <Form.Item label=\"Supply\">\n            <Input value={supply} onChange={handleChangeSupply} />\n          </Form.Item>\n          <Form.Item label=\"NFT Type\">\n            <Select defaultValue=\"IMAGE\" onChange={handleChangeType}>\n              <Option value=\"IMAGE\">IMAGE</Option>\n              <Option value=\"VIDEO\">VIDEO</Option>\n            </Select>\n          </Form.Item>\n          <Form.Item label=\"High Resolution (IPFS link)\">\n            <Input value={ipfs} onChange={handleChangeIpfs} />\n          </Form.Item>\n          <Form.Item label=\"Low Res. (300 x 300) (IPFS link)\">\n            <Input value={ipfsSmall} onChange={handleChangeIpfsSmall} />\n          </Form.Item>\n          <Form.Item {...tailFormItemLayout}>\n            <Button disabled={!canSubmit} onClick={submit}>\n              Submit\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n\n      {githubText && (\n        <Row justify=\"center\">\n          <Paragraph>{githubText}</Paragraph>\n          <Paragraph>\n            <Link external to={URLS.githubPr}>\n              <Button>Submit Pull Request on GitHub</Button>\n            </Link>\n          </Paragraph>\n        </Row>\n      )}\n    </div>\n  );\n};\n\nexport default Listing;\n","import React from 'react';\nimport Listing from '../components/Listing';\nimport { Row } from 'antd';\n\nconst ListingPage = () => {\n  return (\n    <Row justify=\"center\">\n      <Listing />\n    </Row>\n  );\n};\n\nexport default ListingPage;\n","import React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport BasicLayout from './components/BasicLayout';\nimport ExplorePage from './pages/ExplorePage';\nimport TradePage from './pages/TradePage';\nimport RedeemPage from './pages/RedeemPage';\nimport CollectionPage from './pages/CollectionPage';\nimport ListingPage from './pages/ListingPage';\n\nexport function Routes() {\n  return (\n    <>\n      <HashRouter basename={'/'}>\n        <BasicLayout>\n          <Switch>\n            <Route exact path=\"/\">\n              <ExplorePage />\n            </Route>\n            <Route exact path=\"/explore\">\n              <ExplorePage />\n            </Route>\n            <Route exact path=\"/market/:marketAddress\">\n              <TradePage />\n            </Route>\n            <Route exact path=\"/redeem/:mintAddress\">\n              <RedeemPage />\n            </Route>\n            <Route exact path=\"/collection\">\n              <CollectionPage />\n            </Route>\n            <Route exact path=\"/list\">\n              <ListingPage />\n            </Route>\n          </Switch>\n        </BasicLayout>\n      </HashRouter>\n    </>\n  );\n}\n","import React, { Suspense } from 'react';\nimport './App.less';\nimport { ConnectionProvider } from './utils/connection';\nimport { WalletProvider } from './utils/wallet';\nimport { GlobalStyle } from './global_style';\nimport { Spin } from 'antd';\nimport ErrorBoundary from './components/ErrorBoundary';\nimport { Routes } from './routes';\nimport { PreferencesProvider } from './utils/preferences';\n\nexport default function App() {\n  return (\n    <Suspense fallback={() => <Spin size=\"large\" />}>\n      <GlobalStyle />\n      <ErrorBoundary>\n        <ConnectionProvider>\n          <WalletProvider>\n            <PreferencesProvider>\n              <Suspense fallback={() => <Spin size=\"large\" />}>\n                <Routes />\n              </Suspense>\n            </PreferencesProvider>\n          </WalletProvider>\n        </ConnectionProvider>\n      </ErrorBoundary>\n    </Suspense>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}